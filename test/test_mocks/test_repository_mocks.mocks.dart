// Mocks generated by Mockito 5.4.4 from annotations
// in kozak/test/test_mocks/test_repository_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:kozak/shared/shared.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IHomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIHomeRepository extends _i1.Mock implements _i3.IHomeRepository {
  @override
  _i4.Future<
      _i2.Either<_i3.SomeFailure,
          List<_i3.QuestionModel>>> getQuestions() => (super.noSuchMethod(
        Invocation.method(
          #getQuestions,
          [],
        ),
        returnValue: _i4
            .Future<_i2.Either<_i3.SomeFailure, List<_i3.QuestionModel>>>.value(
            _FakeEither_0<_i3.SomeFailure, List<_i3.QuestionModel>>(
          this,
          Invocation.method(
            #getQuestions,
            [],
          ),
        )),
        returnValueForMissingStub: _i4
            .Future<_i2.Either<_i3.SomeFailure, List<_i3.QuestionModel>>>.value(
            _FakeEither_0<_i3.SomeFailure, List<_i3.QuestionModel>>(
          this,
          Invocation.method(
            #getQuestions,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i3.SomeFailure, List<_i3.QuestionModel>>>);

  @override
  void addMockQuestions() => super.noSuchMethod(
        Invocation.method(
          #addMockQuestions,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IInformationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIInformationRepository extends _i1.Mock
    implements _i3.IInformationRepository {
  @override
  _i4.Stream<List<_i3.InformationModel>> getInformationItems() =>
      (super.noSuchMethod(
        Invocation.method(
          #getInformationItems,
          [],
        ),
        returnValue: _i4.Stream<List<_i3.InformationModel>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<List<_i3.InformationModel>>.empty(),
      ) as _i4.Stream<List<_i3.InformationModel>>);

  @override
  void addMockInformationItems() => super.noSuchMethod(
        Invocation.method(
          #addMockInformationItems,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IFeedbackRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFeedbackRepository extends _i1.Mock
    implements _i3.IFeedbackRepository {
  @override
  _i4.Future<_i2.Either<_i3.SomeFailure, bool>> sendFeedback(
          _i3.FeedbackModel? feedback) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendFeedback,
          [feedback],
        ),
        returnValue: _i4.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendFeedback,
            [feedback],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendFeedback,
            [feedback],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i3.SomeFailure, bool>>);
}

/// A class which mocks [FirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreService extends _i1.Mock implements _i3.FirestoreService {
  @override
  _i4.Future<void> addFeedback(_i3.FeedbackModel? feedback) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFeedback,
          [feedback],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addQuestion(_i3.QuestionModel? question) =>
      (super.noSuchMethod(
        Invocation.method(
          #addQuestion,
          [question],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i3.QuestionModel>> getQuestions() => (super.noSuchMethod(
        Invocation.method(
          #getQuestions,
          [],
        ),
        returnValue:
            _i4.Future<List<_i3.QuestionModel>>.value(<_i3.QuestionModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i3.QuestionModel>>.value(<_i3.QuestionModel>[]),
      ) as _i4.Future<List<_i3.QuestionModel>>);

  @override
  _i4.Future<List<_i3.FundModel>> getFunds() => (super.noSuchMethod(
        Invocation.method(
          #getFunds,
          [],
        ),
        returnValue: _i4.Future<List<_i3.FundModel>>.value(<_i3.FundModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i3.FundModel>>.value(<_i3.FundModel>[]),
      ) as _i4.Future<List<_i3.FundModel>>);

  @override
  _i4.Future<void> addFund(_i3.FundModel? fund) => (super.noSuchMethod(
        Invocation.method(
          #addFund,
          [fund],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [IInvestorsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIInvestorsRepository extends _i1.Mock
    implements _i3.IInvestorsRepository {
  @override
  _i4.Future<_i2.Either<_i3.SomeFailure, List<_i3.FundModel>>> getFunds() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFunds,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i3.SomeFailure, List<_i3.FundModel>>>.value(
                _FakeEither_0<_i3.SomeFailure, List<_i3.FundModel>>(
          this,
          Invocation.method(
            #getFunds,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i3.SomeFailure, List<_i3.FundModel>>>.value(
                _FakeEither_0<_i3.SomeFailure, List<_i3.FundModel>>(
          this,
          Invocation.method(
            #getFunds,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i3.SomeFailure, List<_i3.FundModel>>>);

  @override
  void addMockFunds() => super.noSuchMethod(
        Invocation.method(
          #addMockFunds,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
