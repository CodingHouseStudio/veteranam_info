// Mocks generated by Mockito 5.4.4 from annotations
// in kozak/test/test_mocks/test_repository_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i17;
import 'dart:io' as _i16;
import 'dart:typed_data' as _i15;

import 'package:cloud_firestore/cloud_firestore.dart' as _i7;
import 'package:dartz/dartz.dart' as _i2;
import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:firebase_core/firebase_core.dart' as _i6;
import 'package:firebase_storage/firebase_storage.dart' as _i10;
import 'package:firebase_storage_platform_interface/firebase_storage_platform_interface.dart'
    as _i12;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i5;
import 'package:google_sign_in/google_sign_in.dart' as _i9;
import 'package:image_picker/image_picker.dart' as _i11;
import 'package:kozak/shared/models/employee_respond_model.dart' as _i13;
import 'package:kozak/shared/shared.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserSetting_2 extends _i1.SmartFake implements _i3.UserSetting {
  _FakeUserSetting_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoogleAuthProvider_3 extends _i1.SmartFake
    implements _i4.GoogleAuthProvider {
  _FakeGoogleAuthProvider_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIAppAuthenticationRepository_4 extends _i1.SmartFake
    implements _i3.IAppAuthenticationRepository {
  _FakeIAppAuthenticationRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlutterSecureStorage_5 extends _i1.SmartFake
    implements _i5.FlutterSecureStorage {
  _FakeFlutterSecureStorage_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseApp_6 extends _i1.SmartFake implements _i6.FirebaseApp {
  _FakeFirebaseApp_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeActionCodeInfo_7 extends _i1.SmartFake
    implements _i4.ActionCodeInfo {
  _FakeActionCodeInfo_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_8 extends _i1.SmartFake
    implements _i4.UserCredential {
  _FakeUserCredential_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfirmationResult_9 extends _i1.SmartFake
    implements _i4.ConfirmationResult {
  _FakeConfirmationResult_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettings_10 extends _i1.SmartFake implements _i7.Settings {
  _FakeSettings_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_11<T extends Object?> extends _i1.SmartFake
    implements _i7.CollectionReference<T> {
  _FakeCollectionReference_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWriteBatch_12 extends _i1.SmartFake implements _i7.WriteBatch {
  _FakeWriteBatch_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoadBundleTask_13 extends _i1.SmartFake
    implements _i7.LoadBundleTask {
  _FakeLoadBundleTask_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_14<T1 extends Object?> extends _i1.SmartFake
    implements _i7.QuerySnapshot<T1> {
  _FakeQuerySnapshot_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_15<T extends Object?> extends _i1.SmartFake
    implements _i7.Query<T> {
  _FakeQuery_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_16<T extends Object?> extends _i1.SmartFake
    implements _i7.DocumentReference<T> {
  _FakeDocumentReference_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_17<T1> extends _i1.SmartFake implements _i8.Future<T1> {
  _FakeFuture_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSOptions_18 extends _i1.SmartFake implements _i5.IOSOptions {
  _FakeIOSOptions_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidOptions_19 extends _i1.SmartFake
    implements _i5.AndroidOptions {
  _FakeAndroidOptions_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxOptions_20 extends _i1.SmartFake implements _i5.LinuxOptions {
  _FakeLinuxOptions_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsOptions_21 extends _i1.SmartFake
    implements _i5.WindowsOptions {
  _FakeWindowsOptions_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebOptions_22 extends _i1.SmartFake implements _i5.WebOptions {
  _FakeWebOptions_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsOptions_23 extends _i1.SmartFake implements _i5.MacOsOptions {
  _FakeMacOsOptions_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserMetadata_24 extends _i1.SmartFake implements _i4.UserMetadata {
  _FakeUserMetadata_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMultiFactor_25 extends _i1.SmartFake implements _i4.MultiFactor {
  _FakeMultiFactor_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIdTokenResult_26 extends _i1.SmartFake implements _i4.IdTokenResult {
  _FakeIdTokenResult_26(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_27 extends _i1.SmartFake implements _i4.User {
  _FakeUser_27(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoogleSignInAuthentication_28 extends _i1.SmartFake
    implements _i9.GoogleSignInAuthentication {
  _FakeGoogleSignInAuthentication_28(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_29 extends _i1.SmartFake
    implements _i7.FirebaseFirestore {
  _FakeFirebaseFirestore_29(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAggregateQuery_30 extends _i1.SmartFake
    implements _i7.AggregateQuery {
  _FakeAggregateQuery_30(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentSnapshot_31<T1 extends Object?> extends _i1.SmartFake
    implements _i7.DocumentSnapshot<T1> {
  _FakeDocumentSnapshot_31(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapshotMetadata_32 extends _i1.SmartFake
    implements _i7.SnapshotMetadata {
  _FakeSnapshotMetadata_32(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_33 extends _i1.SmartFake implements Duration {
  _FakeDuration_33(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReference_34 extends _i1.SmartFake implements _i10.Reference {
  _FakeReference_34(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseStorage_35 extends _i1.SmartFake
    implements _i10.FirebaseStorage {
  _FakeFirebaseStorage_35(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLostDataResponse_36 extends _i1.SmartFake
    implements _i11.LostDataResponse {
  _FakeLostDataResponse_36(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFullMetadata_37 extends _i1.SmartFake implements _i12.FullMetadata {
  _FakeFullMetadata_37(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeListResult_38 extends _i1.SmartFake implements _i10.ListResult {
  _FakeListResult_38(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUploadTask_39 extends _i1.SmartFake implements _i10.UploadTask {
  _FakeUploadTask_39(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDownloadTask_40 extends _i1.SmartFake implements _i10.DownloadTask {
  _FakeDownloadTask_40(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskSnapshot_41 extends _i1.SmartFake implements _i10.TaskSnapshot {
  _FakeTaskSnapshot_41(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_42 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_42(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IHomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIHomeRepository extends _i1.Mock implements _i3.IHomeRepository {
  @override
  _i8.Future<
      _i2.Either<_i3.SomeFailure,
          List<_i3.QuestionModel>>> getQuestions() => (super.noSuchMethod(
        Invocation.method(
          #getQuestions,
          [],
        ),
        returnValue: _i8
            .Future<_i2.Either<_i3.SomeFailure, List<_i3.QuestionModel>>>.value(
            _FakeEither_0<_i3.SomeFailure, List<_i3.QuestionModel>>(
          this,
          Invocation.method(
            #getQuestions,
            [],
          ),
        )),
        returnValueForMissingStub: _i8
            .Future<_i2.Either<_i3.SomeFailure, List<_i3.QuestionModel>>>.value(
            _FakeEither_0<_i3.SomeFailure, List<_i3.QuestionModel>>(
          this,
          Invocation.method(
            #getQuestions,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.QuestionModel>>>);

  @override
  void addMockQuestions() => super.noSuchMethod(
        Invocation.method(
          #addMockQuestions,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IInformationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIInformationRepository extends _i1.Mock
    implements _i3.IInformationRepository {
  @override
  _i8.Stream<List<_i3.InformationModel>> getInformationItems() =>
      (super.noSuchMethod(
        Invocation.method(
          #getInformationItems,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.InformationModel>>.empty(),
        returnValueForMissingStub:
            _i8.Stream<List<_i3.InformationModel>>.empty(),
      ) as _i8.Stream<List<_i3.InformationModel>>);

  @override
  void addMockInformationItems() => super.noSuchMethod(
        Invocation.method(
          #addMockInformationItems,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IFeedbackRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFeedbackRepository extends _i1.Mock
    implements _i3.IFeedbackRepository {
  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendFeedback(
          _i3.FeedbackModel? feedback) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendFeedback,
          [feedback],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendFeedback,
            [feedback],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendFeedback,
            [feedback],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> checkUserNeedShowFeedback(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkUserNeedShowFeedback,
          [userId],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #checkUserNeedShowFeedback,
            [userId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #checkUserNeedShowFeedback,
            [userId],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);
}

/// A class which mocks [FirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreService extends _i1.Mock implements _i3.FirestoreService {
  @override
  _i8.Future<void> addFeedback(_i3.FeedbackModel? feedback) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFeedback,
          [feedback],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.FeedbackModel>> getUserFeedback(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserFeedback,
          [userId],
        ),
        returnValue:
            _i8.Future<List<_i3.FeedbackModel>>.value(<_i3.FeedbackModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.FeedbackModel>>.value(<_i3.FeedbackModel>[]),
      ) as _i8.Future<List<_i3.FeedbackModel>>);

  @override
  _i8.Future<void> addQuestion(_i3.QuestionModel? question) =>
      (super.noSuchMethod(
        Invocation.method(
          #addQuestion,
          [question],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.QuestionModel>> getQuestions() => (super.noSuchMethod(
        Invocation.method(
          #getQuestions,
          [],
        ),
        returnValue:
            _i8.Future<List<_i3.QuestionModel>>.value(<_i3.QuestionModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.QuestionModel>>.value(<_i3.QuestionModel>[]),
      ) as _i8.Future<List<_i3.QuestionModel>>);

  @override
  _i8.Future<List<_i3.FundModel>> getFunds() => (super.noSuchMethod(
        Invocation.method(
          #getFunds,
          [],
        ),
        returnValue: _i8.Future<List<_i3.FundModel>>.value(<_i3.FundModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.FundModel>>.value(<_i3.FundModel>[]),
      ) as _i8.Future<List<_i3.FundModel>>);

  @override
  _i8.Future<void> addFund(_i3.FundModel? fund) => (super.noSuchMethod(
        Invocation.method(
          #addFund,
          [fund],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateUserSetting(_i3.UserSetting? userSetting) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserSetting,
          [userSetting],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<List<_i3.InformationModel>> getInformations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getInformations,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.InformationModel>>.empty(),
        returnValueForMissingStub:
            _i8.Stream<List<_i3.InformationModel>>.empty(),
      ) as _i8.Stream<List<_i3.InformationModel>>);

  @override
  _i8.Future<void> addInformation(_i3.InformationModel? information) =>
      (super.noSuchMethod(
        Invocation.method(
          #addInformation,
          [information],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setUserSetting({
    required _i3.UserSetting? userSetting,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserSetting,
          [],
          {
            #userSetting: userSetting,
            #userId: userId,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<_i3.UserSetting> getUserSetting(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserSetting,
          [userId],
        ),
        returnValue: _i8.Stream<_i3.UserSetting>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.UserSetting>.empty(),
      ) as _i8.Stream<_i3.UserSetting>);

  @override
  _i8.Future<void> deleteUserSetting(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #deleteUserSetting,
          [userId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<List<_i3.WorkModel>> getWorks() => (super.noSuchMethod(
        Invocation.method(
          #getWorks,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.WorkModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.WorkModel>>.empty(),
      ) as _i8.Stream<List<_i3.WorkModel>>);

  @override
  _i8.Future<void> addWork(_i3.WorkModel? work) => (super.noSuchMethod(
        Invocation.method(
          #addWork,
          [work],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<List<_i3.StoryModel>> getStories() => (super.noSuchMethod(
        Invocation.method(
          #getStories,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.StoryModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.StoryModel>>.empty(),
      ) as _i8.Stream<List<_i3.StoryModel>>);

  @override
  _i8.Future<void> addStory(_i3.StoryModel? information) => (super.noSuchMethod(
        Invocation.method(
          #addStory,
          [information],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.StoryModel>> getStoriesByUserId(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoriesByUserId,
          [userId],
        ),
        returnValue: _i8.Future<List<_i3.StoryModel>>.value(<_i3.StoryModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.StoryModel>>.value(<_i3.StoryModel>[]),
      ) as _i8.Future<List<_i3.StoryModel>>);

  @override
  _i8.Stream<List<_i3.DiscountModel>> getDiscounts() => (super.noSuchMethod(
        Invocation.method(
          #getDiscounts,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.DiscountModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.DiscountModel>>.empty(),
      ) as _i8.Stream<List<_i3.DiscountModel>>);

  @override
  _i8.Future<void> addDiscount(_i3.DiscountModel? discount) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDiscount,
          [discount],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<List<_i3.TagModel>> getTags() => (super.noSuchMethod(
        Invocation.method(
          #getTags,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.TagModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.TagModel>>.empty(),
      ) as _i8.Stream<List<_i3.TagModel>>);

  @override
  _i8.Future<void> addTags(_i3.TagModel? tags) => (super.noSuchMethod(
        Invocation.method(
          #addTags,
          [tags],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> sendRespond(_i13.EmployeeRespondModel? respondModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRespond,
          [respondModel],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [IInvestorsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIInvestorsRepository extends _i1.Mock
    implements _i3.IInvestorsRepository {
  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.FundModel>>> getFunds() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFunds,
          [],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.FundModel>>>.value(
                _FakeEither_0<_i3.SomeFailure, List<_i3.FundModel>>(
          this,
          Invocation.method(
            #getFunds,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.FundModel>>>.value(
                _FakeEither_0<_i3.SomeFailure, List<_i3.FundModel>>(
          this,
          Invocation.method(
            #getFunds,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.FundModel>>>);

  @override
  void addMockFunds() => super.noSuchMethod(
        Invocation.method(
          #addMockFunds,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IAppAuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAppAuthenticationRepository extends _i1.Mock
    implements _i3.IAppAuthenticationRepository {
  @override
  _i8.Stream<_i3.User> get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _i8.Stream<_i3.User>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.User>.empty(),
      ) as _i8.Stream<_i3.User>);

  @override
  _i8.Stream<_i3.UserSetting> get userSetting => (super.noSuchMethod(
        Invocation.getter(#userSetting),
        returnValue: _i8.Stream<_i3.UserSetting>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.UserSetting>.empty(),
      ) as _i8.Stream<_i3.UserSetting>);

  @override
  _i3.User get currentUser => (super.noSuchMethod(
        Invocation.getter(#currentUser),
        returnValue: _FakeUser_1(
          this,
          Invocation.getter(#currentUser),
        ),
        returnValueForMissingStub: _FakeUser_1(
          this,
          Invocation.getter(#currentUser),
        ),
      ) as _i3.User);

  @override
  _i3.UserSetting get currentUserSetting => (super.noSuchMethod(
        Invocation.getter(#currentUserSetting),
        returnValue: _FakeUserSetting_2(
          this,
          Invocation.getter(#currentUserSetting),
        ),
        returnValueForMissingStub: _FakeUserSetting_2(
          this,
          Invocation.getter(#currentUserSetting),
        ),
      ) as _i3.UserSetting);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> signUpWithGoogle() =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithGoogle,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUpWithGoogle,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUpWithGoogle,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> logInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> logInAnonymously() =>
      (super.noSuchMethod(
        Invocation.method(
          #logInAnonymously,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logInAnonymously,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logInAnonymously,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> signUp({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  bool isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #isAnonymously,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<String?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendVerificationCode(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendVerificationCode,
          [],
          {#email: email},
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendVerificationCode,
            [],
            {#email: email},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendVerificationCode,
            [],
            {#email: email},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> deleteUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> updateUserSetting(
          _i3.UserSetting? userSetting) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserSetting,
          [userSetting],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserSetting,
            [userSetting],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserSetting,
            [userSetting],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);
}

/// A class which mocks [AppAuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppAuthenticationRepository extends _i1.Mock
    implements _i3.AppAuthenticationRepository {
  @override
  bool get isWeb => (super.noSuchMethod(
        Invocation.getter(#isWeb),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set isWeb(bool? _isWeb) => super.noSuchMethod(
        Invocation.setter(
          #isWeb,
          _isWeb,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.GoogleAuthProvider get googleAuthProvider => (super.noSuchMethod(
        Invocation.getter(#googleAuthProvider),
        returnValue: _FakeGoogleAuthProvider_3(
          this,
          Invocation.getter(#googleAuthProvider),
        ),
        returnValueForMissingStub: _FakeGoogleAuthProvider_3(
          this,
          Invocation.getter(#googleAuthProvider),
        ),
      ) as _i4.GoogleAuthProvider);

  @override
  set googleAuthProvider(_i4.GoogleAuthProvider? _googleAuthProvider) =>
      super.noSuchMethod(
        Invocation.setter(
          #googleAuthProvider,
          _googleAuthProvider,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Stream<_i3.User> get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _i8.Stream<_i3.User>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.User>.empty(),
      ) as _i8.Stream<_i3.User>);

  @override
  _i8.Stream<_i3.UserSetting> get userSetting => (super.noSuchMethod(
        Invocation.getter(#userSetting),
        returnValue: _i8.Stream<_i3.UserSetting>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.UserSetting>.empty(),
      ) as _i8.Stream<_i3.UserSetting>);

  @override
  _i3.User get currentUser => (super.noSuchMethod(
        Invocation.getter(#currentUser),
        returnValue: _FakeUser_1(
          this,
          Invocation.getter(#currentUser),
        ),
        returnValueForMissingStub: _FakeUser_1(
          this,
          Invocation.getter(#currentUser),
        ),
      ) as _i3.User);

  @override
  _i3.UserSetting get currentUserSetting => (super.noSuchMethod(
        Invocation.getter(#currentUserSetting),
        returnValue: _FakeUserSetting_2(
          this,
          Invocation.getter(#currentUserSetting),
        ),
        returnValueForMissingStub: _FakeUserSetting_2(
          this,
          Invocation.getter(#currentUserSetting),
        ),
      ) as _i3.UserSetting);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> signUpWithGoogle() =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithGoogle,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUpWithGoogle,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUpWithGoogle,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> logInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> logInAnonymously() =>
      (super.noSuchMethod(
        Invocation.method(
          #logInAnonymously,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logInAnonymously,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logInAnonymously,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> signUp({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  bool isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #isAnonymously,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<String?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendVerificationCode(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendVerificationCode,
          [],
          {#email: email},
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendVerificationCode,
            [],
            {#email: email},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendVerificationCode,
            [],
            {#email: email},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> deleteUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> updateUserSetting(
          _i3.UserSetting? userSetting) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserSetting,
          [userSetting],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserSetting,
            [userSetting],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserSetting,
            [userSetting],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i3.AuthenticationRepository {
  @override
  _i3.IAppAuthenticationRepository get iAppAuthenticationRepository =>
      (super.noSuchMethod(
        Invocation.getter(#iAppAuthenticationRepository),
        returnValue: _FakeIAppAuthenticationRepository_4(
          this,
          Invocation.getter(#iAppAuthenticationRepository),
        ),
        returnValueForMissingStub: _FakeIAppAuthenticationRepository_4(
          this,
          Invocation.getter(#iAppAuthenticationRepository),
        ),
      ) as _i3.IAppAuthenticationRepository);

  @override
  _i8.Stream<_i3.AuthenticationStatus> get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i8.Stream<_i3.AuthenticationStatus>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.AuthenticationStatus>.empty(),
      ) as _i8.Stream<_i3.AuthenticationStatus>);

  @override
  _i8.Stream<_i3.UserSetting> get userSetting => (super.noSuchMethod(
        Invocation.getter(#userSetting),
        returnValue: _i8.Stream<_i3.UserSetting>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.UserSetting>.empty(),
      ) as _i8.Stream<_i3.UserSetting>);

  @override
  _i3.User get currentUser => (super.noSuchMethod(
        Invocation.getter(#currentUser),
        returnValue: _FakeUser_1(
          this,
          Invocation.getter(#currentUser),
        ),
        returnValueForMissingStub: _FakeUser_1(
          this,
          Invocation.getter(#currentUser),
        ),
      ) as _i3.User);

  @override
  _i3.UserSetting get currentUserSetting => (super.noSuchMethod(
        Invocation.getter(#currentUserSetting),
        returnValue: _FakeUserSetting_2(
          this,
          Invocation.getter(#currentUserSetting),
        ),
        returnValueForMissingStub: _FakeUserSetting_2(
          this,
          Invocation.getter(#currentUserSetting),
        ),
      ) as _i3.UserSetting);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> deleteUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> logIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> signUpWithGoogle() =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithGoogle,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUpWithGoogle,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUpWithGoogle,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendVerificationCodeToEmail(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendVerificationCodeToEmail,
          [],
          {#email: email},
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendVerificationCodeToEmail,
            [],
            {#email: email},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendVerificationCodeToEmail,
            [],
            {#email: email},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> updateUserSetting(
          {required _i3.UserSetting? userSetting}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserSetting,
          [],
          {#userSetting: userSetting},
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserSetting,
            [],
            {#userSetting: userSetting},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserSetting,
            [],
            {#userSetting: userSetting},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  bool isAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #isAnonymously,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isAnonymouslyOrEmty() => (super.noSuchMethod(
        Invocation.method(
          #isAnonymouslyOrEmty,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockIStorage extends _i1.Mock implements _i3.IStorage {
  @override
  _i5.FlutterSecureStorage get secureStorage => (super.noSuchMethod(
        Invocation.getter(#secureStorage),
        returnValue: _FakeFlutterSecureStorage_5(
          this,
          Invocation.getter(#secureStorage),
        ),
        returnValueForMissingStub: _FakeFlutterSecureStorage_5(
          this,
          Invocation.getter(#secureStorage),
        ),
      ) as _i5.FlutterSecureStorage);

  @override
  set secureStorage(_i5.FlutterSecureStorage? setSecureStorage) =>
      super.noSuchMethod(
        Invocation.setter(
          #secureStorage,
          setSecureStorage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<String?> readOne({required String? keyItem}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readOne,
          [],
          {#keyItem: keyItem},
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<bool> writeOne({
    required String? keyItem,
    required String? valueItem,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeOne,
          [],
          {
            #keyItem: keyItem,
            #valueItem: valueItem,
          },
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [GoogleSignIn].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignIn extends _i1.Mock implements _i9.GoogleSignIn {
  @override
  _i9.SignInOption get signInOption => (super.noSuchMethod(
        Invocation.getter(#signInOption),
        returnValue: _i9.SignInOption.standard,
        returnValueForMissingStub: _i9.SignInOption.standard,
      ) as _i9.SignInOption);

  @override
  List<String> get scopes => (super.noSuchMethod(
        Invocation.getter(#scopes),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  bool get forceCodeForRefreshToken => (super.noSuchMethod(
        Invocation.getter(#forceCodeForRefreshToken),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Stream<_i9.GoogleSignInAccount?> get onCurrentUserChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onCurrentUserChanged),
        returnValue: _i8.Stream<_i9.GoogleSignInAccount?>.empty(),
        returnValueForMissingStub: _i8.Stream<_i9.GoogleSignInAccount?>.empty(),
      ) as _i8.Stream<_i9.GoogleSignInAccount?>);

  @override
  _i8.Future<_i9.GoogleSignInAccount?> signInSilently({
    bool? suppressErrors = true,
    bool? reAuthenticate = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInSilently,
          [],
          {
            #suppressErrors: suppressErrors,
            #reAuthenticate: reAuthenticate,
          },
        ),
        returnValue: _i8.Future<_i9.GoogleSignInAccount?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.GoogleSignInAccount?>.value(),
      ) as _i8.Future<_i9.GoogleSignInAccount?>);

  @override
  _i8.Future<bool> isSignedIn() => (super.noSuchMethod(
        Invocation.method(
          #isSignedIn,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i9.GoogleSignInAccount?> signIn() => (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
        ),
        returnValue: _i8.Future<_i9.GoogleSignInAccount?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.GoogleSignInAccount?>.value(),
      ) as _i8.Future<_i9.GoogleSignInAccount?>);

  @override
  _i8.Future<_i9.GoogleSignInAccount?> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i8.Future<_i9.GoogleSignInAccount?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.GoogleSignInAccount?>.value(),
      ) as _i8.Future<_i9.GoogleSignInAccount?>);

  @override
  _i8.Future<_i9.GoogleSignInAccount?> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i8.Future<_i9.GoogleSignInAccount?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.GoogleSignInAccount?>.value(),
      ) as _i8.Future<_i9.GoogleSignInAccount?>);

  @override
  _i8.Future<bool> requestScopes(List<String>? scopes) => (super.noSuchMethod(
        Invocation.method(
          #requestScopes,
          [scopes],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> canAccessScopes(
    List<String>? scopes, {
    String? accessToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #canAccessScopes,
          [scopes],
          {#accessToken: accessToken},
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i4.FirebaseAuth {
  @override
  _i6.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_6(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_6(
          this,
          Invocation.getter(#app),
        ),
      ) as _i6.FirebaseApp);

  @override
  set app(_i6.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tenantId(String? tenantId) => super.noSuchMethod(
        Invocation.setter(
          #tenantId,
          tenantId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set customAuthDomain(String? customAuthDomain) => super.noSuchMethod(
        Invocation.setter(
          #customAuthDomain,
          customAuthDomain,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i8.Future<void> useEmulator(String? origin) => (super.noSuchMethod(
        Invocation.method(
          #useEmulator,
          [origin],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> useAuthEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #useAuthEmulator,
          [
            host,
            port,
          ],
          {#automaticHostMapping: automaticHostMapping},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> applyActionCode(String? code) => (super.noSuchMethod(
        Invocation.method(
          #applyActionCode,
          [code],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkActionCode,
          [code],
        ),
        returnValue: _i8.Future<_i4.ActionCodeInfo>.value(_FakeActionCodeInfo_7(
          this,
          Invocation.method(
            #checkActionCode,
            [code],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.ActionCodeInfo>.value(_FakeActionCodeInfo_7(
          this,
          Invocation.method(
            #checkActionCode,
            [code],
          ),
        )),
      ) as _i8.Future<_i4.ActionCodeInfo>);

  @override
  _i8.Future<void> confirmPasswordReset({
    required String? code,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmPasswordReset,
          [],
          {
            #code: code,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.UserCredential> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<List<String>> fetchSignInMethodsForEmail(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSignInMethodsForEmail,
          [email],
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);

  @override
  _i8.Future<_i4.UserCredential> getRedirectResult() => (super.noSuchMethod(
        Invocation.method(
          #getRedirectResult,
          [],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #getRedirectResult,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #getRedirectResult,
            [],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  bool isSignInWithEmailLink(String? emailLink) => (super.noSuchMethod(
        Invocation.method(
          #isSignInWithEmailLink,
          [emailLink],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Stream<_i4.User?> authStateChanges() => (super.noSuchMethod(
        Invocation.method(
          #authStateChanges,
          [],
        ),
        returnValue: _i8.Stream<_i4.User?>.empty(),
        returnValueForMissingStub: _i8.Stream<_i4.User?>.empty(),
      ) as _i8.Stream<_i4.User?>);

  @override
  _i8.Stream<_i4.User?> idTokenChanges() => (super.noSuchMethod(
        Invocation.method(
          #idTokenChanges,
          [],
        ),
        returnValue: _i8.Stream<_i4.User?>.empty(),
        returnValueForMissingStub: _i8.Stream<_i4.User?>.empty(),
      ) as _i8.Stream<_i4.User?>);

  @override
  _i8.Stream<_i4.User?> userChanges() => (super.noSuchMethod(
        Invocation.method(
          #userChanges,
          [],
        ),
        returnValue: _i8.Stream<_i4.User?>.empty(),
        returnValueForMissingStub: _i8.Stream<_i4.User?>.empty(),
      ) as _i8.Stream<_i4.User?>);

  @override
  _i8.Future<void> sendPasswordResetEmail({
    required String? email,
    _i4.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPasswordResetEmail,
          [],
          {
            #email: email,
            #actionCodeSettings: actionCodeSettings,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> sendSignInLinkToEmail({
    required String? email,
    required _i4.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendSignInLinkToEmail,
          [],
          {
            #email: email,
            #actionCodeSettings: actionCodeSettings,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setLanguageCode(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #setLanguageCode,
          [languageCode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setSettings({
    bool? appVerificationDisabledForTesting = false,
    String? userAccessGroup,
    String? phoneNumber,
    String? smsCode,
    bool? forceRecaptchaFlow,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSettings,
          [],
          {
            #appVerificationDisabledForTesting:
                appVerificationDisabledForTesting,
            #userAccessGroup: userAccessGroup,
            #phoneNumber: phoneNumber,
            #smsCode: smsCode,
            #forceRecaptchaFlow: forceRecaptchaFlow,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setPersistence(_i4.Persistence? persistence) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPersistence,
          [persistence],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.UserCredential> signInAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithCredential(
          _i4.AuthCredential? credential) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithCredential,
          [credential],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithCredential,
            [credential],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithCredential,
            [credential],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithCustomToken,
          [token],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithCustomToken,
            [token],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithCustomToken,
            [token],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithEmailLink({
    required String? email,
    required String? emailLink,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailLink,
          [],
          {
            #email: email,
            #emailLink: emailLink,
          },
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithEmailLink,
            [],
            {
              #email: email,
              #emailLink: emailLink,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithEmailLink,
            [],
            {
              #email: email,
              #emailLink: emailLink,
            },
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithAuthProvider(
          _i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithAuthProvider,
          [provider],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithAuthProvider,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithAuthProvider,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithProvider(
          _i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithProvider,
          [provider],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithProvider,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithProvider,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.ConfirmationResult> signInWithPhoneNumber(
    String? phoneNumber, [
    _i4.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithPhoneNumber,
          [
            phoneNumber,
            verifier,
          ],
        ),
        returnValue:
            _i8.Future<_i4.ConfirmationResult>.value(_FakeConfirmationResult_9(
          this,
          Invocation.method(
            #signInWithPhoneNumber,
            [
              phoneNumber,
              verifier,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.ConfirmationResult>.value(_FakeConfirmationResult_9(
          this,
          Invocation.method(
            #signInWithPhoneNumber,
            [
              phoneNumber,
              verifier,
            ],
          ),
        )),
      ) as _i8.Future<_i4.ConfirmationResult>);

  @override
  _i8.Future<_i4.UserCredential> signInWithPopup(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithPopup,
          [provider],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithPopup,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #signInWithPopup,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<void> signInWithRedirect(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithRedirect,
          [provider],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPasswordResetCode,
          [code],
        ),
        returnValue: _i8.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #verifyPasswordResetCode,
            [code],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #verifyPasswordResetCode,
            [code],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<void> verifyPhoneNumber({
    String? phoneNumber,
    _i4.PhoneMultiFactorInfo? multiFactorInfo,
    required _i4.PhoneVerificationCompleted? verificationCompleted,
    required _i4.PhoneVerificationFailed? verificationFailed,
    required _i4.PhoneCodeSent? codeSent,
    required _i4.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
    String? autoRetrievedSmsCodeForTesting,
    Duration? timeout = const Duration(seconds: 30),
    int? forceResendingToken,
    _i4.MultiFactorSession? multiFactorSession,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPhoneNumber,
          [],
          {
            #phoneNumber: phoneNumber,
            #multiFactorInfo: multiFactorInfo,
            #verificationCompleted: verificationCompleted,
            #verificationFailed: verificationFailed,
            #codeSent: codeSent,
            #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
            #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
            #timeout: timeout,
            #forceResendingToken: forceResendingToken,
            #multiFactorSession: multiFactorSession,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> revokeTokenWithAuthorizationCode(
          String? authorizationCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #revokeTokenWithAuthorizationCode,
          [authorizationCode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [IWorkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIWorkRepository extends _i1.Mock implements _i3.IWorkRepository {
  @override
  _i8.Stream<List<_i3.WorkModel>> getWorks() => (super.noSuchMethod(
        Invocation.method(
          #getWorks,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.WorkModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.WorkModel>>.empty(),
      ) as _i8.Stream<List<_i3.WorkModel>>);

  @override
  void addMockWorks() => super.noSuchMethod(
        Invocation.method(
          #addMockWorks,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendRespond(
          _i13.EmployeeRespondModel? respond) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRespond,
          [respond],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendRespond,
            [respond],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendRespond,
            [respond],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i7.FirebaseFirestore {
  @override
  _i6.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_6(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_6(
          this,
          Invocation.getter(#app),
        ),
      ) as _i6.FirebaseApp);

  @override
  set app(_i6.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get databaseURL => (super.noSuchMethod(
        Invocation.getter(#databaseURL),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#databaseURL),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#databaseURL),
        ),
      ) as String);

  @override
  set databaseURL(String? _databaseURL) => super.noSuchMethod(
        Invocation.setter(
          #databaseURL,
          _databaseURL,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get databaseId => (super.noSuchMethod(
        Invocation.getter(#databaseId),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#databaseId),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#databaseId),
        ),
      ) as String);

  @override
  set databaseId(String? _databaseId) => super.noSuchMethod(
        Invocation.setter(
          #databaseId,
          _databaseId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set settings(_i7.Settings? settings) => super.noSuchMethod(
        Invocation.setter(
          #settings,
          settings,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Settings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeSettings_10(
          this,
          Invocation.getter(#settings),
        ),
        returnValueForMissingStub: _FakeSettings_10(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i7.Settings);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i7.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_11<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
        returnValueForMissingStub:
            _FakeCollectionReference_11<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i7.CollectionReference<Map<String, dynamic>>);

  @override
  _i7.WriteBatch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeWriteBatch_12(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeWriteBatch_12(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i7.WriteBatch);

  @override
  _i8.Future<void> clearPersistence() => (super.noSuchMethod(
        Invocation.method(
          #clearPersistence,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> enablePersistence(
          [_i7.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
        Invocation.method(
          #enablePersistence,
          [persistenceSettings],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i7.LoadBundleTask loadBundle(_i15.Uint8List? bundle) => (super.noSuchMethod(
        Invocation.method(
          #loadBundle,
          [bundle],
        ),
        returnValue: _FakeLoadBundleTask_13(
          this,
          Invocation.method(
            #loadBundle,
            [bundle],
          ),
        ),
        returnValueForMissingStub: _FakeLoadBundleTask_13(
          this,
          Invocation.method(
            #loadBundle,
            [bundle],
          ),
        ),
      ) as _i7.LoadBundleTask);

  @override
  void useFirestoreEmulator(
    String? host,
    int? port, {
    bool? sslEnabled = false,
    bool? automaticHostMapping = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #useFirestoreEmulator,
          [
            host,
            port,
          ],
          {
            #sslEnabled: sslEnabled,
            #automaticHostMapping: automaticHostMapping,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i7.QuerySnapshot<T>> namedQueryWithConverterGet<T>(
    String? name, {
    _i7.GetOptions? options = const _i7.GetOptions(),
    required _i7.FromFirestore<T>? fromFirestore,
    required _i7.ToFirestore<T>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryWithConverterGet,
          [name],
          {
            #options: options,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_14<T>(
          this,
          Invocation.method(
            #namedQueryWithConverterGet,
            [name],
            {
              #options: options,
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_14<T>(
          this,
          Invocation.method(
            #namedQueryWithConverterGet,
            [name],
            {
              #options: options,
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<T>>);

  @override
  _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
    String? name, {
    _i7.GetOptions? options = const _i7.GetOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryGet,
          [name],
          {#options: options},
        ),
        returnValue: _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>>.value(
            _FakeQuerySnapshot_14<Map<String, dynamic>>(
          this,
          Invocation.method(
            #namedQueryGet,
            [name],
            {#options: options},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>>.value(
                _FakeQuerySnapshot_14<Map<String, dynamic>>(
          this,
          Invocation.method(
            #namedQueryGet,
            [name],
            {#options: options},
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i7.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectionGroup,
          [collectionPath],
        ),
        returnValue: _FakeQuery_15<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collectionGroup,
            [collectionPath],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collectionGroup,
            [collectionPath],
          ),
        ),
      ) as _i7.Query<Map<String, dynamic>>);

  @override
  _i8.Future<void> disableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #disableNetwork,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i7.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #doc,
          [documentPath],
        ),
        returnValue: _FakeDocumentReference_16<Map<String, dynamic>>(
          this,
          Invocation.method(
            #doc,
            [documentPath],
          ),
        ),
        returnValueForMissingStub:
            _FakeDocumentReference_16<Map<String, dynamic>>(
          this,
          Invocation.method(
            #doc,
            [documentPath],
          ),
        ),
      ) as _i7.DocumentReference<Map<String, dynamic>>);

  @override
  _i8.Future<void> enableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #enableNetwork,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<void> snapshotsInSync() => (super.noSuchMethod(
        Invocation.method(
          #snapshotsInSync,
          [],
        ),
        returnValue: _i8.Stream<void>.empty(),
        returnValueForMissingStub: _i8.Stream<void>.empty(),
      ) as _i8.Stream<void>);

  @override
  _i8.Future<T> runTransaction<T>(
    _i7.TransactionHandler<T>? transactionHandler, {
    Duration? timeout = const Duration(seconds: 30),
    int? maxAttempts = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runTransaction,
          [transactionHandler],
          {
            #timeout: timeout,
            #maxAttempts: maxAttempts,
          },
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runTransaction,
                  [transactionHandler],
                  {
                    #timeout: timeout,
                    #maxAttempts: maxAttempts,
                  },
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_17<T>(
              this,
              Invocation.method(
                #runTransaction,
                [transactionHandler],
                {
                  #timeout: timeout,
                  #maxAttempts: maxAttempts,
                },
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runTransaction,
                  [transactionHandler],
                  {
                    #timeout: timeout,
                    #maxAttempts: maxAttempts,
                  },
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_17<T>(
              this,
              Invocation.method(
                #runTransaction,
                [transactionHandler],
                {
                  #timeout: timeout,
                  #maxAttempts: maxAttempts,
                },
              ),
            ),
      ) as _i8.Future<T>);

  @override
  _i8.Future<void> terminate() => (super.noSuchMethod(
        Invocation.method(
          #terminate,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> waitForPendingWrites() => (super.noSuchMethod(
        Invocation.method(
          #waitForPendingWrites,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setIndexConfiguration({
    required List<_i7.Index>? indexes,
    List<_i7.FieldOverrides>? fieldOverrides,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfiguration,
          [],
          {
            #indexes: indexes,
            #fieldOverrides: fieldOverrides,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setIndexConfigurationFromJSON(String? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfigurationFromJSON,
          [json],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i5.FlutterSecureStorage {
  @override
  _i5.IOSOptions get iOptions => (super.noSuchMethod(
        Invocation.getter(#iOptions),
        returnValue: _FakeIOSOptions_18(
          this,
          Invocation.getter(#iOptions),
        ),
        returnValueForMissingStub: _FakeIOSOptions_18(
          this,
          Invocation.getter(#iOptions),
        ),
      ) as _i5.IOSOptions);

  @override
  _i5.AndroidOptions get aOptions => (super.noSuchMethod(
        Invocation.getter(#aOptions),
        returnValue: _FakeAndroidOptions_19(
          this,
          Invocation.getter(#aOptions),
        ),
        returnValueForMissingStub: _FakeAndroidOptions_19(
          this,
          Invocation.getter(#aOptions),
        ),
      ) as _i5.AndroidOptions);

  @override
  _i5.LinuxOptions get lOptions => (super.noSuchMethod(
        Invocation.getter(#lOptions),
        returnValue: _FakeLinuxOptions_20(
          this,
          Invocation.getter(#lOptions),
        ),
        returnValueForMissingStub: _FakeLinuxOptions_20(
          this,
          Invocation.getter(#lOptions),
        ),
      ) as _i5.LinuxOptions);

  @override
  _i5.WindowsOptions get wOptions => (super.noSuchMethod(
        Invocation.getter(#wOptions),
        returnValue: _FakeWindowsOptions_21(
          this,
          Invocation.getter(#wOptions),
        ),
        returnValueForMissingStub: _FakeWindowsOptions_21(
          this,
          Invocation.getter(#wOptions),
        ),
      ) as _i5.WindowsOptions);

  @override
  _i5.WebOptions get webOptions => (super.noSuchMethod(
        Invocation.getter(#webOptions),
        returnValue: _FakeWebOptions_22(
          this,
          Invocation.getter(#webOptions),
        ),
        returnValueForMissingStub: _FakeWebOptions_22(
          this,
          Invocation.getter(#webOptions),
        ),
      ) as _i5.WebOptions);

  @override
  _i5.MacOsOptions get mOptions => (super.noSuchMethod(
        Invocation.getter(#mOptions),
        returnValue: _FakeMacOsOptions_23(
          this,
          Invocation.getter(#mOptions),
        ),
        returnValueForMissingStub: _FakeMacOsOptions_23(
          this,
          Invocation.getter(#mOptions),
        ),
      ) as _i5.MacOsOptions);

  @override
  _i8.Future<void> write({
    required String? key,
    required String? value,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String?> read({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<bool> containsKey({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> delete({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<Map<String, String>> readAll({
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i8.Future<Map<String, String>>.value(<String, String>{}),
        returnValueForMissingStub:
            _i8.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i8.Future<Map<String, String>>);

  @override
  _i8.Future<void> deleteAll({
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [CacheClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheClient extends _i1.Mock implements _i3.CacheClient {
  @override
  void write<T extends Object>({
    required String? key,
    required T? value,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  T? read<T extends Object>({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {#key: key},
        ),
        returnValueForMissingStub: null,
      ) as T?);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GoogleAuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleAuthProvider extends _i1.Mock
    implements _i4.GoogleAuthProvider {
  @override
  List<String> get scopes => (super.noSuchMethod(
        Invocation.getter(#scopes),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  Map<dynamic, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  String get providerId => (super.noSuchMethod(
        Invocation.getter(#providerId),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#providerId),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#providerId),
        ),
      ) as String);

  @override
  _i4.GoogleAuthProvider addScope(String? scope) => (super.noSuchMethod(
        Invocation.method(
          #addScope,
          [scope],
        ),
        returnValue: _FakeGoogleAuthProvider_3(
          this,
          Invocation.method(
            #addScope,
            [scope],
          ),
        ),
        returnValueForMissingStub: _FakeGoogleAuthProvider_3(
          this,
          Invocation.method(
            #addScope,
            [scope],
          ),
        ),
      ) as _i4.GoogleAuthProvider);

  @override
  _i4.GoogleAuthProvider setCustomParameters(
          Map<dynamic, dynamic>? customOAuthParameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCustomParameters,
          [customOAuthParameters],
        ),
        returnValue: _FakeGoogleAuthProvider_3(
          this,
          Invocation.method(
            #setCustomParameters,
            [customOAuthParameters],
          ),
        ),
        returnValueForMissingStub: _FakeGoogleAuthProvider_3(
          this,
          Invocation.method(
            #setCustomParameters,
            [customOAuthParameters],
          ),
        ),
      ) as _i4.GoogleAuthProvider);
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i4.UserCredential {}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i4.User {
  @override
  bool get emailVerified => (super.noSuchMethod(
        Invocation.getter(#emailVerified),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isAnonymous => (super.noSuchMethod(
        Invocation.getter(#isAnonymous),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.UserMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeUserMetadata_24(
          this,
          Invocation.getter(#metadata),
        ),
        returnValueForMissingStub: _FakeUserMetadata_24(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i4.UserMetadata);

  @override
  List<_i4.UserInfo> get providerData => (super.noSuchMethod(
        Invocation.getter(#providerData),
        returnValue: <_i4.UserInfo>[],
        returnValueForMissingStub: <_i4.UserInfo>[],
      ) as List<_i4.UserInfo>);

  @override
  String get uid => (super.noSuchMethod(
        Invocation.getter(#uid),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#uid),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#uid),
        ),
      ) as String);

  @override
  _i4.MultiFactor get multiFactor => (super.noSuchMethod(
        Invocation.getter(#multiFactor),
        returnValue: _FakeMultiFactor_25(
          this,
          Invocation.getter(#multiFactor),
        ),
        returnValueForMissingStub: _FakeMultiFactor_25(
          this,
          Invocation.getter(#multiFactor),
        ),
      ) as _i4.MultiFactor);

  @override
  _i8.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String?> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIdToken,
          [forceRefresh],
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<_i4.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIdTokenResult,
          [forceRefresh],
        ),
        returnValue: _i8.Future<_i4.IdTokenResult>.value(_FakeIdTokenResult_26(
          this,
          Invocation.method(
            #getIdTokenResult,
            [forceRefresh],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.IdTokenResult>.value(_FakeIdTokenResult_26(
          this,
          Invocation.method(
            #getIdTokenResult,
            [forceRefresh],
          ),
        )),
      ) as _i8.Future<_i4.IdTokenResult>);

  @override
  _i8.Future<_i4.UserCredential> linkWithCredential(
          _i4.AuthCredential? credential) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithCredential,
          [credential],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #linkWithCredential,
            [credential],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #linkWithCredential,
            [credential],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> linkWithProvider(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithProvider,
          [provider],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #linkWithProvider,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #linkWithProvider,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> reauthenticateWithProvider(
          _i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticateWithProvider,
          [provider],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #reauthenticateWithProvider,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #reauthenticateWithProvider,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> reauthenticateWithPopup(
          _i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticateWithPopup,
          [provider],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #reauthenticateWithPopup,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #reauthenticateWithPopup,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<void> reauthenticateWithRedirect(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticateWithRedirect,
          [provider],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.UserCredential> linkWithPopup(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithPopup,
          [provider],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #linkWithPopup,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #linkWithPopup,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<void> linkWithRedirect(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithRedirect,
          [provider],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.ConfirmationResult> linkWithPhoneNumber(
    String? phoneNumber, [
    _i4.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithPhoneNumber,
          [
            phoneNumber,
            verifier,
          ],
        ),
        returnValue:
            _i8.Future<_i4.ConfirmationResult>.value(_FakeConfirmationResult_9(
          this,
          Invocation.method(
            #linkWithPhoneNumber,
            [
              phoneNumber,
              verifier,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.ConfirmationResult>.value(_FakeConfirmationResult_9(
          this,
          Invocation.method(
            #linkWithPhoneNumber,
            [
              phoneNumber,
              verifier,
            ],
          ),
        )),
      ) as _i8.Future<_i4.ConfirmationResult>);

  @override
  _i8.Future<_i4.UserCredential> reauthenticateWithCredential(
          _i4.AuthCredential? credential) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticateWithCredential,
          [credential],
        ),
        returnValue: _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #reauthenticateWithCredential,
            [credential],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_8(
          this,
          Invocation.method(
            #reauthenticateWithCredential,
            [credential],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> sendEmailVerification(
          [_i4.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEmailVerification,
          [actionCodeSettings],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.User> unlink(String? providerId) => (super.noSuchMethod(
        Invocation.method(
          #unlink,
          [providerId],
        ),
        returnValue: _i8.Future<_i4.User>.value(_FakeUser_27(
          this,
          Invocation.method(
            #unlink,
            [providerId],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i4.User>.value(_FakeUser_27(
          this,
          Invocation.method(
            #unlink,
            [providerId],
          ),
        )),
      ) as _i8.Future<_i4.User>);

  @override
  _i8.Future<void> updateEmail(String? newEmail) => (super.noSuchMethod(
        Invocation.method(
          #updateEmail,
          [newEmail],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updatePassword(String? newPassword) => (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [newPassword],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updatePhoneNumber(
          _i4.PhoneAuthCredential? phoneCredential) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePhoneNumber,
          [phoneCredential],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDisplayName,
          [displayName],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updatePhotoURL(String? photoURL) => (super.noSuchMethod(
        Invocation.method(
          #updatePhotoURL,
          [photoURL],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateProfile({
    String? displayName,
    String? photoURL,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [],
          {
            #displayName: displayName,
            #photoURL: photoURL,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> verifyBeforeUpdateEmail(
    String? newEmail, [
    _i4.ActionCodeSettings? actionCodeSettings,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyBeforeUpdateEmail,
          [
            newEmail,
            actionCodeSettings,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [GoogleSignInAccount].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGoogleSignInAccount extends _i1.Mock
    implements _i9.GoogleSignInAccount {
  @override
  String get email => (super.noSuchMethod(
        Invocation.getter(#email),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
      ) as String);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i8.Future<_i9.GoogleSignInAuthentication> get authentication =>
      (super.noSuchMethod(
        Invocation.getter(#authentication),
        returnValue: _i8.Future<_i9.GoogleSignInAuthentication>.value(
            _FakeGoogleSignInAuthentication_28(
          this,
          Invocation.getter(#authentication),
        )),
        returnValueForMissingStub:
            _i8.Future<_i9.GoogleSignInAuthentication>.value(
                _FakeGoogleSignInAuthentication_28(
          this,
          Invocation.getter(#authentication),
        )),
      ) as _i8.Future<_i9.GoogleSignInAuthentication>);

  @override
  _i8.Future<Map<String, String>> get authHeaders => (super.noSuchMethod(
        Invocation.getter(#authHeaders),
        returnValue: _i8.Future<Map<String, String>>.value(<String, String>{}),
        returnValueForMissingStub:
            _i8.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i8.Future<Map<String, String>>);

  @override
  _i8.Future<void> clearAuthCache() => (super.noSuchMethod(
        Invocation.method(
          #clearAuthCache,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [GoogleSignInAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignInAuthentication extends _i1.Mock
    implements _i9.GoogleSignInAuthentication {}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i7.CollectionReference<T> {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i7.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_29(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_29(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i7.FirebaseFirestore);

  @override
  Map<String, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i8.Future<_i7.DocumentReference<T>> add(T? data) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValue: _i8.Future<_i7.DocumentReference<T>>.value(
            _FakeDocumentReference_16<T>(
          this,
          Invocation.method(
            #add,
            [data],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i7.DocumentReference<T>>.value(
            _FakeDocumentReference_16<T>(
          this,
          Invocation.method(
            #add,
            [data],
          ),
        )),
      ) as _i8.Future<_i7.DocumentReference<T>>);

  @override
  _i7.DocumentReference<T> doc([String? path]) => (super.noSuchMethod(
        Invocation.method(
          #doc,
          [path],
        ),
        returnValue: _FakeDocumentReference_16<T>(
          this,
          Invocation.method(
            #doc,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeDocumentReference_16<T>(
          this,
          Invocation.method(
            #doc,
            [path],
          ),
        ),
      ) as _i7.DocumentReference<T>);

  @override
  _i7.CollectionReference<R> withConverter<R extends Object?>({
    required _i7.FromFirestore<R>? fromFirestore,
    required _i7.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeCollectionReference_11<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
        returnValueForMissingStub: _FakeCollectionReference_11<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i7.CollectionReference<R>);

  @override
  _i7.Query<T> endAtDocument(_i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> endAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [values],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> endBeforeDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBeforeDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> endBefore(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [values],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i8.Future<_i7.QuerySnapshot<T>> get([_i7.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_14<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_14<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<T>>);

  @override
  _i7.Query<T> limit(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limit,
          [limit],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i8.Stream<_i7.QuerySnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i7.ListenSource? source = _i7.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {
            #includeMetadataChanges: includeMetadataChanges,
            #source: source,
          },
        ),
        returnValue: _i8.Stream<_i7.QuerySnapshot<T>>.empty(),
        returnValueForMissingStub: _i8.Stream<_i7.QuerySnapshot<T>>.empty(),
      ) as _i8.Stream<_i7.QuerySnapshot<T>>);

  @override
  _i7.Query<T> orderBy(
    Object? field, {
    bool? descending = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderBy,
          [field],
          {#descending: descending},
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAfterDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfterDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAfter(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [values],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAtDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [values],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [field],
          {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull,
          },
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.AggregateQuery count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _FakeAggregateQuery_30(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeAggregateQuery_30(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
      ) as _i7.AggregateQuery);

  @override
  _i7.AggregateQuery aggregate(
    _i7.AggregateField? aggregateField1, [
    _i7.AggregateField? aggregateField2,
    _i7.AggregateField? aggregateField3,
    _i7.AggregateField? aggregateField4,
    _i7.AggregateField? aggregateField5,
    _i7.AggregateField? aggregateField6,
    _i7.AggregateField? aggregateField7,
    _i7.AggregateField? aggregateField8,
    _i7.AggregateField? aggregateField9,
    _i7.AggregateField? aggregateField10,
    _i7.AggregateField? aggregateField11,
    _i7.AggregateField? aggregateField12,
    _i7.AggregateField? aggregateField13,
    _i7.AggregateField? aggregateField14,
    _i7.AggregateField? aggregateField15,
    _i7.AggregateField? aggregateField16,
    _i7.AggregateField? aggregateField17,
    _i7.AggregateField? aggregateField18,
    _i7.AggregateField? aggregateField19,
    _i7.AggregateField? aggregateField20,
    _i7.AggregateField? aggregateField21,
    _i7.AggregateField? aggregateField22,
    _i7.AggregateField? aggregateField23,
    _i7.AggregateField? aggregateField24,
    _i7.AggregateField? aggregateField25,
    _i7.AggregateField? aggregateField26,
    _i7.AggregateField? aggregateField27,
    _i7.AggregateField? aggregateField28,
    _i7.AggregateField? aggregateField29,
    _i7.AggregateField? aggregateField30,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #aggregate,
          [
            aggregateField1,
            aggregateField2,
            aggregateField3,
            aggregateField4,
            aggregateField5,
            aggregateField6,
            aggregateField7,
            aggregateField8,
            aggregateField9,
            aggregateField10,
            aggregateField11,
            aggregateField12,
            aggregateField13,
            aggregateField14,
            aggregateField15,
            aggregateField16,
            aggregateField17,
            aggregateField18,
            aggregateField19,
            aggregateField20,
            aggregateField21,
            aggregateField22,
            aggregateField23,
            aggregateField24,
            aggregateField25,
            aggregateField26,
            aggregateField27,
            aggregateField28,
            aggregateField29,
            aggregateField30,
          ],
        ),
        returnValue: _FakeAggregateQuery_30(
          this,
          Invocation.method(
            #aggregate,
            [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeAggregateQuery_30(
          this,
          Invocation.method(
            #aggregate,
            [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ],
          ),
        ),
      ) as _i7.AggregateQuery);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i7.DocumentReference<T> {
  @override
  _i7.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_29(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_29(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i7.FirebaseFirestore);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i7.CollectionReference<T> get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeCollectionReference_11<T>(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeCollectionReference_11<T>(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i7.CollectionReference<T>);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i7.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_11<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
        returnValueForMissingStub:
            _FakeCollectionReference_11<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i7.CollectionReference<Map<String, dynamic>>);

  @override
  _i8.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> update(Map<Object, Object?>? data) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [data],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i7.DocumentSnapshot<T>> get([_i7.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue: _i8.Future<_i7.DocumentSnapshot<T>>.value(
            _FakeDocumentSnapshot_31<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i7.DocumentSnapshot<T>>.value(
            _FakeDocumentSnapshot_31<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i8.Future<_i7.DocumentSnapshot<T>>);

  @override
  _i8.Stream<_i7.DocumentSnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i7.ListenSource? source = _i7.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {
            #includeMetadataChanges: includeMetadataChanges,
            #source: source,
          },
        ),
        returnValue: _i8.Stream<_i7.DocumentSnapshot<T>>.empty(),
        returnValueForMissingStub: _i8.Stream<_i7.DocumentSnapshot<T>>.empty(),
      ) as _i8.Stream<_i7.DocumentSnapshot<T>>);

  @override
  _i8.Future<void> set(
    T? data, [
    _i7.SetOptions? options,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            data,
            options,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i7.DocumentReference<R> withConverter<R>({
    required _i7.FromFirestore<R>? fromFirestore,
    required _i7.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeDocumentReference_16<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDocumentReference_16<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i7.DocumentReference<R>);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i7.QuerySnapshot<T> {
  @override
  List<_i7.QueryDocumentSnapshot<T>> get docs => (super.noSuchMethod(
        Invocation.getter(#docs),
        returnValue: <_i7.QueryDocumentSnapshot<T>>[],
        returnValueForMissingStub: <_i7.QueryDocumentSnapshot<T>>[],
      ) as List<_i7.QueryDocumentSnapshot<T>>);

  @override
  List<_i7.DocumentChange<T>> get docChanges => (super.noSuchMethod(
        Invocation.getter(#docChanges),
        returnValue: <_i7.DocumentChange<T>>[],
        returnValueForMissingStub: <_i7.DocumentChange<T>>[],
      ) as List<_i7.DocumentChange<T>>);

  @override
  _i7.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_32(
          this,
          Invocation.getter(#metadata),
        ),
        returnValueForMissingStub: _FakeSnapshotMetadata_32(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i7.SnapshotMetadata);

  @override
  int get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [QueryDocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i7.QueryDocumentSnapshot<T> {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i7.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_16<T>(
          this,
          Invocation.getter(#reference),
        ),
        returnValueForMissingStub: _FakeDocumentReference_16<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i7.DocumentReference<T>);

  @override
  _i7.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_32(
          this,
          Invocation.getter(#metadata),
        ),
        returnValueForMissingStub: _FakeSnapshotMetadata_32(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i7.SnapshotMetadata);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  T data() => (super.noSuchMethod(
        Invocation.method(
          #data,
          [],
        ),
        returnValue: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #data,
            [],
          ),
        ),
        returnValueForMissingStub: _i14.dummyValue<T>(
          this,
          Invocation.method(
            #data,
            [],
          ),
        ),
      ) as T);

  @override
  dynamic get(Object? field) => super.noSuchMethod(
        Invocation.method(
          #get,
          [field],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic operator [](Object? field) => super.noSuchMethod(
        Invocation.method(
          #[],
          [field],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i7.DocumentSnapshot<T> {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i7.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_16<T>(
          this,
          Invocation.getter(#reference),
        ),
        returnValueForMissingStub: _FakeDocumentReference_16<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i7.DocumentReference<T>);

  @override
  _i7.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_32(
          this,
          Invocation.getter(#metadata),
        ),
        returnValueForMissingStub: _FakeSnapshotMetadata_32(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i7.SnapshotMetadata);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  dynamic get(Object? field) => super.noSuchMethod(
        Invocation.method(
          #get,
          [field],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic operator [](Object? field) => super.noSuchMethod(
        Invocation.method(
          #[],
          [field],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DocumentChange].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentChange<T extends Object?> extends _i1.Mock
    implements _i7.DocumentChange<T> {
  @override
  _i7.DocumentChangeType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i7.DocumentChangeType.added,
        returnValueForMissingStub: _i7.DocumentChangeType.added,
      ) as _i7.DocumentChangeType);

  @override
  int get oldIndex => (super.noSuchMethod(
        Invocation.getter(#oldIndex),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get newIndex => (super.noSuchMethod(
        Invocation.getter(#newIndex),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i7.DocumentSnapshot<T> get doc => (super.noSuchMethod(
        Invocation.getter(#doc),
        returnValue: _FakeDocumentSnapshot_31<T>(
          this,
          Invocation.getter(#doc),
        ),
        returnValueForMissingStub: _FakeDocumentSnapshot_31<T>(
          this,
          Invocation.getter(#doc),
        ),
      ) as _i7.DocumentSnapshot<T>);
}

/// A class which mocks [SnapshotMetadata].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnapshotMetadata extends _i1.Mock implements _i7.SnapshotMetadata {
  @override
  bool get hasPendingWrites => (super.noSuchMethod(
        Invocation.getter(#hasPendingWrites),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isFromCache => (super.noSuchMethod(
        Invocation.getter(#isFromCache),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [IStoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIStoryRepository extends _i1.Mock implements _i3.IStoryRepository {
  @override
  _i8.Stream<List<_i3.StoryModel>> getStoryItems() => (super.noSuchMethod(
        Invocation.method(
          #getStoryItems,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.StoryModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.StoryModel>>.empty(),
      ) as _i8.Stream<List<_i3.StoryModel>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> addStory(
          _i3.StoryModel? storyModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStory,
          [storyModel],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #addStory,
            [storyModel],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #addStory,
            [storyModel],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.StoryModel>>> getStoriesById(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoriesById,
          [userId],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.StoryModel>>>.value(
                _FakeEither_0<_i3.SomeFailure, List<_i3.StoryModel>>(
          this,
          Invocation.method(
            #getStoriesById,
            [userId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.StoryModel>>>.value(
                _FakeEither_0<_i3.SomeFailure, List<_i3.StoryModel>>(
          this,
          Invocation.method(
            #getStoriesById,
            [userId],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.StoryModel>>>);
}

/// A class which mocks [FirebaseStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseStorage extends _i1.Mock implements _i10.FirebaseStorage {
  @override
  _i6.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_6(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_6(
          this,
          Invocation.getter(#app),
        ),
      ) as _i6.FirebaseApp);

  @override
  set app(_i6.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get bucket => (super.noSuchMethod(
        Invocation.getter(#bucket),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#bucket),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#bucket),
        ),
      ) as String);

  @override
  set bucket(String? _bucket) => super.noSuchMethod(
        Invocation.setter(
          #bucket,
          _bucket,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration get maxOperationRetryTime => (super.noSuchMethod(
        Invocation.getter(#maxOperationRetryTime),
        returnValue: _FakeDuration_33(
          this,
          Invocation.getter(#maxOperationRetryTime),
        ),
        returnValueForMissingStub: _FakeDuration_33(
          this,
          Invocation.getter(#maxOperationRetryTime),
        ),
      ) as Duration);

  @override
  Duration get maxUploadRetryTime => (super.noSuchMethod(
        Invocation.getter(#maxUploadRetryTime),
        returnValue: _FakeDuration_33(
          this,
          Invocation.getter(#maxUploadRetryTime),
        ),
        returnValueForMissingStub: _FakeDuration_33(
          this,
          Invocation.getter(#maxUploadRetryTime),
        ),
      ) as Duration);

  @override
  Duration get maxDownloadRetryTime => (super.noSuchMethod(
        Invocation.getter(#maxDownloadRetryTime),
        returnValue: _FakeDuration_33(
          this,
          Invocation.getter(#maxDownloadRetryTime),
        ),
        returnValueForMissingStub: _FakeDuration_33(
          this,
          Invocation.getter(#maxDownloadRetryTime),
        ),
      ) as Duration);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i10.Reference ref([String? path]) => (super.noSuchMethod(
        Invocation.method(
          #ref,
          [path],
        ),
        returnValue: _FakeReference_34(
          this,
          Invocation.method(
            #ref,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeReference_34(
          this,
          Invocation.method(
            #ref,
            [path],
          ),
        ),
      ) as _i10.Reference);

  @override
  _i10.Reference refFromURL(String? url) => (super.noSuchMethod(
        Invocation.method(
          #refFromURL,
          [url],
        ),
        returnValue: _FakeReference_34(
          this,
          Invocation.method(
            #refFromURL,
            [url],
          ),
        ),
        returnValueForMissingStub: _FakeReference_34(
          this,
          Invocation.method(
            #refFromURL,
            [url],
          ),
        ),
      ) as _i10.Reference);

  @override
  void setMaxOperationRetryTime(Duration? time) => super.noSuchMethod(
        Invocation.method(
          #setMaxOperationRetryTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMaxUploadRetryTime(Duration? time) => super.noSuchMethod(
        Invocation.method(
          #setMaxUploadRetryTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMaxDownloadRetryTime(Duration? time) => super.noSuchMethod(
        Invocation.method(
          #setMaxDownloadRetryTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> useEmulator({
    required String? host,
    required int? port,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #useEmulator,
          [],
          {
            #host: host,
            #port: port,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> useStorageEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #useStorageEmulator,
          [
            host,
            port,
          ],
          {#automaticHostMapping: automaticHostMapping},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i3.StorageService {
  @override
  _i10.FirebaseStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFirebaseStorage_35(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFirebaseStorage_35(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i10.FirebaseStorage);

  @override
  _i8.Future<String> saveStoryImage({
    required _i3.ImageModel? imageModel,
    required String? storyId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveStoryImage,
          [],
          {
            #imageModel: imageModel,
            #storyId: storyId,
          },
        ),
        returnValue: _i8.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #saveStoryImage,
            [],
            {
              #imageModel: imageModel,
              #storyId: storyId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #saveStoryImage,
            [],
            {
              #imageModel: imageModel,
              #storyId: storyId,
            },
          ),
        )),
      ) as _i8.Future<String>);
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i11.ImagePicker {
  @override
  _i8.Future<_i11.XFile?> pickImage({
    required _i11.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i11.CameraDevice? preferredCameraDevice = _i11.CameraDevice.rear,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickImage,
          [],
          {
            #source: source,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #preferredCameraDevice: preferredCameraDevice,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i8.Future<_i11.XFile?>.value(),
        returnValueForMissingStub: _i8.Future<_i11.XFile?>.value(),
      ) as _i8.Future<_i11.XFile?>);

  @override
  _i8.Future<List<_i11.XFile>> pickMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultiImage,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #limit: limit,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i8.Future<List<_i11.XFile>>.value(<_i11.XFile>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i11.XFile>>.value(<_i11.XFile>[]),
      ) as _i8.Future<List<_i11.XFile>>);

  @override
  _i8.Future<_i11.XFile?> pickMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i8.Future<_i11.XFile?>.value(),
        returnValueForMissingStub: _i8.Future<_i11.XFile?>.value(),
      ) as _i8.Future<_i11.XFile?>);

  @override
  _i8.Future<List<_i11.XFile>> pickMultipleMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultipleMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #limit: limit,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i8.Future<List<_i11.XFile>>.value(<_i11.XFile>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i11.XFile>>.value(<_i11.XFile>[]),
      ) as _i8.Future<List<_i11.XFile>>);

  @override
  _i8.Future<_i11.XFile?> pickVideo({
    required _i11.ImageSource? source,
    _i11.CameraDevice? preferredCameraDevice = _i11.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickVideo,
          [],
          {
            #source: source,
            #preferredCameraDevice: preferredCameraDevice,
            #maxDuration: maxDuration,
          },
        ),
        returnValue: _i8.Future<_i11.XFile?>.value(),
        returnValueForMissingStub: _i8.Future<_i11.XFile?>.value(),
      ) as _i8.Future<_i11.XFile?>);

  @override
  _i8.Future<_i11.LostDataResponse> retrieveLostData() => (super.noSuchMethod(
        Invocation.method(
          #retrieveLostData,
          [],
        ),
        returnValue:
            _i8.Future<_i11.LostDataResponse>.value(_FakeLostDataResponse_36(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i11.LostDataResponse>.value(_FakeLostDataResponse_36(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
      ) as _i8.Future<_i11.LostDataResponse>);

  @override
  bool supportsImageSource(_i11.ImageSource? source) => (super.noSuchMethod(
        Invocation.method(
          #supportsImageSource,
          [source],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [Reference].
///
/// See the documentation for Mockito's code generation for more information.
class MockReference extends _i1.Mock implements _i10.Reference {
  @override
  _i10.FirebaseStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFirebaseStorage_35(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFirebaseStorage_35(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i10.FirebaseStorage);

  @override
  String get bucket => (super.noSuchMethod(
        Invocation.getter(#bucket),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#bucket),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#bucket),
        ),
      ) as String);

  @override
  String get fullPath => (super.noSuchMethod(
        Invocation.getter(#fullPath),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#fullPath),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#fullPath),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i10.Reference get root => (super.noSuchMethod(
        Invocation.getter(#root),
        returnValue: _FakeReference_34(
          this,
          Invocation.getter(#root),
        ),
        returnValueForMissingStub: _FakeReference_34(
          this,
          Invocation.getter(#root),
        ),
      ) as _i10.Reference);

  @override
  _i10.Reference child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeReference_34(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeReference_34(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i10.Reference);

  @override
  _i8.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> getDownloadURL() => (super.noSuchMethod(
        Invocation.method(
          #getDownloadURL,
          [],
        ),
        returnValue: _i8.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #getDownloadURL,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #getDownloadURL,
            [],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i12.FullMetadata> getMetadata() => (super.noSuchMethod(
        Invocation.method(
          #getMetadata,
          [],
        ),
        returnValue: _i8.Future<_i12.FullMetadata>.value(_FakeFullMetadata_37(
          this,
          Invocation.method(
            #getMetadata,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i12.FullMetadata>.value(_FakeFullMetadata_37(
          this,
          Invocation.method(
            #getMetadata,
            [],
          ),
        )),
      ) as _i8.Future<_i12.FullMetadata>);

  @override
  _i8.Future<_i10.ListResult> list([_i12.ListOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [options],
        ),
        returnValue: _i8.Future<_i10.ListResult>.value(_FakeListResult_38(
          this,
          Invocation.method(
            #list,
            [options],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i10.ListResult>.value(_FakeListResult_38(
          this,
          Invocation.method(
            #list,
            [options],
          ),
        )),
      ) as _i8.Future<_i10.ListResult>);

  @override
  _i8.Future<_i10.ListResult> listAll() => (super.noSuchMethod(
        Invocation.method(
          #listAll,
          [],
        ),
        returnValue: _i8.Future<_i10.ListResult>.value(_FakeListResult_38(
          this,
          Invocation.method(
            #listAll,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i10.ListResult>.value(_FakeListResult_38(
          this,
          Invocation.method(
            #listAll,
            [],
          ),
        )),
      ) as _i8.Future<_i10.ListResult>);

  @override
  _i8.Future<_i15.Uint8List?> getData([int? maxSize = 10485760]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getData,
          [maxSize],
        ),
        returnValue: _i8.Future<_i15.Uint8List?>.value(),
        returnValueForMissingStub: _i8.Future<_i15.Uint8List?>.value(),
      ) as _i8.Future<_i15.Uint8List?>);

  @override
  _i10.UploadTask putData(
    _i15.Uint8List? data, [
    _i12.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #putData,
          [
            data,
            metadata,
          ],
        ),
        returnValue: _FakeUploadTask_39(
          this,
          Invocation.method(
            #putData,
            [
              data,
              metadata,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_39(
          this,
          Invocation.method(
            #putData,
            [
              data,
              metadata,
            ],
          ),
        ),
      ) as _i10.UploadTask);

  @override
  _i10.UploadTask putBlob(
    dynamic blob, [
    _i12.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #putBlob,
          [
            blob,
            metadata,
          ],
        ),
        returnValue: _FakeUploadTask_39(
          this,
          Invocation.method(
            #putBlob,
            [
              blob,
              metadata,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_39(
          this,
          Invocation.method(
            #putBlob,
            [
              blob,
              metadata,
            ],
          ),
        ),
      ) as _i10.UploadTask);

  @override
  _i10.UploadTask putFile(
    _i16.File? file, [
    _i12.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #putFile,
          [
            file,
            metadata,
          ],
        ),
        returnValue: _FakeUploadTask_39(
          this,
          Invocation.method(
            #putFile,
            [
              file,
              metadata,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_39(
          this,
          Invocation.method(
            #putFile,
            [
              file,
              metadata,
            ],
          ),
        ),
      ) as _i10.UploadTask);

  @override
  _i10.UploadTask putString(
    String? data, {
    _i12.PutStringFormat? format = _i12.PutStringFormat.raw,
    _i12.SettableMetadata? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putString,
          [data],
          {
            #format: format,
            #metadata: metadata,
          },
        ),
        returnValue: _FakeUploadTask_39(
          this,
          Invocation.method(
            #putString,
            [data],
            {
              #format: format,
              #metadata: metadata,
            },
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_39(
          this,
          Invocation.method(
            #putString,
            [data],
            {
              #format: format,
              #metadata: metadata,
            },
          ),
        ),
      ) as _i10.UploadTask);

  @override
  _i8.Future<_i12.FullMetadata> updateMetadata(
          _i12.SettableMetadata? metadata) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMetadata,
          [metadata],
        ),
        returnValue: _i8.Future<_i12.FullMetadata>.value(_FakeFullMetadata_37(
          this,
          Invocation.method(
            #updateMetadata,
            [metadata],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i12.FullMetadata>.value(_FakeFullMetadata_37(
          this,
          Invocation.method(
            #updateMetadata,
            [metadata],
          ),
        )),
      ) as _i8.Future<_i12.FullMetadata>);

  @override
  _i10.DownloadTask writeToFile(_i16.File? file) => (super.noSuchMethod(
        Invocation.method(
          #writeToFile,
          [file],
        ),
        returnValue: _FakeDownloadTask_40(
          this,
          Invocation.method(
            #writeToFile,
            [file],
          ),
        ),
        returnValueForMissingStub: _FakeDownloadTask_40(
          this,
          Invocation.method(
            #writeToFile,
            [file],
          ),
        ),
      ) as _i10.DownloadTask);
}

/// A class which mocks [UploadTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadTask extends _i1.Mock implements _i10.UploadTask {
  @override
  _i10.FirebaseStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFirebaseStorage_35(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFirebaseStorage_35(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i10.FirebaseStorage);

  @override
  _i8.Stream<_i10.TaskSnapshot> get snapshotEvents => (super.noSuchMethod(
        Invocation.getter(#snapshotEvents),
        returnValue: _i8.Stream<_i10.TaskSnapshot>.empty(),
        returnValueForMissingStub: _i8.Stream<_i10.TaskSnapshot>.empty(),
      ) as _i8.Stream<_i10.TaskSnapshot>);

  @override
  _i10.TaskSnapshot get snapshot => (super.noSuchMethod(
        Invocation.getter(#snapshot),
        returnValue: _FakeTaskSnapshot_41(
          this,
          Invocation.getter(#snapshot),
        ),
        returnValueForMissingStub: _FakeTaskSnapshot_41(
          this,
          Invocation.getter(#snapshot),
        ),
      ) as _i10.TaskSnapshot);

  @override
  _i8.Future<bool> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Stream<_i10.TaskSnapshot> asStream() => (super.noSuchMethod(
        Invocation.method(
          #asStream,
          [],
        ),
        returnValue: _i8.Stream<_i10.TaskSnapshot>.empty(),
        returnValueForMissingStub: _i8.Stream<_i10.TaskSnapshot>.empty(),
      ) as _i8.Stream<_i10.TaskSnapshot>);

  @override
  _i8.Future<_i10.TaskSnapshot> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchError,
          [onError],
          {#test: test},
        ),
        returnValue: _i8.Future<_i10.TaskSnapshot>.value(_FakeTaskSnapshot_41(
          this,
          Invocation.method(
            #catchError,
            [onError],
            {#test: test},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i10.TaskSnapshot>.value(_FakeTaskSnapshot_41(
          this,
          Invocation.method(
            #catchError,
            [onError],
            {#test: test},
          ),
        )),
      ) as _i8.Future<_i10.TaskSnapshot>);

  @override
  _i8.Future<S> then<S>(
    _i8.FutureOr<S> Function(_i10.TaskSnapshot)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #then,
          [onValue],
          {#onError: onError},
        ),
        returnValue: _i14.ifNotNull(
              _i14.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #then,
                  [onValue],
                  {#onError: onError},
                ),
              ),
              (S v) => _i8.Future<S>.value(v),
            ) ??
            _FakeFuture_17<S>(
              this,
              Invocation.method(
                #then,
                [onValue],
                {#onError: onError},
              ),
            ),
        returnValueForMissingStub: _i14.ifNotNull(
              _i14.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #then,
                  [onValue],
                  {#onError: onError},
                ),
              ),
              (S v) => _i8.Future<S>.value(v),
            ) ??
            _FakeFuture_17<S>(
              this,
              Invocation.method(
                #then,
                [onValue],
                {#onError: onError},
              ),
            ),
      ) as _i8.Future<S>);

  @override
  _i8.Future<_i10.TaskSnapshot> whenComplete(
          _i8.FutureOr<dynamic> Function()? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #whenComplete,
          [action],
        ),
        returnValue: _i8.Future<_i10.TaskSnapshot>.value(_FakeTaskSnapshot_41(
          this,
          Invocation.method(
            #whenComplete,
            [action],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i10.TaskSnapshot>.value(_FakeTaskSnapshot_41(
          this,
          Invocation.method(
            #whenComplete,
            [action],
          ),
        )),
      ) as _i8.Future<_i10.TaskSnapshot>);

  @override
  _i8.Future<_i10.TaskSnapshot> timeout(
    Duration? timeLimit, {
    _i8.FutureOr<_i10.TaskSnapshot> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i8.Future<_i10.TaskSnapshot>.value(_FakeTaskSnapshot_41(
          this,
          Invocation.method(
            #timeout,
            [timeLimit],
            {#onTimeout: onTimeout},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i10.TaskSnapshot>.value(_FakeTaskSnapshot_41(
          this,
          Invocation.method(
            #timeout,
            [timeLimit],
            {#onTimeout: onTimeout},
          ),
        )),
      ) as _i8.Future<_i10.TaskSnapshot>);
}

/// A class which mocks [TaskSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskSnapshot extends _i1.Mock implements _i10.TaskSnapshot {
  @override
  _i10.FirebaseStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFirebaseStorage_35(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFirebaseStorage_35(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i10.FirebaseStorage);

  @override
  int get bytesTransferred => (super.noSuchMethod(
        Invocation.getter(#bytesTransferred),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i10.Reference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeReference_34(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeReference_34(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i10.Reference);

  @override
  _i12.TaskState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i12.TaskState.paused,
        returnValueForMissingStub: _i12.TaskState.paused,
      ) as _i12.TaskState);

  @override
  int get totalBytes => (super.noSuchMethod(
        Invocation.getter(#totalBytes),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [XFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockXFile extends _i1.Mock implements _i11.XFile {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i14.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i14.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i8.Future<void> saveTo(String? path) => (super.noSuchMethod(
        Invocation.method(
          #saveTo,
          [path],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<String> readAsString(
          {_i17.Encoding? encoding = const _i17.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i8.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i14.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i15.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i8.Future<_i15.Uint8List>.value(_i15.Uint8List(0)),
        returnValueForMissingStub:
            _i8.Future<_i15.Uint8List>.value(_i15.Uint8List(0)),
      ) as _i8.Future<_i15.Uint8List>);

  @override
  _i8.Stream<_i15.Uint8List> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i8.Stream<_i15.Uint8List>.empty(),
        returnValueForMissingStub: _i8.Stream<_i15.Uint8List>.empty(),
      ) as _i8.Stream<_i15.Uint8List>);

  @override
  _i8.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i8.Future<DateTime>.value(_FakeDateTime_42(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
        returnValueForMissingStub: _i8.Future<DateTime>.value(_FakeDateTime_42(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i8.Future<DateTime>);
}

/// A class which mocks [IDiscountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDiscountRepository extends _i1.Mock
    implements _i3.IDiscountRepository {
  @override
  _i8.Stream<List<_i3.DiscountModel>> getDiscountItems() => (super.noSuchMethod(
        Invocation.method(
          #getDiscountItems,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.DiscountModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.DiscountModel>>.empty(),
      ) as _i8.Stream<List<_i3.DiscountModel>>);

  @override
  void addMockDiscountItems() => super.noSuchMethod(
        Invocation.method(
          #addMockDiscountItems,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Query].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockQuery<T extends Object?> extends _i1.Mock implements _i7.Query<T> {
  @override
  _i7.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_29(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_29(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i7.FirebaseFirestore);

  @override
  Map<String, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i7.Query<T> endAtDocument(_i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> endAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [values],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> endBeforeDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBeforeDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> endBefore(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [values],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i8.Future<_i7.QuerySnapshot<T>> get([_i7.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_14<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_14<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<T>>);

  @override
  _i7.Query<T> limit(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limit,
          [limit],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i8.Stream<_i7.QuerySnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i7.ListenSource? source = _i7.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {
            #includeMetadataChanges: includeMetadataChanges,
            #source: source,
          },
        ),
        returnValue: _i8.Stream<_i7.QuerySnapshot<T>>.empty(),
        returnValueForMissingStub: _i8.Stream<_i7.QuerySnapshot<T>>.empty(),
      ) as _i8.Stream<_i7.QuerySnapshot<T>>);

  @override
  _i7.Query<T> orderBy(
    Object? field, {
    bool? descending = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderBy,
          [field],
          {#descending: descending},
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAfterDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfterDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAfter(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [values],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAtDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [values],
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [field],
          {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull,
          },
        ),
        returnValue: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<T>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<R> withConverter<R>({
    required _i7.FromFirestore<R>? fromFirestore,
    required _i7.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeQuery_15<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
        returnValueForMissingStub: _FakeQuery_15<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i7.Query<R>);

  @override
  _i7.AggregateQuery count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _FakeAggregateQuery_30(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeAggregateQuery_30(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
      ) as _i7.AggregateQuery);

  @override
  _i7.AggregateQuery aggregate(
    _i7.AggregateField? aggregateField1, [
    _i7.AggregateField? aggregateField2,
    _i7.AggregateField? aggregateField3,
    _i7.AggregateField? aggregateField4,
    _i7.AggregateField? aggregateField5,
    _i7.AggregateField? aggregateField6,
    _i7.AggregateField? aggregateField7,
    _i7.AggregateField? aggregateField8,
    _i7.AggregateField? aggregateField9,
    _i7.AggregateField? aggregateField10,
    _i7.AggregateField? aggregateField11,
    _i7.AggregateField? aggregateField12,
    _i7.AggregateField? aggregateField13,
    _i7.AggregateField? aggregateField14,
    _i7.AggregateField? aggregateField15,
    _i7.AggregateField? aggregateField16,
    _i7.AggregateField? aggregateField17,
    _i7.AggregateField? aggregateField18,
    _i7.AggregateField? aggregateField19,
    _i7.AggregateField? aggregateField20,
    _i7.AggregateField? aggregateField21,
    _i7.AggregateField? aggregateField22,
    _i7.AggregateField? aggregateField23,
    _i7.AggregateField? aggregateField24,
    _i7.AggregateField? aggregateField25,
    _i7.AggregateField? aggregateField26,
    _i7.AggregateField? aggregateField27,
    _i7.AggregateField? aggregateField28,
    _i7.AggregateField? aggregateField29,
    _i7.AggregateField? aggregateField30,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #aggregate,
          [
            aggregateField1,
            aggregateField2,
            aggregateField3,
            aggregateField4,
            aggregateField5,
            aggregateField6,
            aggregateField7,
            aggregateField8,
            aggregateField9,
            aggregateField10,
            aggregateField11,
            aggregateField12,
            aggregateField13,
            aggregateField14,
            aggregateField15,
            aggregateField16,
            aggregateField17,
            aggregateField18,
            aggregateField19,
            aggregateField20,
            aggregateField21,
            aggregateField22,
            aggregateField23,
            aggregateField24,
            aggregateField25,
            aggregateField26,
            aggregateField27,
            aggregateField28,
            aggregateField29,
            aggregateField30,
          ],
        ),
        returnValue: _FakeAggregateQuery_30(
          this,
          Invocation.method(
            #aggregate,
            [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeAggregateQuery_30(
          this,
          Invocation.method(
            #aggregate,
            [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ],
          ),
        ),
      ) as _i7.AggregateQuery);
}
