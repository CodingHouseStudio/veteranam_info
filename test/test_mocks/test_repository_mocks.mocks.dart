// Mocks generated by Mockito 5.4.4 from annotations
// in veteranam/test/test_mocks/test_repository_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i15;
import 'dart:io' as _i13;
import 'dart:typed_data' as _i27;

import 'package:cloud_firestore/cloud_firestore.dart' as _i7;
import 'package:connectivity_plus/connectivity_plus.dart' as _i30;
import 'package:dartz/dartz.dart' as _i2;
import 'package:device_info_plus/device_info_plus.dart' as _i33;
import 'package:device_info_plus/src/model/android_device_info.dart' as _i19;
import 'package:device_info_plus/src/model/ios_device_info.dart' as _i20;
import 'package:device_info_plus/src/model/linux_device_info.dart' as _i21;
import 'package:device_info_plus/src/model/macos_device_info.dart' as _i23;
import 'package:device_info_plus/src/model/web_browser_info.dart' as _i22;
import 'package:device_info_plus/src/model/windows_device_info.dart' as _i24;
import 'package:device_info_plus_platform_interface/device_info_plus_platform_interface.dart'
    as _i25;
import 'package:file_picker/src/file_picker.dart' as _i34;
import 'package:file_picker/src/file_picker_result.dart' as _i35;
import 'package:file_picker/src/platform_file.dart' as _i36;
import 'package:firebase_analytics/firebase_analytics.dart' as _i31;
import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:firebase_core/firebase_core.dart' as _i6;
import 'package:firebase_messaging/firebase_messaging.dart' as _i32;
import 'package:firebase_messaging_platform_interface/firebase_messaging_platform_interface.dart'
    as _i17;
import 'package:firebase_remote_config/firebase_remote_config.dart' as _i16;
import 'package:firebase_storage/firebase_storage.dart' as _i10;
import 'package:firebase_storage_platform_interface/firebase_storage_platform_interface.dart'
    as _i12;
import 'package:flutter/foundation.dart' as _i14;
import 'package:flutter_facebook_auth/flutter_facebook_auth.dart' as _i26;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i5;
import 'package:google_sign_in/google_sign_in.dart' as _i9;
import 'package:image_picker/image_picker.dart' as _i29;
import 'package:image_picker_platform_interface/image_picker_platform_interface.dart'
    as _i11;
import 'package:in_app_review/in_app_review.dart' as _i37;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i28;
import 'package:package_info_plus/package_info_plus.dart' as _i18;
import 'package:veteranam/shared/shared_dart.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInformationModel_1 extends _i1.SmartFake
    implements _i3.InformationModel {
  _FakeInformationModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDiscountModel_2 extends _i1.SmartFake implements _i3.DiscountModel {
  _FakeDiscountModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_3 extends _i1.SmartFake implements _i3.User {
  _FakeUser_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserSetting_4 extends _i1.SmartFake implements _i3.UserSetting {
  _FakeUserSetting_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoogleAuthProvider_5 extends _i1.SmartFake
    implements _i4.GoogleAuthProvider {
  _FakeGoogleAuthProvider_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFacebookAuthProvider_6 extends _i1.SmartFake
    implements _i4.FacebookAuthProvider {
  _FakeFacebookAuthProvider_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIAppAuthenticationRepository_7 extends _i1.SmartFake
    implements _i3.IAppAuthenticationRepository {
  _FakeIAppAuthenticationRepository_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlutterSecureStorage_8 extends _i1.SmartFake
    implements _i5.FlutterSecureStorage {
  _FakeFlutterSecureStorage_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseApp_9 extends _i1.SmartFake implements _i6.FirebaseApp {
  _FakeFirebaseApp_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeActionCodeInfo_10 extends _i1.SmartFake
    implements _i4.ActionCodeInfo {
  _FakeActionCodeInfo_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_11 extends _i1.SmartFake
    implements _i4.UserCredential {
  _FakeUserCredential_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfirmationResult_12 extends _i1.SmartFake
    implements _i4.ConfirmationResult {
  _FakeConfirmationResult_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettings_13 extends _i1.SmartFake implements _i7.Settings {
  _FakeSettings_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_14<T extends Object?> extends _i1.SmartFake
    implements _i7.CollectionReference<T> {
  _FakeCollectionReference_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWriteBatch_15 extends _i1.SmartFake implements _i7.WriteBatch {
  _FakeWriteBatch_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoadBundleTask_16 extends _i1.SmartFake
    implements _i7.LoadBundleTask {
  _FakeLoadBundleTask_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuerySnapshot_17<T1 extends Object?> extends _i1.SmartFake
    implements _i7.QuerySnapshot<T1> {
  _FakeQuerySnapshot_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_18<T extends Object?> extends _i1.SmartFake
    implements _i7.Query<T> {
  _FakeQuery_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_19<T extends Object?> extends _i1.SmartFake
    implements _i7.DocumentReference<T> {
  _FakeDocumentReference_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_20<T1> extends _i1.SmartFake implements _i8.Future<T1> {
  _FakeFuture_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSOptions_21 extends _i1.SmartFake implements _i5.IOSOptions {
  _FakeIOSOptions_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidOptions_22 extends _i1.SmartFake
    implements _i5.AndroidOptions {
  _FakeAndroidOptions_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxOptions_23 extends _i1.SmartFake implements _i5.LinuxOptions {
  _FakeLinuxOptions_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsOptions_24 extends _i1.SmartFake
    implements _i5.WindowsOptions {
  _FakeWindowsOptions_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebOptions_25 extends _i1.SmartFake implements _i5.WebOptions {
  _FakeWebOptions_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsOptions_26 extends _i1.SmartFake implements _i5.MacOsOptions {
  _FakeMacOsOptions_26(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserMetadata_27 extends _i1.SmartFake implements _i4.UserMetadata {
  _FakeUserMetadata_27(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMultiFactor_28 extends _i1.SmartFake implements _i4.MultiFactor {
  _FakeMultiFactor_28(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIdTokenResult_29 extends _i1.SmartFake implements _i4.IdTokenResult {
  _FakeIdTokenResult_29(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_30 extends _i1.SmartFake implements _i4.User {
  _FakeUser_30(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoogleSignInAuthentication_31 extends _i1.SmartFake
    implements _i9.GoogleSignInAuthentication {
  _FakeGoogleSignInAuthentication_31(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_32 extends _i1.SmartFake
    implements _i7.FirebaseFirestore {
  _FakeFirebaseFirestore_32(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAggregateQuery_33 extends _i1.SmartFake
    implements _i7.AggregateQuery {
  _FakeAggregateQuery_33(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentSnapshot_34<T1 extends Object?> extends _i1.SmartFake
    implements _i7.DocumentSnapshot<T1> {
  _FakeDocumentSnapshot_34(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSnapshotMetadata_35 extends _i1.SmartFake
    implements _i7.SnapshotMetadata {
  _FakeSnapshotMetadata_35(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_36 extends _i1.SmartFake implements Duration {
  _FakeDuration_36(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReference_37 extends _i1.SmartFake implements _i10.Reference {
  _FakeReference_37(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLostDataResponse_38 extends _i1.SmartFake
    implements _i11.LostDataResponse {
  _FakeLostDataResponse_38(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseStorage_39 extends _i1.SmartFake
    implements _i10.FirebaseStorage {
  _FakeFirebaseStorage_39(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFullMetadata_40 extends _i1.SmartFake implements _i12.FullMetadata {
  _FakeFullMetadata_40(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeListResult_41 extends _i1.SmartFake implements _i10.ListResult {
  _FakeListResult_41(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUploadTask_42 extends _i1.SmartFake implements _i10.UploadTask {
  _FakeUploadTask_42(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDownloadTask_43 extends _i1.SmartFake implements _i10.DownloadTask {
  _FakeDownloadTask_43(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTaskSnapshot_44 extends _i1.SmartFake implements _i10.TaskSnapshot {
  _FakeTaskSnapshot_44(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_45 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_45(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientRequest_46 extends _i1.SmartFake
    implements _i13.HttpClientRequest {
  _FakeHttpClientRequest_46(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_47 extends _i1.SmartFake implements Uri {
  _FakeUri_47(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpHeaders_48 extends _i1.SmartFake implements _i13.HttpHeaders {
  _FakeHttpHeaders_48(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientResponse_49 extends _i1.SmartFake
    implements _i14.HttpClientResponse {
  _FakeHttpClientResponse_49(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEncoding_50 extends _i1.SmartFake implements _i15.Encoding {
  _FakeEncoding_50(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSocket_51 extends _i1.SmartFake implements _i13.Socket {
  _FakeSocket_51(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_52<T> extends _i1.SmartFake
    implements _i8.StreamSubscription<T> {
  _FakeStreamSubscription_52(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIAppNetworkRepository_53 extends _i1.SmartFake
    implements _i3.IAppNetworkRepository {
  _FakeIAppNetworkRepository_53(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoteConfigSettings_54 extends _i1.SmartFake
    implements _i16.RemoteConfigSettings {
  _FakeRemoteConfigSettings_54(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoteConfigValue_55 extends _i1.SmartFake
    implements _i16.RemoteConfigValue {
  _FakeRemoteConfigValue_55(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationSettings_56 extends _i1.SmartFake
    implements _i17.NotificationSettings {
  _FakeNotificationSettings_56(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePackageInfo_57 extends _i1.SmartFake implements _i18.PackageInfo {
  _FakePackageInfo_57(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidDeviceInfo_58 extends _i1.SmartFake
    implements _i19.AndroidDeviceInfo {
  _FakeAndroidDeviceInfo_58(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIosDeviceInfo_59 extends _i1.SmartFake
    implements _i20.IosDeviceInfo {
  _FakeIosDeviceInfo_59(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxDeviceInfo_60 extends _i1.SmartFake
    implements _i21.LinuxDeviceInfo {
  _FakeLinuxDeviceInfo_60(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebBrowserInfo_61 extends _i1.SmartFake
    implements _i22.WebBrowserInfo {
  _FakeWebBrowserInfo_61(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsDeviceInfo_62 extends _i1.SmartFake
    implements _i23.MacOsDeviceInfo {
  _FakeMacOsDeviceInfo_62(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsDeviceInfo_63 extends _i1.SmartFake
    implements _i24.WindowsDeviceInfo {
  _FakeWindowsDeviceInfo_63(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseDeviceInfo_64 extends _i1.SmartFake
    implements _i25.BaseDeviceInfo {
  _FakeBaseDeviceInfo_64(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoginResult_65 extends _i1.SmartFake implements _i26.LoginResult {
  _FakeLoginResult_65(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCompanyModel_66 extends _i1.SmartFake implements _i3.CompanyModel {
  _FakeCompanyModel_66(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeXFile_67 extends _i1.SmartFake implements _i11.XFile {
  _FakeXFile_67(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IFaqRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFaqRepository extends _i1.Mock implements _i3.IFaqRepository {
  @override
  _i8.Future<
      _i2.Either<_i3.SomeFailure,
          List<_i3.QuestionModel>>> getQuestions() => (super.noSuchMethod(
        Invocation.method(
          #getQuestions,
          [],
        ),
        returnValue: _i8
            .Future<_i2.Either<_i3.SomeFailure, List<_i3.QuestionModel>>>.value(
            _FakeEither_0<_i3.SomeFailure, List<_i3.QuestionModel>>(
          this,
          Invocation.method(
            #getQuestions,
            [],
          ),
        )),
        returnValueForMissingStub: _i8
            .Future<_i2.Either<_i3.SomeFailure, List<_i3.QuestionModel>>>.value(
            _FakeEither_0<_i3.SomeFailure, List<_i3.QuestionModel>>(
          this,
          Invocation.method(
            #getQuestions,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.QuestionModel>>>);

  @override
  void addMockQuestions() => super.noSuchMethod(
        Invocation.method(
          #addMockQuestions,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IInformationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIInformationRepository extends _i1.Mock
    implements _i3.IInformationRepository {
  @override
  _i8.Stream<List<_i3.InformationModel>> getInformationItems(
          {List<String>? reportIdItems}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInformationItems,
          [],
          {#reportIdItems: reportIdItems},
        ),
        returnValue: _i8.Stream<List<_i3.InformationModel>>.empty(),
        returnValueForMissingStub:
            _i8.Stream<List<_i3.InformationModel>>.empty(),
      ) as _i8.Stream<List<_i3.InformationModel>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.InformationModel>> getInformation(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInformation,
          [id],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.InformationModel>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.InformationModel>(
          this,
          Invocation.method(
            #getInformation,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.InformationModel>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.InformationModel>(
          this,
          Invocation.method(
            #getInformation,
            [id],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.InformationModel>>);

  @override
  void addMockInformationItems() => super.noSuchMethod(
        Invocation.method(
          #addMockInformationItems,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> updateLikeCount({
    required _i3.InformationModel? informationModel,
    required bool? isLiked,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLikeCount,
          [],
          {
            #informationModel: informationModel,
            #isLiked: isLiked,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateLikeCount,
            [],
            {
              #informationModel: informationModel,
              #isLiked: isLiked,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateLikeCount,
            [],
            {
              #informationModel: informationModel,
              #isLiked: isLiked,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);
}

/// A class which mocks [IFeedbackRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFeedbackRepository extends _i1.Mock
    implements _i3.IFeedbackRepository {
  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendFeedback(
          _i3.FeedbackModel? feedback) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendFeedback,
          [feedback],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendFeedback,
            [feedback],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendFeedback,
            [feedback],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendMobFeedback({
    required _i3.FeedbackModel? feedback,
    required _i27.Uint8List? image,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMobFeedback,
          [],
          {
            #feedback: feedback,
            #image: image,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendMobFeedback,
            [],
            {
              #feedback: feedback,
              #image: image,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendMobFeedback,
            [],
            {
              #feedback: feedback,
              #image: image,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> checkUserNeedShowFeedback(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkUserNeedShowFeedback,
          [userId],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #checkUserNeedShowFeedback,
            [userId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #checkUserNeedShowFeedback,
            [userId],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);
}

/// A class which mocks [FirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreService extends _i1.Mock implements _i3.FirestoreService {
  @override
  _i3.MobMode get offlineMode => (super.noSuchMethod(
        Invocation.getter(#offlineMode),
        returnValue: _i3.MobMode.online,
        returnValueForMissingStub: _i3.MobMode.online,
      ) as _i3.MobMode);

  @override
  _i3.MobMode get switchOfflineMode => (super.noSuchMethod(
        Invocation.getter(#switchOfflineMode),
        returnValue: _i3.MobMode.online,
        returnValueForMissingStub: _i3.MobMode.online,
      ) as _i3.MobMode);

  @override
  _i8.Future<void> addFeedback(_i3.FeedbackModel? feedback) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFeedback,
          [feedback],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> addMobFeedback(_i3.FeedbackModel? feedback) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMobFeedback,
          [feedback],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.FeedbackModel>> getUserFeedback(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserFeedback,
          [userId],
        ),
        returnValue:
            _i8.Future<List<_i3.FeedbackModel>>.value(<_i3.FeedbackModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.FeedbackModel>>.value(<_i3.FeedbackModel>[]),
      ) as _i8.Future<List<_i3.FeedbackModel>>);

  @override
  _i8.Future<void> addQuestion(_i3.QuestionModel? question) =>
      (super.noSuchMethod(
        Invocation.method(
          #addQuestion,
          [question],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.QuestionModel>> getQuestions() => (super.noSuchMethod(
        Invocation.method(
          #getQuestions,
          [],
        ),
        returnValue:
            _i8.Future<List<_i3.QuestionModel>>.value(<_i3.QuestionModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.QuestionModel>>.value(<_i3.QuestionModel>[]),
      ) as _i8.Future<List<_i3.QuestionModel>>);

  @override
  _i8.Future<List<_i3.FundModel>> getFunds() => (super.noSuchMethod(
        Invocation.method(
          #getFunds,
          [],
        ),
        returnValue: _i8.Future<List<_i3.FundModel>>.value(<_i3.FundModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.FundModel>>.value(<_i3.FundModel>[]),
      ) as _i8.Future<List<_i3.FundModel>>);

  @override
  _i8.Future<void> addFund(_i3.FundModel? fund) => (super.noSuchMethod(
        Invocation.method(
          #addFund,
          [fund],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<List<_i3.InformationModel>> getInformations(
          List<String>? reportIdItems) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInformations,
          [reportIdItems],
        ),
        returnValue: _i8.Stream<List<_i3.InformationModel>>.empty(),
        returnValueForMissingStub:
            _i8.Stream<List<_i3.InformationModel>>.empty(),
      ) as _i8.Stream<List<_i3.InformationModel>>);

  @override
  _i8.Future<_i3.InformationModel> getInformation(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInformation,
          [id],
        ),
        returnValue:
            _i8.Future<_i3.InformationModel>.value(_FakeInformationModel_1(
          this,
          Invocation.method(
            #getInformation,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.InformationModel>.value(_FakeInformationModel_1(
          this,
          Invocation.method(
            #getInformation,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.InformationModel>);

  @override
  _i8.Future<void> addInformation(_i3.InformationModel? information) =>
      (super.noSuchMethod(
        Invocation.method(
          #addInformation,
          [information],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setUserSetting({
    required _i3.UserSetting? userSetting,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserSetting,
          [],
          {
            #userSetting: userSetting,
            #userId: userId,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<_i3.UserSetting> getUserSetting(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserSetting,
          [userId],
        ),
        returnValue: _i8.Stream<_i3.UserSetting>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.UserSetting>.empty(),
      ) as _i8.Stream<_i3.UserSetting>);

  @override
  _i8.Stream<_i3.CompanyModel> getUserCompany(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserCompany,
          [email],
        ),
        returnValue: _i8.Stream<_i3.CompanyModel>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.CompanyModel>.empty(),
      ) as _i8.Stream<_i3.CompanyModel>);

  @override
  _i8.Future<void> updateCompany(_i3.CompanyModel? company) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCompany,
          [company],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteCompany(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCompany,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteUserSetting(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #deleteUserSetting,
          [userId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<List<_i3.WorkModel>> getWorks() => (super.noSuchMethod(
        Invocation.method(
          #getWorks,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.WorkModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.WorkModel>>.empty(),
      ) as _i8.Stream<List<_i3.WorkModel>>);

  @override
  _i8.Future<void> addWork(_i3.WorkModel? work) => (super.noSuchMethod(
        Invocation.method(
          #addWork,
          [work],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<List<_i3.StoryModel>> getStories() => (super.noSuchMethod(
        Invocation.method(
          #getStories,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.StoryModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.StoryModel>>.empty(),
      ) as _i8.Stream<List<_i3.StoryModel>>);

  @override
  _i8.Future<void> addStory(_i3.StoryModel? story) => (super.noSuchMethod(
        Invocation.method(
          #addStory,
          [story],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.StoryModel>> getStoriesByUserId(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoriesByUserId,
          [userId],
        ),
        returnValue: _i8.Future<List<_i3.StoryModel>>.value(<_i3.StoryModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.StoryModel>>.value(<_i3.StoryModel>[]),
      ) as _i8.Future<List<_i3.StoryModel>>);

  @override
  _i8.Stream<List<_i3.DiscountModel>> getDiscounts({String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDiscounts,
          [],
          {#userId: userId},
        ),
        returnValue: _i8.Stream<List<_i3.DiscountModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.DiscountModel>>.empty(),
      ) as _i8.Stream<List<_i3.DiscountModel>>);

  @override
  _i8.Future<_i3.DiscountModel> getDiscount({
    required String? id,
    String? companyId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDiscount,
          [],
          {
            #id: id,
            #companyId: companyId,
          },
        ),
        returnValue: _i8.Future<_i3.DiscountModel>.value(_FakeDiscountModel_2(
          this,
          Invocation.method(
            #getDiscount,
            [],
            {
              #id: id,
              #companyId: companyId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.DiscountModel>.value(_FakeDiscountModel_2(
          this,
          Invocation.method(
            #getDiscount,
            [],
            {
              #id: id,
              #companyId: companyId,
            },
          ),
        )),
      ) as _i8.Future<_i3.DiscountModel>);

  @override
  _i8.Future<bool> companyHasDiscounts(String? companyId) =>
      (super.noSuchMethod(
        Invocation.method(
          #companyHasDiscounts,
          [companyId],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> updateDiscountModel(_i3.DiscountModel? discountModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDiscountModel,
          [discountModel],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> sendLink(_i3.LinkModel? discountLink) => (super.noSuchMethod(
        Invocation.method(
          #sendLink,
          [discountLink],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> sendEmail(_i3.EmailModel? userEmail) => (super.noSuchMethod(
        Invocation.method(
          #sendEmail,
          [userEmail],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.LinkModel>> getUserDiscountsLink(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserDiscountsLink,
          [userId],
        ),
        returnValue: _i8.Future<List<_i3.LinkModel>>.value(<_i3.LinkModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.LinkModel>>.value(<_i3.LinkModel>[]),
      ) as _i8.Future<List<_i3.LinkModel>>);

  @override
  _i8.Future<List<_i3.EmailModel>> getUserDiscountsEmail(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserDiscountsEmail,
          [userId],
        ),
        returnValue: _i8.Future<List<_i3.EmailModel>>.value(<_i3.EmailModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.EmailModel>>.value(<_i3.EmailModel>[]),
      ) as _i8.Future<List<_i3.EmailModel>>);

  @override
  _i8.Future<void> addDiscount(_i3.DiscountModel? discount) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDiscount,
          [discount],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteDiscountById(String? discountId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDiscountById,
          [discountId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> addReport(_i3.ReportModel? report) => (super.noSuchMethod(
        Invocation.method(
          #addReport,
          [report],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateInformationModel(
          _i3.InformationModel? informationModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateInformationModel,
          [informationModel],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.ReportModel>> getCardReportByUserId({
    required _i3.CardEnum? cardEnum,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardReportByUserId,
          [],
          {
            #cardEnum: cardEnum,
            #userId: userId,
          },
        ),
        returnValue:
            _i8.Future<List<_i3.ReportModel>>.value(<_i3.ReportModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.ReportModel>>.value(<_i3.ReportModel>[]),
      ) as _i8.Future<List<_i3.ReportModel>>);

  @override
  _i8.Future<void> sendRespond(_i3.EmployeeRespondModel? respondModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRespond,
          [respondModel],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.CityModel>> getCities() => (super.noSuchMethod(
        Invocation.method(
          #getCities,
          [],
        ),
        returnValue: _i8.Future<List<_i3.CityModel>>.value(<_i3.CityModel>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.CityModel>>.value(<_i3.CityModel>[]),
      ) as _i8.Future<List<_i3.CityModel>>);
}

/// A class which mocks [IInvestorsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIInvestorsRepository extends _i1.Mock
    implements _i3.IInvestorsRepository {
  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.FundModel>>> getFunds() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFunds,
          [],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.FundModel>>>.value(
                _FakeEither_0<_i3.SomeFailure, List<_i3.FundModel>>(
          this,
          Invocation.method(
            #getFunds,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.FundModel>>>.value(
                _FakeEither_0<_i3.SomeFailure, List<_i3.FundModel>>(
          this,
          Invocation.method(
            #getFunds,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.FundModel>>>);

  @override
  void addMockFunds() => super.noSuchMethod(
        Invocation.method(
          #addMockFunds,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IAppAuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAppAuthenticationRepository extends _i1.Mock
    implements _i3.IAppAuthenticationRepository {
  @override
  _i8.Stream<_i3.User> get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _i8.Stream<_i3.User>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.User>.empty(),
      ) as _i8.Stream<_i3.User>);

  @override
  _i8.Stream<_i3.UserSetting> get userSetting => (super.noSuchMethod(
        Invocation.getter(#userSetting),
        returnValue: _i8.Stream<_i3.UserSetting>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.UserSetting>.empty(),
      ) as _i8.Stream<_i3.UserSetting>);

  @override
  _i3.User get currentUser => (super.noSuchMethod(
        Invocation.getter(#currentUser),
        returnValue: _FakeUser_3(
          this,
          Invocation.getter(#currentUser),
        ),
        returnValueForMissingStub: _FakeUser_3(
          this,
          Invocation.getter(#currentUser),
        ),
      ) as _i3.User);

  @override
  _i3.UserSetting get currentUserSetting => (super.noSuchMethod(
        Invocation.getter(#currentUserSetting),
        returnValue: _FakeUserSetting_4(
          this,
          Invocation.getter(#currentUserSetting),
        ),
        returnValueForMissingStub: _FakeUserSetting_4(
          this,
          Invocation.getter(#currentUserSetting),
        ),
      ) as _i3.UserSetting);

  @override
  bool get isLoggedIn => (super.noSuchMethod(
        Invocation.getter(#isLoggedIn),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isAnonymously => (super.noSuchMethod(
        Invocation.getter(#isAnonymously),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>> signUpWithGoogle() =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithGoogle,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
            _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #signUpWithGoogle,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #signUpWithGoogle,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>> signUpWithFacebook() =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithFacebook,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
            _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #signUpWithFacebook,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #signUpWithFacebook,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>> logInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
            _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #logInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #logInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>> logInAnonymously() =>
      (super.noSuchMethod(
        Invocation.method(
          #logInAnonymously,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
            _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #logInAnonymously,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #logInAnonymously,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>> signUp({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
            _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<String?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendVerificationCode(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendVerificationCode,
          [],
          {#email: email},
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendVerificationCode,
            [],
            {#email: email},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendVerificationCode,
            [],
            {#email: email},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> checkVerificationCode(
          String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkVerificationCode,
          [code],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #checkVerificationCode,
            [code],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #checkVerificationCode,
            [code],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> resetPasswordUseCode({
    required String? code,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPasswordUseCode,
          [],
          {
            #code: code,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #resetPasswordUseCode,
            [],
            {
              #code: code,
              #newPassword: newPassword,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #resetPasswordUseCode,
            [],
            {
              #code: code,
              #newPassword: newPassword,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> deleteUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> updateUserSetting(
          _i3.UserSetting? userSetting) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserSetting,
          [userSetting],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserSetting,
            [userSetting],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserSetting,
            [userSetting],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> createFcmUserSetting() =>
      (super.noSuchMethod(
        Invocation.method(
          #createFcmUserSetting,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #createFcmUserSetting,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #createFcmUserSetting,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User>> updateUserData({
    required _i3.User? user,
    required _i3.FilePickerItem? image,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserData,
          [],
          {
            #user: user,
            #image: image,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User>>.value(
            _FakeEither_0<_i3.SomeFailure, _i3.User>(
          this,
          Invocation.method(
            #updateUserData,
            [],
            {
              #user: user,
              #image: image,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.User>(
          this,
          Invocation.method(
            #updateUserData,
            [],
            {
              #user: user,
              #image: image,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User>>);
}

/// A class which mocks [AppAuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppAuthenticationRepository extends _i1.Mock
    implements _i3.AppAuthenticationRepository {
  @override
  _i4.GoogleAuthProvider get googleAuthProvider => (super.noSuchMethod(
        Invocation.getter(#googleAuthProvider),
        returnValue: _FakeGoogleAuthProvider_5(
          this,
          Invocation.getter(#googleAuthProvider),
        ),
        returnValueForMissingStub: _FakeGoogleAuthProvider_5(
          this,
          Invocation.getter(#googleAuthProvider),
        ),
      ) as _i4.GoogleAuthProvider);

  @override
  set googleAuthProvider(_i4.GoogleAuthProvider? _googleAuthProvider) =>
      super.noSuchMethod(
        Invocation.setter(
          #googleAuthProvider,
          _googleAuthProvider,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set authCredential(_i4.AuthCredential? _authCredential) => super.noSuchMethod(
        Invocation.setter(
          #authCredential,
          _authCredential,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.FacebookAuthProvider get facebookAuthProvider => (super.noSuchMethod(
        Invocation.getter(#facebookAuthProvider),
        returnValue: _FakeFacebookAuthProvider_6(
          this,
          Invocation.getter(#facebookAuthProvider),
        ),
        returnValueForMissingStub: _FakeFacebookAuthProvider_6(
          this,
          Invocation.getter(#facebookAuthProvider),
        ),
      ) as _i4.FacebookAuthProvider);

  @override
  set facebookAuthProvider(_i4.FacebookAuthProvider? _facebookAuthProvider) =>
      super.noSuchMethod(
        Invocation.setter(
          #facebookAuthProvider,
          _facebookAuthProvider,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Stream<_i3.User> get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _i8.Stream<_i3.User>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.User>.empty(),
      ) as _i8.Stream<_i3.User>);

  @override
  _i8.Stream<_i3.UserSetting> get userSetting => (super.noSuchMethod(
        Invocation.getter(#userSetting),
        returnValue: _i8.Stream<_i3.UserSetting>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.UserSetting>.empty(),
      ) as _i8.Stream<_i3.UserSetting>);

  @override
  _i3.User get currentUser => (super.noSuchMethod(
        Invocation.getter(#currentUser),
        returnValue: _FakeUser_3(
          this,
          Invocation.getter(#currentUser),
        ),
        returnValueForMissingStub: _FakeUser_3(
          this,
          Invocation.getter(#currentUser),
        ),
      ) as _i3.User);

  @override
  _i3.UserSetting get currentUserSetting => (super.noSuchMethod(
        Invocation.getter(#currentUserSetting),
        returnValue: _FakeUserSetting_4(
          this,
          Invocation.getter(#currentUserSetting),
        ),
        returnValueForMissingStub: _FakeUserSetting_4(
          this,
          Invocation.getter(#currentUserSetting),
        ),
      ) as _i3.UserSetting);

  @override
  bool get isLoggedIn => (super.noSuchMethod(
        Invocation.getter(#isLoggedIn),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isAnonymously => (super.noSuchMethod(
        Invocation.getter(#isAnonymously),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>> signUpWithGoogle() =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithGoogle,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
            _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #signUpWithGoogle,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #signUpWithGoogle,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>> signUpWithFacebook() =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithFacebook,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
            _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #signUpWithFacebook,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #signUpWithFacebook,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>> logInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
            _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #logInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #logInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>> logInAnonymously() =>
      (super.noSuchMethod(
        Invocation.method(
          #logInAnonymously,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
            _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #logInAnonymously,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #logInAnonymously,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>> signUp({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
            _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.User?>(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User?>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<String?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendVerificationCode(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendVerificationCode,
          [],
          {#email: email},
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendVerificationCode,
            [],
            {#email: email},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendVerificationCode,
            [],
            {#email: email},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> checkVerificationCode(
          String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkVerificationCode,
          [code],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #checkVerificationCode,
            [code],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #checkVerificationCode,
            [code],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> resetPasswordUseCode({
    required String? code,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPasswordUseCode,
          [],
          {
            #code: code,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #resetPasswordUseCode,
            [],
            {
              #code: code,
              #newPassword: newPassword,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #resetPasswordUseCode,
            [],
            {
              #code: code,
              #newPassword: newPassword,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> deleteUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> updateUserSetting(
          _i3.UserSetting? userSetting) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserSetting,
          [userSetting],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserSetting,
            [userSetting],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserSetting,
            [userSetting],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> createFcmUserSetting() =>
      (super.noSuchMethod(
        Invocation.method(
          #createFcmUserSetting,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #createFcmUserSetting,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #createFcmUserSetting,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User>> updateUserData({
    required _i3.User? user,
    required _i3.FilePickerItem? image,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserData,
          [],
          {
            #user: user,
            #image: image,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User>>.value(
            _FakeEither_0<_i3.SomeFailure, _i3.User>(
          this,
          Invocation.method(
            #updateUserData,
            [],
            {
              #user: user,
              #image: image,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.User>(
          this,
          Invocation.method(
            #updateUserData,
            [],
            {
              #user: user,
              #image: image,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.User>>);
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i3.AuthenticationRepository {
  @override
  _i3.IAppAuthenticationRepository get iAppAuthenticationRepository =>
      (super.noSuchMethod(
        Invocation.getter(#iAppAuthenticationRepository),
        returnValue: _FakeIAppAuthenticationRepository_7(
          this,
          Invocation.getter(#iAppAuthenticationRepository),
        ),
        returnValueForMissingStub: _FakeIAppAuthenticationRepository_7(
          this,
          Invocation.getter(#iAppAuthenticationRepository),
        ),
      ) as _i3.IAppAuthenticationRepository);

  @override
  _i8.Stream<_i3.UserSetting> get userSetting => (super.noSuchMethod(
        Invocation.getter(#userSetting),
        returnValue: _i8.Stream<_i3.UserSetting>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.UserSetting>.empty(),
      ) as _i8.Stream<_i3.UserSetting>);

  @override
  _i8.Stream<_i3.User> get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _i8.Stream<_i3.User>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.User>.empty(),
      ) as _i8.Stream<_i3.User>);

  @override
  _i3.User get currentUser => (super.noSuchMethod(
        Invocation.getter(#currentUser),
        returnValue: _FakeUser_3(
          this,
          Invocation.getter(#currentUser),
        ),
        returnValueForMissingStub: _FakeUser_3(
          this,
          Invocation.getter(#currentUser),
        ),
      ) as _i3.User);

  @override
  _i3.UserSetting get currentUserSetting => (super.noSuchMethod(
        Invocation.getter(#currentUserSetting),
        returnValue: _FakeUserSetting_4(
          this,
          Invocation.getter(#currentUserSetting),
        ),
        returnValueForMissingStub: _FakeUserSetting_4(
          this,
          Invocation.getter(#currentUserSetting),
        ),
      ) as _i3.UserSetting);

  @override
  bool get isAnonymously => (super.noSuchMethod(
        Invocation.getter(#isAnonymously),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isAnonymouslyOrEmty => (super.noSuchMethod(
        Invocation.getter(#isAnonymouslyOrEmty),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> deleteUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> logIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> signUp({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> signUpWithGoogle() =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithGoogle,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUpWithGoogle,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUpWithGoogle,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> signUpWithFacebook() =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithFacebook,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUpWithFacebook,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #signUpWithFacebook,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendVerificationCodeToEmail(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendVerificationCodeToEmail,
          [],
          {#email: email},
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendVerificationCodeToEmail,
            [],
            {#email: email},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendVerificationCodeToEmail,
            [],
            {#email: email},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> checkVerificationCode(
          String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkVerificationCode,
          [code],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #checkVerificationCode,
            [code],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #checkVerificationCode,
            [code],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> resetPasswordUseCode({
    required String? code,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPasswordUseCode,
          [],
          {
            #code: code,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #resetPasswordUseCode,
            [],
            {
              #code: code,
              #newPassword: newPassword,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #resetPasswordUseCode,
            [],
            {
              #code: code,
              #newPassword: newPassword,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> updateUserSetting(
          {required _i3.UserSetting? userSetting}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserSetting,
          [],
          {#userSetting: userSetting},
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserSetting,
            [],
            {#userSetting: userSetting},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserSetting,
            [],
            {#userSetting: userSetting},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> updateUserData({
    required _i3.User? user,
    required String? nickname,
    required _i3.FilePickerItem? image,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserData,
          [],
          {
            #user: user,
            #nickname: nickname,
            #image: image,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserData,
            [],
            {
              #user: user,
              #nickname: nickname,
              #image: image,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateUserData,
            [],
            {
              #user: user,
              #nickname: nickname,
              #image: image,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockIStorage extends _i1.Mock implements _i3.IStorage {
  @override
  _i5.FlutterSecureStorage get secureStorage => (super.noSuchMethod(
        Invocation.getter(#secureStorage),
        returnValue: _FakeFlutterSecureStorage_8(
          this,
          Invocation.getter(#secureStorage),
        ),
        returnValueForMissingStub: _FakeFlutterSecureStorage_8(
          this,
          Invocation.getter(#secureStorage),
        ),
      ) as _i5.FlutterSecureStorage);

  @override
  set secureStorage(_i5.FlutterSecureStorage? setSecureStorage) =>
      super.noSuchMethod(
        Invocation.setter(
          #secureStorage,
          setSecureStorage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<String?> readOne({required String? keyItem}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readOne,
          [],
          {#keyItem: keyItem},
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<bool> writeOne({
    required String? keyItem,
    required String? valueItem,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeOne,
          [],
          {
            #keyItem: keyItem,
            #valueItem: valueItem,
          },
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [GoogleSignIn].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignIn extends _i1.Mock implements _i9.GoogleSignIn {
  @override
  _i9.SignInOption get signInOption => (super.noSuchMethod(
        Invocation.getter(#signInOption),
        returnValue: _i9.SignInOption.standard,
        returnValueForMissingStub: _i9.SignInOption.standard,
      ) as _i9.SignInOption);

  @override
  List<String> get scopes => (super.noSuchMethod(
        Invocation.getter(#scopes),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  bool get forceCodeForRefreshToken => (super.noSuchMethod(
        Invocation.getter(#forceCodeForRefreshToken),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Stream<_i9.GoogleSignInAccount?> get onCurrentUserChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onCurrentUserChanged),
        returnValue: _i8.Stream<_i9.GoogleSignInAccount?>.empty(),
        returnValueForMissingStub: _i8.Stream<_i9.GoogleSignInAccount?>.empty(),
      ) as _i8.Stream<_i9.GoogleSignInAccount?>);

  @override
  _i8.Future<_i9.GoogleSignInAccount?> signInSilently({
    bool? suppressErrors = true,
    bool? reAuthenticate = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInSilently,
          [],
          {
            #suppressErrors: suppressErrors,
            #reAuthenticate: reAuthenticate,
          },
        ),
        returnValue: _i8.Future<_i9.GoogleSignInAccount?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.GoogleSignInAccount?>.value(),
      ) as _i8.Future<_i9.GoogleSignInAccount?>);

  @override
  _i8.Future<bool> isSignedIn() => (super.noSuchMethod(
        Invocation.method(
          #isSignedIn,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i9.GoogleSignInAccount?> signIn() => (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
        ),
        returnValue: _i8.Future<_i9.GoogleSignInAccount?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.GoogleSignInAccount?>.value(),
      ) as _i8.Future<_i9.GoogleSignInAccount?>);

  @override
  _i8.Future<_i9.GoogleSignInAccount?> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i8.Future<_i9.GoogleSignInAccount?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.GoogleSignInAccount?>.value(),
      ) as _i8.Future<_i9.GoogleSignInAccount?>);

  @override
  _i8.Future<_i9.GoogleSignInAccount?> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i8.Future<_i9.GoogleSignInAccount?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.GoogleSignInAccount?>.value(),
      ) as _i8.Future<_i9.GoogleSignInAccount?>);

  @override
  _i8.Future<bool> requestScopes(List<String>? scopes) => (super.noSuchMethod(
        Invocation.method(
          #requestScopes,
          [scopes],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> canAccessScopes(
    List<String>? scopes, {
    String? accessToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #canAccessScopes,
          [scopes],
          {#accessToken: accessToken},
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i4.FirebaseAuth {
  @override
  _i6.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_9(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_9(
          this,
          Invocation.getter(#app),
        ),
      ) as _i6.FirebaseApp);

  @override
  set app(_i6.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tenantId(String? tenantId) => super.noSuchMethod(
        Invocation.setter(
          #tenantId,
          tenantId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set customAuthDomain(String? customAuthDomain) => super.noSuchMethod(
        Invocation.setter(
          #customAuthDomain,
          customAuthDomain,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i8.Future<void> useAuthEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #useAuthEmulator,
          [
            host,
            port,
          ],
          {#automaticHostMapping: automaticHostMapping},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> applyActionCode(String? code) => (super.noSuchMethod(
        Invocation.method(
          #applyActionCode,
          [code],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkActionCode,
          [code],
        ),
        returnValue:
            _i8.Future<_i4.ActionCodeInfo>.value(_FakeActionCodeInfo_10(
          this,
          Invocation.method(
            #checkActionCode,
            [code],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.ActionCodeInfo>.value(_FakeActionCodeInfo_10(
          this,
          Invocation.method(
            #checkActionCode,
            [code],
          ),
        )),
      ) as _i8.Future<_i4.ActionCodeInfo>);

  @override
  _i8.Future<void> confirmPasswordReset({
    required String? code,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmPasswordReset,
          [],
          {
            #code: code,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.UserCredential> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<List<String>> fetchSignInMethodsForEmail(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSignInMethodsForEmail,
          [email],
        ),
        returnValue: _i8.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i8.Future<List<String>>.value(<String>[]),
      ) as _i8.Future<List<String>>);

  @override
  _i8.Future<_i4.UserCredential> getRedirectResult() => (super.noSuchMethod(
        Invocation.method(
          #getRedirectResult,
          [],
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #getRedirectResult,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #getRedirectResult,
            [],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  bool isSignInWithEmailLink(String? emailLink) => (super.noSuchMethod(
        Invocation.method(
          #isSignInWithEmailLink,
          [emailLink],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Stream<_i4.User?> authStateChanges() => (super.noSuchMethod(
        Invocation.method(
          #authStateChanges,
          [],
        ),
        returnValue: _i8.Stream<_i4.User?>.empty(),
        returnValueForMissingStub: _i8.Stream<_i4.User?>.empty(),
      ) as _i8.Stream<_i4.User?>);

  @override
  _i8.Stream<_i4.User?> idTokenChanges() => (super.noSuchMethod(
        Invocation.method(
          #idTokenChanges,
          [],
        ),
        returnValue: _i8.Stream<_i4.User?>.empty(),
        returnValueForMissingStub: _i8.Stream<_i4.User?>.empty(),
      ) as _i8.Stream<_i4.User?>);

  @override
  _i8.Stream<_i4.User?> userChanges() => (super.noSuchMethod(
        Invocation.method(
          #userChanges,
          [],
        ),
        returnValue: _i8.Stream<_i4.User?>.empty(),
        returnValueForMissingStub: _i8.Stream<_i4.User?>.empty(),
      ) as _i8.Stream<_i4.User?>);

  @override
  _i8.Future<void> sendPasswordResetEmail({
    required String? email,
    _i4.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPasswordResetEmail,
          [],
          {
            #email: email,
            #actionCodeSettings: actionCodeSettings,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> sendSignInLinkToEmail({
    required String? email,
    required _i4.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendSignInLinkToEmail,
          [],
          {
            #email: email,
            #actionCodeSettings: actionCodeSettings,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setLanguageCode(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #setLanguageCode,
          [languageCode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setSettings({
    bool? appVerificationDisabledForTesting = false,
    String? userAccessGroup,
    String? phoneNumber,
    String? smsCode,
    bool? forceRecaptchaFlow,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSettings,
          [],
          {
            #appVerificationDisabledForTesting:
                appVerificationDisabledForTesting,
            #userAccessGroup: userAccessGroup,
            #phoneNumber: phoneNumber,
            #smsCode: smsCode,
            #forceRecaptchaFlow: forceRecaptchaFlow,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setPersistence(_i4.Persistence? persistence) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPersistence,
          [persistence],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.UserCredential> signInAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInAnonymously,
            [],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithCredential(
          _i4.AuthCredential? credential) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithCredential,
          [credential],
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInWithCredential,
            [credential],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInWithCredential,
            [credential],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithCustomToken,
          [token],
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInWithCustomToken,
            [token],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInWithCustomToken,
            [token],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithEmailLink({
    required String? email,
    required String? emailLink,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailLink,
          [],
          {
            #email: email,
            #emailLink: emailLink,
          },
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInWithEmailLink,
            [],
            {
              #email: email,
              #emailLink: emailLink,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInWithEmailLink,
            [],
            {
              #email: email,
              #emailLink: emailLink,
            },
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> signInWithProvider(
          _i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithProvider,
          [provider],
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInWithProvider,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInWithProvider,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.ConfirmationResult> signInWithPhoneNumber(
    String? phoneNumber, [
    _i4.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithPhoneNumber,
          [
            phoneNumber,
            verifier,
          ],
        ),
        returnValue:
            _i8.Future<_i4.ConfirmationResult>.value(_FakeConfirmationResult_12(
          this,
          Invocation.method(
            #signInWithPhoneNumber,
            [
              phoneNumber,
              verifier,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.ConfirmationResult>.value(_FakeConfirmationResult_12(
          this,
          Invocation.method(
            #signInWithPhoneNumber,
            [
              phoneNumber,
              verifier,
            ],
          ),
        )),
      ) as _i8.Future<_i4.ConfirmationResult>);

  @override
  _i8.Future<_i4.UserCredential> signInWithPopup(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithPopup,
          [provider],
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInWithPopup,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #signInWithPopup,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<void> signInWithRedirect(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithRedirect,
          [provider],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPasswordResetCode,
          [code],
        ),
        returnValue: _i8.Future<String>.value(_i28.dummyValue<String>(
          this,
          Invocation.method(
            #verifyPasswordResetCode,
            [code],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i28.dummyValue<String>(
          this,
          Invocation.method(
            #verifyPasswordResetCode,
            [code],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<void> verifyPhoneNumber({
    String? phoneNumber,
    _i4.PhoneMultiFactorInfo? multiFactorInfo,
    required _i4.PhoneVerificationCompleted? verificationCompleted,
    required _i4.PhoneVerificationFailed? verificationFailed,
    required _i4.PhoneCodeSent? codeSent,
    required _i4.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
    String? autoRetrievedSmsCodeForTesting,
    Duration? timeout = const Duration(seconds: 30),
    int? forceResendingToken,
    _i4.MultiFactorSession? multiFactorSession,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyPhoneNumber,
          [],
          {
            #phoneNumber: phoneNumber,
            #multiFactorInfo: multiFactorInfo,
            #verificationCompleted: verificationCompleted,
            #verificationFailed: verificationFailed,
            #codeSent: codeSent,
            #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
            #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
            #timeout: timeout,
            #forceResendingToken: forceResendingToken,
            #multiFactorSession: multiFactorSession,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> revokeTokenWithAuthorizationCode(
          String? authorizationCode) =>
      (super.noSuchMethod(
        Invocation.method(
          #revokeTokenWithAuthorizationCode,
          [authorizationCode],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [IWorkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIWorkRepository extends _i1.Mock implements _i3.IWorkRepository {
  @override
  _i8.Stream<List<_i3.WorkModel>> getWorks() => (super.noSuchMethod(
        Invocation.method(
          #getWorks,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.WorkModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.WorkModel>>.empty(),
      ) as _i8.Stream<List<_i3.WorkModel>>);

  @override
  void addMockWorks() => super.noSuchMethod(
        Invocation.method(
          #addMockWorks,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendRespond({
    required _i3.EmployeeRespondModel? respond,
    required _i3.FilePickerItem? file,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRespond,
          [],
          {
            #respond: respond,
            #file: file,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendRespond,
            [],
            {
              #respond: respond,
              #file: file,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendRespond,
            [],
            {
              #respond: respond,
              #file: file,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i7.FirebaseFirestore {
  @override
  _i6.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_9(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_9(
          this,
          Invocation.getter(#app),
        ),
      ) as _i6.FirebaseApp);

  @override
  set app(_i6.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get databaseURL => (super.noSuchMethod(
        Invocation.getter(#databaseURL),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#databaseURL),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#databaseURL),
        ),
      ) as String);

  @override
  set databaseURL(String? _databaseURL) => super.noSuchMethod(
        Invocation.setter(
          #databaseURL,
          _databaseURL,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get databaseId => (super.noSuchMethod(
        Invocation.getter(#databaseId),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#databaseId),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#databaseId),
        ),
      ) as String);

  @override
  set databaseId(String? _databaseId) => super.noSuchMethod(
        Invocation.setter(
          #databaseId,
          _databaseId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set settings(_i7.Settings? settings) => super.noSuchMethod(
        Invocation.setter(
          #settings,
          settings,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Settings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeSettings_13(
          this,
          Invocation.getter(#settings),
        ),
        returnValueForMissingStub: _FakeSettings_13(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i7.Settings);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i7.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_14<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
        returnValueForMissingStub:
            _FakeCollectionReference_14<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i7.CollectionReference<Map<String, dynamic>>);

  @override
  _i7.WriteBatch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeWriteBatch_15(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeWriteBatch_15(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i7.WriteBatch);

  @override
  _i8.Future<void> clearPersistence() => (super.noSuchMethod(
        Invocation.method(
          #clearPersistence,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> enablePersistence(
          [_i7.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
        Invocation.method(
          #enablePersistence,
          [persistenceSettings],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i7.LoadBundleTask loadBundle(_i27.Uint8List? bundle) => (super.noSuchMethod(
        Invocation.method(
          #loadBundle,
          [bundle],
        ),
        returnValue: _FakeLoadBundleTask_16(
          this,
          Invocation.method(
            #loadBundle,
            [bundle],
          ),
        ),
        returnValueForMissingStub: _FakeLoadBundleTask_16(
          this,
          Invocation.method(
            #loadBundle,
            [bundle],
          ),
        ),
      ) as _i7.LoadBundleTask);

  @override
  void useFirestoreEmulator(
    String? host,
    int? port, {
    bool? sslEnabled = false,
    bool? automaticHostMapping = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #useFirestoreEmulator,
          [
            host,
            port,
          ],
          {
            #sslEnabled: sslEnabled,
            #automaticHostMapping: automaticHostMapping,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i7.QuerySnapshot<T>> namedQueryWithConverterGet<T>(
    String? name, {
    _i7.GetOptions? options = const _i7.GetOptions(),
    required _i7.FromFirestore<T>? fromFirestore,
    required _i7.ToFirestore<T>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryWithConverterGet,
          [name],
          {
            #options: options,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_17<T>(
          this,
          Invocation.method(
            #namedQueryWithConverterGet,
            [name],
            {
              #options: options,
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_17<T>(
          this,
          Invocation.method(
            #namedQueryWithConverterGet,
            [name],
            {
              #options: options,
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<T>>);

  @override
  _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
    String? name, {
    _i7.GetOptions? options = const _i7.GetOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #namedQueryGet,
          [name],
          {#options: options},
        ),
        returnValue: _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>>.value(
            _FakeQuerySnapshot_17<Map<String, dynamic>>(
          this,
          Invocation.method(
            #namedQueryGet,
            [name],
            {#options: options},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>>.value(
                _FakeQuerySnapshot_17<Map<String, dynamic>>(
          this,
          Invocation.method(
            #namedQueryGet,
            [name],
            {#options: options},
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i7.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectionGroup,
          [collectionPath],
        ),
        returnValue: _FakeQuery_18<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collectionGroup,
            [collectionPath],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collectionGroup,
            [collectionPath],
          ),
        ),
      ) as _i7.Query<Map<String, dynamic>>);

  @override
  _i8.Future<void> disableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #disableNetwork,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i7.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #doc,
          [documentPath],
        ),
        returnValue: _FakeDocumentReference_19<Map<String, dynamic>>(
          this,
          Invocation.method(
            #doc,
            [documentPath],
          ),
        ),
        returnValueForMissingStub:
            _FakeDocumentReference_19<Map<String, dynamic>>(
          this,
          Invocation.method(
            #doc,
            [documentPath],
          ),
        ),
      ) as _i7.DocumentReference<Map<String, dynamic>>);

  @override
  _i8.Future<void> enableNetwork() => (super.noSuchMethod(
        Invocation.method(
          #enableNetwork,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Stream<void> snapshotsInSync() => (super.noSuchMethod(
        Invocation.method(
          #snapshotsInSync,
          [],
        ),
        returnValue: _i8.Stream<void>.empty(),
        returnValueForMissingStub: _i8.Stream<void>.empty(),
      ) as _i8.Stream<void>);

  @override
  _i8.Future<T> runTransaction<T>(
    _i7.TransactionHandler<T>? transactionHandler, {
    Duration? timeout = const Duration(seconds: 30),
    int? maxAttempts = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runTransaction,
          [transactionHandler],
          {
            #timeout: timeout,
            #maxAttempts: maxAttempts,
          },
        ),
        returnValue: _i28.ifNotNull(
              _i28.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runTransaction,
                  [transactionHandler],
                  {
                    #timeout: timeout,
                    #maxAttempts: maxAttempts,
                  },
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #runTransaction,
                [transactionHandler],
                {
                  #timeout: timeout,
                  #maxAttempts: maxAttempts,
                },
              ),
            ),
        returnValueForMissingStub: _i28.ifNotNull(
              _i28.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runTransaction,
                  [transactionHandler],
                  {
                    #timeout: timeout,
                    #maxAttempts: maxAttempts,
                  },
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_20<T>(
              this,
              Invocation.method(
                #runTransaction,
                [transactionHandler],
                {
                  #timeout: timeout,
                  #maxAttempts: maxAttempts,
                },
              ),
            ),
      ) as _i8.Future<T>);

  @override
  _i8.Future<void> terminate() => (super.noSuchMethod(
        Invocation.method(
          #terminate,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> waitForPendingWrites() => (super.noSuchMethod(
        Invocation.method(
          #waitForPendingWrites,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setIndexConfiguration({
    required List<_i7.Index>? indexes,
    List<_i7.FieldOverrides>? fieldOverrides,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfiguration,
          [],
          {
            #indexes: indexes,
            #fieldOverrides: fieldOverrides,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setIndexConfigurationFromJSON(String? json) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIndexConfigurationFromJSON,
          [json],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i5.FlutterSecureStorage {
  @override
  _i5.IOSOptions get iOptions => (super.noSuchMethod(
        Invocation.getter(#iOptions),
        returnValue: _FakeIOSOptions_21(
          this,
          Invocation.getter(#iOptions),
        ),
        returnValueForMissingStub: _FakeIOSOptions_21(
          this,
          Invocation.getter(#iOptions),
        ),
      ) as _i5.IOSOptions);

  @override
  _i5.AndroidOptions get aOptions => (super.noSuchMethod(
        Invocation.getter(#aOptions),
        returnValue: _FakeAndroidOptions_22(
          this,
          Invocation.getter(#aOptions),
        ),
        returnValueForMissingStub: _FakeAndroidOptions_22(
          this,
          Invocation.getter(#aOptions),
        ),
      ) as _i5.AndroidOptions);

  @override
  _i5.LinuxOptions get lOptions => (super.noSuchMethod(
        Invocation.getter(#lOptions),
        returnValue: _FakeLinuxOptions_23(
          this,
          Invocation.getter(#lOptions),
        ),
        returnValueForMissingStub: _FakeLinuxOptions_23(
          this,
          Invocation.getter(#lOptions),
        ),
      ) as _i5.LinuxOptions);

  @override
  _i5.WindowsOptions get wOptions => (super.noSuchMethod(
        Invocation.getter(#wOptions),
        returnValue: _FakeWindowsOptions_24(
          this,
          Invocation.getter(#wOptions),
        ),
        returnValueForMissingStub: _FakeWindowsOptions_24(
          this,
          Invocation.getter(#wOptions),
        ),
      ) as _i5.WindowsOptions);

  @override
  _i5.WebOptions get webOptions => (super.noSuchMethod(
        Invocation.getter(#webOptions),
        returnValue: _FakeWebOptions_25(
          this,
          Invocation.getter(#webOptions),
        ),
        returnValueForMissingStub: _FakeWebOptions_25(
          this,
          Invocation.getter(#webOptions),
        ),
      ) as _i5.WebOptions);

  @override
  _i5.MacOsOptions get mOptions => (super.noSuchMethod(
        Invocation.getter(#mOptions),
        returnValue: _FakeMacOsOptions_26(
          this,
          Invocation.getter(#mOptions),
        ),
        returnValueForMissingStub: _FakeMacOsOptions_26(
          this,
          Invocation.getter(#mOptions),
        ),
      ) as _i5.MacOsOptions);

  @override
  void registerListener({
    required String? key,
    required _i14.ValueChanged<String?>? listener,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerListener,
          [],
          {
            #key: key,
            #listener: listener,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterListener({
    required String? key,
    required _i14.ValueChanged<String?>? listener,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #unregisterListener,
          [],
          {
            #key: key,
            #listener: listener,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterAllListenersForKey({required String? key}) =>
      super.noSuchMethod(
        Invocation.method(
          #unregisterAllListenersForKey,
          [],
          {#key: key},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unregisterAllListeners() => super.noSuchMethod(
        Invocation.method(
          #unregisterAllListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> write({
    required String? key,
    required String? value,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String?> read({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<bool> containsKey({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> delete({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<Map<String, String>> readAll({
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i8.Future<Map<String, String>>.value(<String, String>{}),
        returnValueForMissingStub:
            _i8.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i8.Future<Map<String, String>>);

  @override
  _i8.Future<void> deleteAll({
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool?> isCupertinoProtectedDataAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isCupertinoProtectedDataAvailable,
          [],
        ),
        returnValue: _i8.Future<bool?>.value(),
        returnValueForMissingStub: _i8.Future<bool?>.value(),
      ) as _i8.Future<bool?>);
}

/// A class which mocks [CacheClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheClient extends _i1.Mock implements _i3.CacheClient {
  @override
  void write<T extends Object>({
    required String? key,
    required T? value,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  T? read<T extends Object>({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {#key: key},
        ),
        returnValueForMissingStub: null,
      ) as T?);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GoogleAuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleAuthProvider extends _i1.Mock
    implements _i4.GoogleAuthProvider {
  @override
  List<String> get scopes => (super.noSuchMethod(
        Invocation.getter(#scopes),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  Map<dynamic, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  String get providerId => (super.noSuchMethod(
        Invocation.getter(#providerId),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#providerId),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#providerId),
        ),
      ) as String);

  @override
  _i4.GoogleAuthProvider addScope(String? scope) => (super.noSuchMethod(
        Invocation.method(
          #addScope,
          [scope],
        ),
        returnValue: _FakeGoogleAuthProvider_5(
          this,
          Invocation.method(
            #addScope,
            [scope],
          ),
        ),
        returnValueForMissingStub: _FakeGoogleAuthProvider_5(
          this,
          Invocation.method(
            #addScope,
            [scope],
          ),
        ),
      ) as _i4.GoogleAuthProvider);

  @override
  _i4.GoogleAuthProvider setCustomParameters(
          Map<dynamic, dynamic>? customOAuthParameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCustomParameters,
          [customOAuthParameters],
        ),
        returnValue: _FakeGoogleAuthProvider_5(
          this,
          Invocation.method(
            #setCustomParameters,
            [customOAuthParameters],
          ),
        ),
        returnValueForMissingStub: _FakeGoogleAuthProvider_5(
          this,
          Invocation.method(
            #setCustomParameters,
            [customOAuthParameters],
          ),
        ),
      ) as _i4.GoogleAuthProvider);
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i4.UserCredential {}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i4.User {
  @override
  bool get emailVerified => (super.noSuchMethod(
        Invocation.getter(#emailVerified),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isAnonymous => (super.noSuchMethod(
        Invocation.getter(#isAnonymous),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.UserMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeUserMetadata_27(
          this,
          Invocation.getter(#metadata),
        ),
        returnValueForMissingStub: _FakeUserMetadata_27(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i4.UserMetadata);

  @override
  List<_i4.UserInfo> get providerData => (super.noSuchMethod(
        Invocation.getter(#providerData),
        returnValue: <_i4.UserInfo>[],
        returnValueForMissingStub: <_i4.UserInfo>[],
      ) as List<_i4.UserInfo>);

  @override
  String get uid => (super.noSuchMethod(
        Invocation.getter(#uid),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#uid),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#uid),
        ),
      ) as String);

  @override
  _i4.MultiFactor get multiFactor => (super.noSuchMethod(
        Invocation.getter(#multiFactor),
        returnValue: _FakeMultiFactor_28(
          this,
          Invocation.getter(#multiFactor),
        ),
        returnValueForMissingStub: _FakeMultiFactor_28(
          this,
          Invocation.getter(#multiFactor),
        ),
      ) as _i4.MultiFactor);

  @override
  _i8.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String?> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIdToken,
          [forceRefresh],
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<_i4.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIdTokenResult,
          [forceRefresh],
        ),
        returnValue: _i8.Future<_i4.IdTokenResult>.value(_FakeIdTokenResult_29(
          this,
          Invocation.method(
            #getIdTokenResult,
            [forceRefresh],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.IdTokenResult>.value(_FakeIdTokenResult_29(
          this,
          Invocation.method(
            #getIdTokenResult,
            [forceRefresh],
          ),
        )),
      ) as _i8.Future<_i4.IdTokenResult>);

  @override
  _i8.Future<_i4.UserCredential> linkWithCredential(
          _i4.AuthCredential? credential) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithCredential,
          [credential],
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #linkWithCredential,
            [credential],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #linkWithCredential,
            [credential],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> linkWithProvider(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithProvider,
          [provider],
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #linkWithProvider,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #linkWithProvider,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> reauthenticateWithProvider(
          _i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticateWithProvider,
          [provider],
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #reauthenticateWithProvider,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #reauthenticateWithProvider,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<_i4.UserCredential> reauthenticateWithPopup(
          _i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticateWithPopup,
          [provider],
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #reauthenticateWithPopup,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #reauthenticateWithPopup,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<void> reauthenticateWithRedirect(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticateWithRedirect,
          [provider],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.UserCredential> linkWithPopup(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithPopup,
          [provider],
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #linkWithPopup,
            [provider],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #linkWithPopup,
            [provider],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<void> linkWithRedirect(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithRedirect,
          [provider],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.ConfirmationResult> linkWithPhoneNumber(
    String? phoneNumber, [
    _i4.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkWithPhoneNumber,
          [
            phoneNumber,
            verifier,
          ],
        ),
        returnValue:
            _i8.Future<_i4.ConfirmationResult>.value(_FakeConfirmationResult_12(
          this,
          Invocation.method(
            #linkWithPhoneNumber,
            [
              phoneNumber,
              verifier,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.ConfirmationResult>.value(_FakeConfirmationResult_12(
          this,
          Invocation.method(
            #linkWithPhoneNumber,
            [
              phoneNumber,
              verifier,
            ],
          ),
        )),
      ) as _i8.Future<_i4.ConfirmationResult>);

  @override
  _i8.Future<_i4.UserCredential> reauthenticateWithCredential(
          _i4.AuthCredential? credential) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticateWithCredential,
          [credential],
        ),
        returnValue:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #reauthenticateWithCredential,
            [credential],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.UserCredential>.value(_FakeUserCredential_11(
          this,
          Invocation.method(
            #reauthenticateWithCredential,
            [credential],
          ),
        )),
      ) as _i8.Future<_i4.UserCredential>);

  @override
  _i8.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> sendEmailVerification(
          [_i4.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEmailVerification,
          [actionCodeSettings],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i4.User> unlink(String? providerId) => (super.noSuchMethod(
        Invocation.method(
          #unlink,
          [providerId],
        ),
        returnValue: _i8.Future<_i4.User>.value(_FakeUser_30(
          this,
          Invocation.method(
            #unlink,
            [providerId],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i4.User>.value(_FakeUser_30(
          this,
          Invocation.method(
            #unlink,
            [providerId],
          ),
        )),
      ) as _i8.Future<_i4.User>);

  @override
  _i8.Future<void> updateEmail(String? newEmail) => (super.noSuchMethod(
        Invocation.method(
          #updateEmail,
          [newEmail],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updatePassword(String? newPassword) => (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [newPassword],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updatePhoneNumber(
          _i4.PhoneAuthCredential? phoneCredential) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePhoneNumber,
          [phoneCredential],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDisplayName,
          [displayName],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updatePhotoURL(String? photoURL) => (super.noSuchMethod(
        Invocation.method(
          #updatePhotoURL,
          [photoURL],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateProfile({
    String? displayName,
    String? photoURL,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [],
          {
            #displayName: displayName,
            #photoURL: photoURL,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> verifyBeforeUpdateEmail(
    String? newEmail, [
    _i4.ActionCodeSettings? actionCodeSettings,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyBeforeUpdateEmail,
          [
            newEmail,
            actionCodeSettings,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [GoogleSignInAccount].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockGoogleSignInAccount extends _i1.Mock
    implements _i9.GoogleSignInAccount {
  @override
  String get email => (super.noSuchMethod(
        Invocation.getter(#email),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
      ) as String);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i8.Future<_i9.GoogleSignInAuthentication> get authentication =>
      (super.noSuchMethod(
        Invocation.getter(#authentication),
        returnValue: _i8.Future<_i9.GoogleSignInAuthentication>.value(
            _FakeGoogleSignInAuthentication_31(
          this,
          Invocation.getter(#authentication),
        )),
        returnValueForMissingStub:
            _i8.Future<_i9.GoogleSignInAuthentication>.value(
                _FakeGoogleSignInAuthentication_31(
          this,
          Invocation.getter(#authentication),
        )),
      ) as _i8.Future<_i9.GoogleSignInAuthentication>);

  @override
  _i8.Future<Map<String, String>> get authHeaders => (super.noSuchMethod(
        Invocation.getter(#authHeaders),
        returnValue: _i8.Future<Map<String, String>>.value(<String, String>{}),
        returnValueForMissingStub:
            _i8.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i8.Future<Map<String, String>>);

  @override
  _i8.Future<void> clearAuthCache() => (super.noSuchMethod(
        Invocation.method(
          #clearAuthCache,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [GoogleSignInAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignInAuthentication extends _i1.Mock
    implements _i9.GoogleSignInAuthentication {}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i7.CollectionReference<T> {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i7.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_32(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_32(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i7.FirebaseFirestore);

  @override
  Map<String, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i8.Future<_i7.DocumentReference<T>> add(T? data) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValue: _i8.Future<_i7.DocumentReference<T>>.value(
            _FakeDocumentReference_19<T>(
          this,
          Invocation.method(
            #add,
            [data],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i7.DocumentReference<T>>.value(
            _FakeDocumentReference_19<T>(
          this,
          Invocation.method(
            #add,
            [data],
          ),
        )),
      ) as _i8.Future<_i7.DocumentReference<T>>);

  @override
  _i7.DocumentReference<T> doc([String? path]) => (super.noSuchMethod(
        Invocation.method(
          #doc,
          [path],
        ),
        returnValue: _FakeDocumentReference_19<T>(
          this,
          Invocation.method(
            #doc,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeDocumentReference_19<T>(
          this,
          Invocation.method(
            #doc,
            [path],
          ),
        ),
      ) as _i7.DocumentReference<T>);

  @override
  _i7.CollectionReference<R> withConverter<R extends Object?>({
    required _i7.FromFirestore<R>? fromFirestore,
    required _i7.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeCollectionReference_14<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
        returnValueForMissingStub: _FakeCollectionReference_14<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i7.CollectionReference<R>);

  @override
  _i7.Query<T> endAtDocument(_i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> endAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [values],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> endBeforeDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBeforeDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> endBefore(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [values],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i8.Future<_i7.QuerySnapshot<T>> get([_i7.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_17<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_17<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<T>>);

  @override
  _i7.Query<T> limit(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limit,
          [limit],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i8.Stream<_i7.QuerySnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i7.ListenSource? source = _i7.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {
            #includeMetadataChanges: includeMetadataChanges,
            #source: source,
          },
        ),
        returnValue: _i8.Stream<_i7.QuerySnapshot<T>>.empty(),
        returnValueForMissingStub: _i8.Stream<_i7.QuerySnapshot<T>>.empty(),
      ) as _i8.Stream<_i7.QuerySnapshot<T>>);

  @override
  _i7.Query<T> orderBy(
    Object? field, {
    bool? descending = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderBy,
          [field],
          {#descending: descending},
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAfterDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfterDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAfter(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [values],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAtDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [values],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [field],
          {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull,
          },
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.AggregateQuery count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _FakeAggregateQuery_33(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeAggregateQuery_33(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
      ) as _i7.AggregateQuery);

  @override
  _i7.AggregateQuery aggregate(
    _i7.AggregateField? aggregateField1, [
    _i7.AggregateField? aggregateField2,
    _i7.AggregateField? aggregateField3,
    _i7.AggregateField? aggregateField4,
    _i7.AggregateField? aggregateField5,
    _i7.AggregateField? aggregateField6,
    _i7.AggregateField? aggregateField7,
    _i7.AggregateField? aggregateField8,
    _i7.AggregateField? aggregateField9,
    _i7.AggregateField? aggregateField10,
    _i7.AggregateField? aggregateField11,
    _i7.AggregateField? aggregateField12,
    _i7.AggregateField? aggregateField13,
    _i7.AggregateField? aggregateField14,
    _i7.AggregateField? aggregateField15,
    _i7.AggregateField? aggregateField16,
    _i7.AggregateField? aggregateField17,
    _i7.AggregateField? aggregateField18,
    _i7.AggregateField? aggregateField19,
    _i7.AggregateField? aggregateField20,
    _i7.AggregateField? aggregateField21,
    _i7.AggregateField? aggregateField22,
    _i7.AggregateField? aggregateField23,
    _i7.AggregateField? aggregateField24,
    _i7.AggregateField? aggregateField25,
    _i7.AggregateField? aggregateField26,
    _i7.AggregateField? aggregateField27,
    _i7.AggregateField? aggregateField28,
    _i7.AggregateField? aggregateField29,
    _i7.AggregateField? aggregateField30,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #aggregate,
          [
            aggregateField1,
            aggregateField2,
            aggregateField3,
            aggregateField4,
            aggregateField5,
            aggregateField6,
            aggregateField7,
            aggregateField8,
            aggregateField9,
            aggregateField10,
            aggregateField11,
            aggregateField12,
            aggregateField13,
            aggregateField14,
            aggregateField15,
            aggregateField16,
            aggregateField17,
            aggregateField18,
            aggregateField19,
            aggregateField20,
            aggregateField21,
            aggregateField22,
            aggregateField23,
            aggregateField24,
            aggregateField25,
            aggregateField26,
            aggregateField27,
            aggregateField28,
            aggregateField29,
            aggregateField30,
          ],
        ),
        returnValue: _FakeAggregateQuery_33(
          this,
          Invocation.method(
            #aggregate,
            [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeAggregateQuery_33(
          this,
          Invocation.method(
            #aggregate,
            [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ],
          ),
        ),
      ) as _i7.AggregateQuery);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i7.DocumentReference<T> {
  @override
  _i7.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_32(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_32(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i7.FirebaseFirestore);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i7.CollectionReference<T> get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeCollectionReference_14<T>(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeCollectionReference_14<T>(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i7.CollectionReference<T>);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i7.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_14<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
        returnValueForMissingStub:
            _FakeCollectionReference_14<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i7.CollectionReference<Map<String, dynamic>>);

  @override
  _i8.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> update(Map<Object, Object?>? data) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [data],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i7.DocumentSnapshot<T>> get([_i7.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue: _i8.Future<_i7.DocumentSnapshot<T>>.value(
            _FakeDocumentSnapshot_34<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i7.DocumentSnapshot<T>>.value(
            _FakeDocumentSnapshot_34<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i8.Future<_i7.DocumentSnapshot<T>>);

  @override
  _i8.Stream<_i7.DocumentSnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i7.ListenSource? source = _i7.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {
            #includeMetadataChanges: includeMetadataChanges,
            #source: source,
          },
        ),
        returnValue: _i8.Stream<_i7.DocumentSnapshot<T>>.empty(),
        returnValueForMissingStub: _i8.Stream<_i7.DocumentSnapshot<T>>.empty(),
      ) as _i8.Stream<_i7.DocumentSnapshot<T>>);

  @override
  _i8.Future<void> set(
    T? data, [
    _i7.SetOptions? options,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            data,
            options,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i7.DocumentReference<R> withConverter<R>({
    required _i7.FromFirestore<R>? fromFirestore,
    required _i7.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeDocumentReference_19<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDocumentReference_19<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i7.DocumentReference<R>);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i7.QuerySnapshot<T> {
  @override
  List<_i7.QueryDocumentSnapshot<T>> get docs => (super.noSuchMethod(
        Invocation.getter(#docs),
        returnValue: <_i7.QueryDocumentSnapshot<T>>[],
        returnValueForMissingStub: <_i7.QueryDocumentSnapshot<T>>[],
      ) as List<_i7.QueryDocumentSnapshot<T>>);

  @override
  List<_i7.DocumentChange<T>> get docChanges => (super.noSuchMethod(
        Invocation.getter(#docChanges),
        returnValue: <_i7.DocumentChange<T>>[],
        returnValueForMissingStub: <_i7.DocumentChange<T>>[],
      ) as List<_i7.DocumentChange<T>>);

  @override
  _i7.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_35(
          this,
          Invocation.getter(#metadata),
        ),
        returnValueForMissingStub: _FakeSnapshotMetadata_35(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i7.SnapshotMetadata);

  @override
  int get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [QueryDocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i7.QueryDocumentSnapshot<T> {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i7.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_19<T>(
          this,
          Invocation.getter(#reference),
        ),
        returnValueForMissingStub: _FakeDocumentReference_19<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i7.DocumentReference<T>);

  @override
  _i7.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_35(
          this,
          Invocation.getter(#metadata),
        ),
        returnValueForMissingStub: _FakeSnapshotMetadata_35(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i7.SnapshotMetadata);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  T data() => (super.noSuchMethod(
        Invocation.method(
          #data,
          [],
        ),
        returnValue: _i28.dummyValue<T>(
          this,
          Invocation.method(
            #data,
            [],
          ),
        ),
        returnValueForMissingStub: _i28.dummyValue<T>(
          this,
          Invocation.method(
            #data,
            [],
          ),
        ),
      ) as T);

  @override
  dynamic get(Object? field) => super.noSuchMethod(
        Invocation.method(
          #get,
          [field],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic operator [](Object? field) => super.noSuchMethod(
        Invocation.method(
          #[],
          [field],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i7.DocumentSnapshot<T> {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i7.DocumentReference<T> get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _FakeDocumentReference_19<T>(
          this,
          Invocation.getter(#reference),
        ),
        returnValueForMissingStub: _FakeDocumentReference_19<T>(
          this,
          Invocation.getter(#reference),
        ),
      ) as _i7.DocumentReference<T>);

  @override
  _i7.SnapshotMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakeSnapshotMetadata_35(
          this,
          Invocation.getter(#metadata),
        ),
        returnValueForMissingStub: _FakeSnapshotMetadata_35(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i7.SnapshotMetadata);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  dynamic get(Object? field) => super.noSuchMethod(
        Invocation.method(
          #get,
          [field],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic operator [](Object? field) => super.noSuchMethod(
        Invocation.method(
          #[],
          [field],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DocumentChange].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentChange<T extends Object?> extends _i1.Mock
    implements _i7.DocumentChange<T> {
  @override
  _i7.DocumentChangeType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i7.DocumentChangeType.added,
        returnValueForMissingStub: _i7.DocumentChangeType.added,
      ) as _i7.DocumentChangeType);

  @override
  int get oldIndex => (super.noSuchMethod(
        Invocation.getter(#oldIndex),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get newIndex => (super.noSuchMethod(
        Invocation.getter(#newIndex),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i7.DocumentSnapshot<T> get doc => (super.noSuchMethod(
        Invocation.getter(#doc),
        returnValue: _FakeDocumentSnapshot_34<T>(
          this,
          Invocation.getter(#doc),
        ),
        returnValueForMissingStub: _FakeDocumentSnapshot_34<T>(
          this,
          Invocation.getter(#doc),
        ),
      ) as _i7.DocumentSnapshot<T>);
}

/// A class which mocks [SnapshotMetadata].
///
/// See the documentation for Mockito's code generation for more information.
class MockSnapshotMetadata extends _i1.Mock implements _i7.SnapshotMetadata {
  @override
  bool get hasPendingWrites => (super.noSuchMethod(
        Invocation.getter(#hasPendingWrites),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isFromCache => (super.noSuchMethod(
        Invocation.getter(#isFromCache),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [IStoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIStoryRepository extends _i1.Mock implements _i3.IStoryRepository {
  @override
  _i8.Stream<List<_i3.StoryModel>> getStoryItems() => (super.noSuchMethod(
        Invocation.method(
          #getStoryItems,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.StoryModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.StoryModel>>.empty(),
      ) as _i8.Stream<List<_i3.StoryModel>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> addStory({
    required _i3.StoryModel? storyModel,
    required _i3.FilePickerItem? imageItem,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStory,
          [],
          {
            #storyModel: storyModel,
            #imageItem: imageItem,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #addStory,
            [],
            {
              #storyModel: storyModel,
              #imageItem: imageItem,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #addStory,
            [],
            {
              #storyModel: storyModel,
              #imageItem: imageItem,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<
      _i2.Either<_i3.SomeFailure, List<_i3.StoryModel>>> getStoriesByUserId(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoriesByUserId,
          [userId],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.StoryModel>>>.value(
                _FakeEither_0<_i3.SomeFailure, List<_i3.StoryModel>>(
          this,
          Invocation.method(
            #getStoriesByUserId,
            [userId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.StoryModel>>>.value(
                _FakeEither_0<_i3.SomeFailure, List<_i3.StoryModel>>(
          this,
          Invocation.method(
            #getStoriesByUserId,
            [userId],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.StoryModel>>>);
}

/// A class which mocks [FirebaseStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseStorage extends _i1.Mock implements _i10.FirebaseStorage {
  @override
  _i6.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_9(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_9(
          this,
          Invocation.getter(#app),
        ),
      ) as _i6.FirebaseApp);

  @override
  set app(_i6.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get bucket => (super.noSuchMethod(
        Invocation.getter(#bucket),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#bucket),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#bucket),
        ),
      ) as String);

  @override
  set bucket(String? _bucket) => super.noSuchMethod(
        Invocation.setter(
          #bucket,
          _bucket,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration get maxOperationRetryTime => (super.noSuchMethod(
        Invocation.getter(#maxOperationRetryTime),
        returnValue: _FakeDuration_36(
          this,
          Invocation.getter(#maxOperationRetryTime),
        ),
        returnValueForMissingStub: _FakeDuration_36(
          this,
          Invocation.getter(#maxOperationRetryTime),
        ),
      ) as Duration);

  @override
  Duration get maxUploadRetryTime => (super.noSuchMethod(
        Invocation.getter(#maxUploadRetryTime),
        returnValue: _FakeDuration_36(
          this,
          Invocation.getter(#maxUploadRetryTime),
        ),
        returnValueForMissingStub: _FakeDuration_36(
          this,
          Invocation.getter(#maxUploadRetryTime),
        ),
      ) as Duration);

  @override
  Duration get maxDownloadRetryTime => (super.noSuchMethod(
        Invocation.getter(#maxDownloadRetryTime),
        returnValue: _FakeDuration_36(
          this,
          Invocation.getter(#maxDownloadRetryTime),
        ),
        returnValueForMissingStub: _FakeDuration_36(
          this,
          Invocation.getter(#maxDownloadRetryTime),
        ),
      ) as Duration);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i10.Reference ref([String? path]) => (super.noSuchMethod(
        Invocation.method(
          #ref,
          [path],
        ),
        returnValue: _FakeReference_37(
          this,
          Invocation.method(
            #ref,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeReference_37(
          this,
          Invocation.method(
            #ref,
            [path],
          ),
        ),
      ) as _i10.Reference);

  @override
  _i10.Reference refFromURL(String? url) => (super.noSuchMethod(
        Invocation.method(
          #refFromURL,
          [url],
        ),
        returnValue: _FakeReference_37(
          this,
          Invocation.method(
            #refFromURL,
            [url],
          ),
        ),
        returnValueForMissingStub: _FakeReference_37(
          this,
          Invocation.method(
            #refFromURL,
            [url],
          ),
        ),
      ) as _i10.Reference);

  @override
  void setMaxOperationRetryTime(Duration? time) => super.noSuchMethod(
        Invocation.method(
          #setMaxOperationRetryTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMaxUploadRetryTime(Duration? time) => super.noSuchMethod(
        Invocation.method(
          #setMaxUploadRetryTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMaxDownloadRetryTime(Duration? time) => super.noSuchMethod(
        Invocation.method(
          #setMaxDownloadRetryTime,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> useStorageEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #useStorageEmulator,
          [
            host,
            port,
          ],
          {#automaticHostMapping: automaticHostMapping},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i3.StorageService {
  @override
  _i8.Future<String?> saveFile({
    required _i3.FilePickerItem? filePickerItem,
    required String? id,
    required String? collecltionName,
    String? file = r'image',
    String? standartFileExtension = r'.png',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveFile,
          [],
          {
            #filePickerItem: filePickerItem,
            #id: id,
            #collecltionName: collecltionName,
            #file: file,
            #standartFileExtension: standartFileExtension,
          },
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<void> removeFile(String? url) => (super.noSuchMethod(
        Invocation.method(
          #removeFile,
          [url],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i29.ImagePicker {
  @override
  _i8.Future<_i11.XFile?> pickImage({
    required _i11.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i11.CameraDevice? preferredCameraDevice = _i11.CameraDevice.rear,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickImage,
          [],
          {
            #source: source,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #preferredCameraDevice: preferredCameraDevice,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i8.Future<_i11.XFile?>.value(),
        returnValueForMissingStub: _i8.Future<_i11.XFile?>.value(),
      ) as _i8.Future<_i11.XFile?>);

  @override
  _i8.Future<List<_i11.XFile>> pickMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultiImage,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #limit: limit,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i8.Future<List<_i11.XFile>>.value(<_i11.XFile>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i11.XFile>>.value(<_i11.XFile>[]),
      ) as _i8.Future<List<_i11.XFile>>);

  @override
  _i8.Future<_i11.XFile?> pickMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i8.Future<_i11.XFile?>.value(),
        returnValueForMissingStub: _i8.Future<_i11.XFile?>.value(),
      ) as _i8.Future<_i11.XFile?>);

  @override
  _i8.Future<List<_i11.XFile>> pickMultipleMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultipleMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #limit: limit,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i8.Future<List<_i11.XFile>>.value(<_i11.XFile>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i11.XFile>>.value(<_i11.XFile>[]),
      ) as _i8.Future<List<_i11.XFile>>);

  @override
  _i8.Future<_i11.XFile?> pickVideo({
    required _i11.ImageSource? source,
    _i11.CameraDevice? preferredCameraDevice = _i11.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickVideo,
          [],
          {
            #source: source,
            #preferredCameraDevice: preferredCameraDevice,
            #maxDuration: maxDuration,
          },
        ),
        returnValue: _i8.Future<_i11.XFile?>.value(),
        returnValueForMissingStub: _i8.Future<_i11.XFile?>.value(),
      ) as _i8.Future<_i11.XFile?>);

  @override
  _i8.Future<_i11.LostDataResponse> retrieveLostData() => (super.noSuchMethod(
        Invocation.method(
          #retrieveLostData,
          [],
        ),
        returnValue:
            _i8.Future<_i11.LostDataResponse>.value(_FakeLostDataResponse_38(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i11.LostDataResponse>.value(_FakeLostDataResponse_38(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
      ) as _i8.Future<_i11.LostDataResponse>);

  @override
  bool supportsImageSource(_i11.ImageSource? source) => (super.noSuchMethod(
        Invocation.method(
          #supportsImageSource,
          [source],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [Reference].
///
/// See the documentation for Mockito's code generation for more information.
class MockReference extends _i1.Mock implements _i10.Reference {
  @override
  _i10.FirebaseStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFirebaseStorage_39(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFirebaseStorage_39(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i10.FirebaseStorage);

  @override
  String get bucket => (super.noSuchMethod(
        Invocation.getter(#bucket),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#bucket),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#bucket),
        ),
      ) as String);

  @override
  String get fullPath => (super.noSuchMethod(
        Invocation.getter(#fullPath),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#fullPath),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#fullPath),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i10.Reference get root => (super.noSuchMethod(
        Invocation.getter(#root),
        returnValue: _FakeReference_37(
          this,
          Invocation.getter(#root),
        ),
        returnValueForMissingStub: _FakeReference_37(
          this,
          Invocation.getter(#root),
        ),
      ) as _i10.Reference);

  @override
  _i10.Reference child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeReference_37(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeReference_37(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i10.Reference);

  @override
  _i8.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> getDownloadURL() => (super.noSuchMethod(
        Invocation.method(
          #getDownloadURL,
          [],
        ),
        returnValue: _i8.Future<String>.value(_i28.dummyValue<String>(
          this,
          Invocation.method(
            #getDownloadURL,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i28.dummyValue<String>(
          this,
          Invocation.method(
            #getDownloadURL,
            [],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i12.FullMetadata> getMetadata() => (super.noSuchMethod(
        Invocation.method(
          #getMetadata,
          [],
        ),
        returnValue: _i8.Future<_i12.FullMetadata>.value(_FakeFullMetadata_40(
          this,
          Invocation.method(
            #getMetadata,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i12.FullMetadata>.value(_FakeFullMetadata_40(
          this,
          Invocation.method(
            #getMetadata,
            [],
          ),
        )),
      ) as _i8.Future<_i12.FullMetadata>);

  @override
  _i8.Future<_i10.ListResult> list([_i12.ListOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [options],
        ),
        returnValue: _i8.Future<_i10.ListResult>.value(_FakeListResult_41(
          this,
          Invocation.method(
            #list,
            [options],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i10.ListResult>.value(_FakeListResult_41(
          this,
          Invocation.method(
            #list,
            [options],
          ),
        )),
      ) as _i8.Future<_i10.ListResult>);

  @override
  _i8.Future<_i10.ListResult> listAll() => (super.noSuchMethod(
        Invocation.method(
          #listAll,
          [],
        ),
        returnValue: _i8.Future<_i10.ListResult>.value(_FakeListResult_41(
          this,
          Invocation.method(
            #listAll,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i10.ListResult>.value(_FakeListResult_41(
          this,
          Invocation.method(
            #listAll,
            [],
          ),
        )),
      ) as _i8.Future<_i10.ListResult>);

  @override
  _i8.Future<_i27.Uint8List?> getData([int? maxSize = 10485760]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getData,
          [maxSize],
        ),
        returnValue: _i8.Future<_i27.Uint8List?>.value(),
        returnValueForMissingStub: _i8.Future<_i27.Uint8List?>.value(),
      ) as _i8.Future<_i27.Uint8List?>);

  @override
  _i10.UploadTask putData(
    _i27.Uint8List? data, [
    _i12.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #putData,
          [
            data,
            metadata,
          ],
        ),
        returnValue: _FakeUploadTask_42(
          this,
          Invocation.method(
            #putData,
            [
              data,
              metadata,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_42(
          this,
          Invocation.method(
            #putData,
            [
              data,
              metadata,
            ],
          ),
        ),
      ) as _i10.UploadTask);

  @override
  _i10.UploadTask putBlob(
    dynamic blob, [
    _i12.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #putBlob,
          [
            blob,
            metadata,
          ],
        ),
        returnValue: _FakeUploadTask_42(
          this,
          Invocation.method(
            #putBlob,
            [
              blob,
              metadata,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_42(
          this,
          Invocation.method(
            #putBlob,
            [
              blob,
              metadata,
            ],
          ),
        ),
      ) as _i10.UploadTask);

  @override
  _i10.UploadTask putFile(
    _i13.File? file, [
    _i12.SettableMetadata? metadata,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #putFile,
          [
            file,
            metadata,
          ],
        ),
        returnValue: _FakeUploadTask_42(
          this,
          Invocation.method(
            #putFile,
            [
              file,
              metadata,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_42(
          this,
          Invocation.method(
            #putFile,
            [
              file,
              metadata,
            ],
          ),
        ),
      ) as _i10.UploadTask);

  @override
  _i10.UploadTask putString(
    String? data, {
    _i12.PutStringFormat? format = _i12.PutStringFormat.raw,
    _i12.SettableMetadata? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putString,
          [data],
          {
            #format: format,
            #metadata: metadata,
          },
        ),
        returnValue: _FakeUploadTask_42(
          this,
          Invocation.method(
            #putString,
            [data],
            {
              #format: format,
              #metadata: metadata,
            },
          ),
        ),
        returnValueForMissingStub: _FakeUploadTask_42(
          this,
          Invocation.method(
            #putString,
            [data],
            {
              #format: format,
              #metadata: metadata,
            },
          ),
        ),
      ) as _i10.UploadTask);

  @override
  _i8.Future<_i12.FullMetadata> updateMetadata(
          _i12.SettableMetadata? metadata) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMetadata,
          [metadata],
        ),
        returnValue: _i8.Future<_i12.FullMetadata>.value(_FakeFullMetadata_40(
          this,
          Invocation.method(
            #updateMetadata,
            [metadata],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i12.FullMetadata>.value(_FakeFullMetadata_40(
          this,
          Invocation.method(
            #updateMetadata,
            [metadata],
          ),
        )),
      ) as _i8.Future<_i12.FullMetadata>);

  @override
  _i10.DownloadTask writeToFile(_i13.File? file) => (super.noSuchMethod(
        Invocation.method(
          #writeToFile,
          [file],
        ),
        returnValue: _FakeDownloadTask_43(
          this,
          Invocation.method(
            #writeToFile,
            [file],
          ),
        ),
        returnValueForMissingStub: _FakeDownloadTask_43(
          this,
          Invocation.method(
            #writeToFile,
            [file],
          ),
        ),
      ) as _i10.DownloadTask);
}

/// A class which mocks [UploadTask].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadTask extends _i1.Mock implements _i10.UploadTask {
  @override
  _i10.FirebaseStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFirebaseStorage_39(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFirebaseStorage_39(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i10.FirebaseStorage);

  @override
  _i8.Stream<_i10.TaskSnapshot> get snapshotEvents => (super.noSuchMethod(
        Invocation.getter(#snapshotEvents),
        returnValue: _i8.Stream<_i10.TaskSnapshot>.empty(),
        returnValueForMissingStub: _i8.Stream<_i10.TaskSnapshot>.empty(),
      ) as _i8.Stream<_i10.TaskSnapshot>);

  @override
  _i10.TaskSnapshot get snapshot => (super.noSuchMethod(
        Invocation.getter(#snapshot),
        returnValue: _FakeTaskSnapshot_44(
          this,
          Invocation.getter(#snapshot),
        ),
        returnValueForMissingStub: _FakeTaskSnapshot_44(
          this,
          Invocation.getter(#snapshot),
        ),
      ) as _i10.TaskSnapshot);

  @override
  _i8.Future<bool> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Stream<_i10.TaskSnapshot> asStream() => (super.noSuchMethod(
        Invocation.method(
          #asStream,
          [],
        ),
        returnValue: _i8.Stream<_i10.TaskSnapshot>.empty(),
        returnValueForMissingStub: _i8.Stream<_i10.TaskSnapshot>.empty(),
      ) as _i8.Stream<_i10.TaskSnapshot>);

  @override
  _i8.Future<_i10.TaskSnapshot> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchError,
          [onError],
          {#test: test},
        ),
        returnValue: _i8.Future<_i10.TaskSnapshot>.value(_FakeTaskSnapshot_44(
          this,
          Invocation.method(
            #catchError,
            [onError],
            {#test: test},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i10.TaskSnapshot>.value(_FakeTaskSnapshot_44(
          this,
          Invocation.method(
            #catchError,
            [onError],
            {#test: test},
          ),
        )),
      ) as _i8.Future<_i10.TaskSnapshot>);

  @override
  _i8.Future<S> then<S>(
    _i8.FutureOr<S> Function(_i10.TaskSnapshot)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #then,
          [onValue],
          {#onError: onError},
        ),
        returnValue: _i28.ifNotNull(
              _i28.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #then,
                  [onValue],
                  {#onError: onError},
                ),
              ),
              (S v) => _i8.Future<S>.value(v),
            ) ??
            _FakeFuture_20<S>(
              this,
              Invocation.method(
                #then,
                [onValue],
                {#onError: onError},
              ),
            ),
        returnValueForMissingStub: _i28.ifNotNull(
              _i28.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #then,
                  [onValue],
                  {#onError: onError},
                ),
              ),
              (S v) => _i8.Future<S>.value(v),
            ) ??
            _FakeFuture_20<S>(
              this,
              Invocation.method(
                #then,
                [onValue],
                {#onError: onError},
              ),
            ),
      ) as _i8.Future<S>);

  @override
  _i8.Future<_i10.TaskSnapshot> whenComplete(
          _i8.FutureOr<dynamic> Function()? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #whenComplete,
          [action],
        ),
        returnValue: _i8.Future<_i10.TaskSnapshot>.value(_FakeTaskSnapshot_44(
          this,
          Invocation.method(
            #whenComplete,
            [action],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i10.TaskSnapshot>.value(_FakeTaskSnapshot_44(
          this,
          Invocation.method(
            #whenComplete,
            [action],
          ),
        )),
      ) as _i8.Future<_i10.TaskSnapshot>);

  @override
  _i8.Future<_i10.TaskSnapshot> timeout(
    Duration? timeLimit, {
    _i8.FutureOr<_i10.TaskSnapshot> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i8.Future<_i10.TaskSnapshot>.value(_FakeTaskSnapshot_44(
          this,
          Invocation.method(
            #timeout,
            [timeLimit],
            {#onTimeout: onTimeout},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i10.TaskSnapshot>.value(_FakeTaskSnapshot_44(
          this,
          Invocation.method(
            #timeout,
            [timeLimit],
            {#onTimeout: onTimeout},
          ),
        )),
      ) as _i8.Future<_i10.TaskSnapshot>);
}

/// A class which mocks [TaskSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskSnapshot extends _i1.Mock implements _i10.TaskSnapshot {
  @override
  _i10.FirebaseStorage get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeFirebaseStorage_39(
          this,
          Invocation.getter(#storage),
        ),
        returnValueForMissingStub: _FakeFirebaseStorage_39(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i10.FirebaseStorage);

  @override
  int get bytesTransferred => (super.noSuchMethod(
        Invocation.getter(#bytesTransferred),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i10.Reference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeReference_37(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeReference_37(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i10.Reference);

  @override
  _i12.TaskState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i12.TaskState.paused,
        returnValueForMissingStub: _i12.TaskState.paused,
      ) as _i12.TaskState);

  @override
  int get totalBytes => (super.noSuchMethod(
        Invocation.getter(#totalBytes),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [XFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockXFile extends _i1.Mock implements _i11.XFile {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i8.Future<void> saveTo(String? path) => (super.noSuchMethod(
        Invocation.method(
          #saveTo,
          [path],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<String> readAsString(
          {_i15.Encoding? encoding = const _i15.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i8.Future<String>.value(_i28.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i28.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i27.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i8.Future<_i27.Uint8List>.value(_i27.Uint8List(0)),
        returnValueForMissingStub:
            _i8.Future<_i27.Uint8List>.value(_i27.Uint8List(0)),
      ) as _i8.Future<_i27.Uint8List>);

  @override
  _i8.Stream<_i27.Uint8List> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i8.Stream<_i27.Uint8List>.empty(),
        returnValueForMissingStub: _i8.Stream<_i27.Uint8List>.empty(),
      ) as _i8.Stream<_i27.Uint8List>);

  @override
  _i8.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i8.Future<DateTime>.value(_FakeDateTime_45(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
        returnValueForMissingStub: _i8.Future<DateTime>.value(_FakeDateTime_45(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i8.Future<DateTime>);
}

/// A class which mocks [IDiscountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDiscountRepository extends _i1.Mock
    implements _i3.IDiscountRepository {
  @override
  _i8.Stream<List<_i3.DiscountModel>> getDiscountItems() => (super.noSuchMethod(
        Invocation.method(
          #getDiscountItems,
          [],
        ),
        returnValue: _i8.Stream<List<_i3.DiscountModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.DiscountModel>>.empty(),
      ) as _i8.Stream<List<_i3.DiscountModel>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.DiscountModel>> getDiscount(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDiscount,
          [id],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.DiscountModel>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.DiscountModel>(
          this,
          Invocation.method(
            #getDiscount,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.DiscountModel>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.DiscountModel>(
          this,
          Invocation.method(
            #getDiscount,
            [id],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.DiscountModel>>);

  @override
  _i8.Future<
      _i2.Either<_i3.SomeFailure, _i3.DiscountModel>> getCompanyDiscount({
    required String? id,
    required String? companyId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompanyDiscount,
          [],
          {
            #id: id,
            #companyId: companyId,
          },
        ),
        returnValue:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.DiscountModel>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.DiscountModel>(
          this,
          Invocation.method(
            #getCompanyDiscount,
            [],
            {
              #id: id,
              #companyId: companyId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.DiscountModel>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.DiscountModel>(
          this,
          Invocation.method(
            #getCompanyDiscount,
            [],
            {
              #id: id,
              #companyId: companyId,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.DiscountModel>>);

  @override
  _i8.Future<bool> companyHasDiscount(String? companyId) => (super.noSuchMethod(
        Invocation.method(
          #companyHasDiscount,
          [companyId],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  void addMockDiscountItems() => super.noSuchMethod(
        Invocation.method(
          #addMockDiscountItems,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Stream<List<_i3.DiscountModel>> getDiscountsByCompanyId(
          String? companyId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDiscountsByCompanyId,
          [companyId],
        ),
        returnValue: _i8.Stream<List<_i3.DiscountModel>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<_i3.DiscountModel>>.empty(),
      ) as _i8.Stream<List<_i3.DiscountModel>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> deleteDiscountsById(
          String? discountId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDiscountsById,
          [discountId],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteDiscountsById,
            [discountId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteDiscountsById,
            [discountId],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendLink(
          _i3.LinkModel? discountLink) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendLink,
          [discountLink],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendLink,
            [discountLink],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendLink,
            [discountLink],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> userCanSendLink(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #userCanSendLink,
          [userId],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #userCanSendLink,
            [userId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #userCanSendLink,
            [userId],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendEmail(
          _i3.EmailModel? userEmail) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEmail,
          [userEmail],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendEmail,
            [userEmail],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendEmail,
            [userEmail],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, int>> userCanSendUserEmail(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #userCanSendUserEmail,
          [userId],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, int>>.value(
            _FakeEither_0<_i3.SomeFailure, int>(
          this,
          Invocation.method(
            #userCanSendUserEmail,
            [userId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, int>>.value(
                _FakeEither_0<_i3.SomeFailure, int>(
          this,
          Invocation.method(
            #userCanSendUserEmail,
            [userId],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, int>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> addDiscount(
          _i3.DiscountModel? discount) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDiscount,
          [discount],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #addDiscount,
            [discount],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #addDiscount,
            [discount],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> deactivateDiscount(
          {required _i3.DiscountModel? discountModel}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deactivateDiscount,
          [],
          {#discountModel: discountModel},
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deactivateDiscount,
            [],
            {#discountModel: discountModel},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deactivateDiscount,
            [],
            {#discountModel: discountModel},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);
}

/// A class which mocks [Query].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockQuery<T extends Object?> extends _i1.Mock implements _i7.Query<T> {
  @override
  _i7.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_32(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_32(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i7.FirebaseFirestore);

  @override
  Map<String, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i7.Query<T> endAtDocument(_i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> endAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [values],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endAt,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> endBeforeDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBeforeDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endBeforeDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> endBefore(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [values],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #endBefore,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i8.Future<_i7.QuerySnapshot<T>> get([_i7.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_17<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i7.QuerySnapshot<T>>.value(_FakeQuerySnapshot_17<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i8.Future<_i7.QuerySnapshot<T>>);

  @override
  _i7.Query<T> limit(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limit,
          [limit],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #limit,
            [limit],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i8.Stream<_i7.QuerySnapshot<T>> snapshots({
    bool? includeMetadataChanges = false,
    _i7.ListenSource? source = _i7.ListenSource.defaultSource,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {
            #includeMetadataChanges: includeMetadataChanges,
            #source: source,
          },
        ),
        returnValue: _i8.Stream<_i7.QuerySnapshot<T>>.empty(),
        returnValueForMissingStub: _i8.Stream<_i7.QuerySnapshot<T>>.empty(),
      ) as _i8.Stream<_i7.QuerySnapshot<T>>);

  @override
  _i7.Query<T> orderBy(
    Object? field, {
    bool? descending = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #orderBy,
          [field],
          {#descending: descending},
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #orderBy,
            [field],
            {#descending: descending},
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAfterDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfterDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAfterDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAfter(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [values],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAfter,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAtDocument(
          _i7.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAtDocument,
          [documentSnapshot],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAtDocument,
            [documentSnapshot],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> startAt(Iterable<Object?>? values) => (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [values],
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #startAt,
            [values],
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<T> where(
    Object? field, {
    Object? isEqualTo,
    Object? isNotEqualTo,
    Object? isLessThan,
    Object? isLessThanOrEqualTo,
    Object? isGreaterThan,
    Object? isGreaterThanOrEqualTo,
    Object? arrayContains,
    Iterable<Object?>? arrayContainsAny,
    Iterable<Object?>? whereIn,
    Iterable<Object?>? whereNotIn,
    bool? isNull,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [field],
          {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull,
          },
        ),
        returnValue: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<T>(
          this,
          Invocation.method(
            #where,
            [field],
            {
              #isEqualTo: isEqualTo,
              #isNotEqualTo: isNotEqualTo,
              #isLessThan: isLessThan,
              #isLessThanOrEqualTo: isLessThanOrEqualTo,
              #isGreaterThan: isGreaterThan,
              #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
              #arrayContains: arrayContains,
              #arrayContainsAny: arrayContainsAny,
              #whereIn: whereIn,
              #whereNotIn: whereNotIn,
              #isNull: isNull,
            },
          ),
        ),
      ) as _i7.Query<T>);

  @override
  _i7.Query<R> withConverter<R>({
    required _i7.FromFirestore<R>? fromFirestore,
    required _i7.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeQuery_18<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
        returnValueForMissingStub: _FakeQuery_18<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i7.Query<R>);

  @override
  _i7.AggregateQuery count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: _FakeAggregateQuery_33(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeAggregateQuery_33(
          this,
          Invocation.method(
            #count,
            [],
          ),
        ),
      ) as _i7.AggregateQuery);

  @override
  _i7.AggregateQuery aggregate(
    _i7.AggregateField? aggregateField1, [
    _i7.AggregateField? aggregateField2,
    _i7.AggregateField? aggregateField3,
    _i7.AggregateField? aggregateField4,
    _i7.AggregateField? aggregateField5,
    _i7.AggregateField? aggregateField6,
    _i7.AggregateField? aggregateField7,
    _i7.AggregateField? aggregateField8,
    _i7.AggregateField? aggregateField9,
    _i7.AggregateField? aggregateField10,
    _i7.AggregateField? aggregateField11,
    _i7.AggregateField? aggregateField12,
    _i7.AggregateField? aggregateField13,
    _i7.AggregateField? aggregateField14,
    _i7.AggregateField? aggregateField15,
    _i7.AggregateField? aggregateField16,
    _i7.AggregateField? aggregateField17,
    _i7.AggregateField? aggregateField18,
    _i7.AggregateField? aggregateField19,
    _i7.AggregateField? aggregateField20,
    _i7.AggregateField? aggregateField21,
    _i7.AggregateField? aggregateField22,
    _i7.AggregateField? aggregateField23,
    _i7.AggregateField? aggregateField24,
    _i7.AggregateField? aggregateField25,
    _i7.AggregateField? aggregateField26,
    _i7.AggregateField? aggregateField27,
    _i7.AggregateField? aggregateField28,
    _i7.AggregateField? aggregateField29,
    _i7.AggregateField? aggregateField30,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #aggregate,
          [
            aggregateField1,
            aggregateField2,
            aggregateField3,
            aggregateField4,
            aggregateField5,
            aggregateField6,
            aggregateField7,
            aggregateField8,
            aggregateField9,
            aggregateField10,
            aggregateField11,
            aggregateField12,
            aggregateField13,
            aggregateField14,
            aggregateField15,
            aggregateField16,
            aggregateField17,
            aggregateField18,
            aggregateField19,
            aggregateField20,
            aggregateField21,
            aggregateField22,
            aggregateField23,
            aggregateField24,
            aggregateField25,
            aggregateField26,
            aggregateField27,
            aggregateField28,
            aggregateField29,
            aggregateField30,
          ],
        ),
        returnValue: _FakeAggregateQuery_33(
          this,
          Invocation.method(
            #aggregate,
            [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeAggregateQuery_33(
          this,
          Invocation.method(
            #aggregate,
            [
              aggregateField1,
              aggregateField2,
              aggregateField3,
              aggregateField4,
              aggregateField5,
              aggregateField6,
              aggregateField7,
              aggregateField8,
              aggregateField9,
              aggregateField10,
              aggregateField11,
              aggregateField12,
              aggregateField13,
              aggregateField14,
              aggregateField15,
              aggregateField16,
              aggregateField17,
              aggregateField18,
              aggregateField19,
              aggregateField20,
              aggregateField21,
              aggregateField22,
              aggregateField23,
              aggregateField24,
              aggregateField25,
              aggregateField26,
              aggregateField27,
              aggregateField28,
              aggregateField29,
              aggregateField30,
            ],
          ),
        ),
      ) as _i7.AggregateQuery);
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i13.HttpClient {
  @override
  Duration get idleTimeout => (super.noSuchMethod(
        Invocation.getter(#idleTimeout),
        returnValue: _FakeDuration_36(
          this,
          Invocation.getter(#idleTimeout),
        ),
        returnValueForMissingStub: _FakeDuration_36(
          this,
          Invocation.getter(#idleTimeout),
        ),
      ) as Duration);

  @override
  set idleTimeout(Duration? _idleTimeout) => super.noSuchMethod(
        Invocation.setter(
          #idleTimeout,
          _idleTimeout,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set connectionTimeout(Duration? _connectionTimeout) => super.noSuchMethod(
        Invocation.setter(
          #connectionTimeout,
          _connectionTimeout,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set maxConnectionsPerHost(int? _maxConnectionsPerHost) => super.noSuchMethod(
        Invocation.setter(
          #maxConnectionsPerHost,
          _maxConnectionsPerHost,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get autoUncompress => (super.noSuchMethod(
        Invocation.getter(#autoUncompress),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set autoUncompress(bool? _autoUncompress) => super.noSuchMethod(
        Invocation.setter(
          #autoUncompress,
          _autoUncompress,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set userAgent(String? _userAgent) => super.noSuchMethod(
        Invocation.setter(
          #userAgent,
          _userAgent,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set authenticate(
          _i8.Future<bool> Function(
            Uri,
            String,
            String?,
          )? f) =>
      super.noSuchMethod(
        Invocation.setter(
          #authenticate,
          f,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set connectionFactory(
          _i8.Future<_i13.ConnectionTask<_i13.Socket>> Function(
            Uri,
            String?,
            int?,
          )? f) =>
      super.noSuchMethod(
        Invocation.setter(
          #connectionFactory,
          f,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set findProxy(String Function(Uri)? f) => super.noSuchMethod(
        Invocation.setter(
          #findProxy,
          f,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set authenticateProxy(
          _i8.Future<bool> Function(
            String,
            int,
            String,
            String?,
          )? f) =>
      super.noSuchMethod(
        Invocation.setter(
          #authenticateProxy,
          f,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set badCertificateCallback(
          bool Function(
            _i13.X509Certificate,
            String,
            int,
          )? callback) =>
      super.noSuchMethod(
        Invocation.setter(
          #badCertificateCallback,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set keyLog(dynamic Function(String)? callback) => super.noSuchMethod(
        Invocation.setter(
          #keyLog,
          callback,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i13.HttpClientRequest> open(
    String? method,
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [
            method,
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #open,
            [
              method,
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #open,
            [
              method,
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> openUrl(
    String? method,
    Uri? url,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #openUrl,
          [
            method,
            url,
          ],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #openUrl,
            [
              method,
              url,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #openUrl,
            [
              method,
              url,
            ],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> get(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #get,
            [
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #get,
            [
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> getUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #getUrl,
          [url],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #getUrl,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #getUrl,
            [url],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> post(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #post,
            [
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #post,
            [
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> postUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #postUrl,
          [url],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #postUrl,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #postUrl,
            [url],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> put(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #put,
            [
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #put,
            [
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> putUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #putUrl,
          [url],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #putUrl,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #putUrl,
            [url],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> delete(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #delete,
            [
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #delete,
            [
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> deleteUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #deleteUrl,
          [url],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #deleteUrl,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #deleteUrl,
            [url],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> patch(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #patch,
            [
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #patch,
            [
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> patchUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #patchUrl,
          [url],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #patchUrl,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #patchUrl,
            [url],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> head(
    String? host,
    int? port,
    String? path,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [
            host,
            port,
            path,
          ],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #head,
            [
              host,
              port,
              path,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #head,
            [
              host,
              port,
              path,
            ],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  _i8.Future<_i13.HttpClientRequest> headUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #headUrl,
          [url],
        ),
        returnValue:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #headUrl,
            [url],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i13.HttpClientRequest>.value(_FakeHttpClientRequest_46(
          this,
          Invocation.method(
            #headUrl,
            [url],
          ),
        )),
      ) as _i8.Future<_i13.HttpClientRequest>);

  @override
  void addCredentials(
    Uri? url,
    String? realm,
    _i13.HttpClientCredentials? credentials,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addCredentials,
          [
            url,
            realm,
            credentials,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addProxyCredentials(
    String? host,
    int? port,
    String? realm,
    _i13.HttpClientCredentials? credentials,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addProxyCredentials,
          [
            host,
            port,
            realm,
            credentials,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HttpClientRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientRequest extends _i1.Mock implements _i13.HttpClientRequest {
  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
        Invocation.setter(
          #persistentConnection,
          _persistentConnection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get followRedirects => (super.noSuchMethod(
        Invocation.getter(#followRedirects),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set followRedirects(bool? _followRedirects) => super.noSuchMethod(
        Invocation.setter(
          #followRedirects,
          _followRedirects,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get maxRedirects => (super.noSuchMethod(
        Invocation.getter(#maxRedirects),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set maxRedirects(int? _maxRedirects) => super.noSuchMethod(
        Invocation.setter(
          #maxRedirects,
          _maxRedirects,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set contentLength(int? _contentLength) => super.noSuchMethod(
        Invocation.setter(
          #contentLength,
          _contentLength,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get bufferOutput => (super.noSuchMethod(
        Invocation.getter(#bufferOutput),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set bufferOutput(bool? _bufferOutput) => super.noSuchMethod(
        Invocation.setter(
          #bufferOutput,
          _bufferOutput,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get method => (super.noSuchMethod(
        Invocation.getter(#method),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_47(
          this,
          Invocation.getter(#uri),
        ),
        returnValueForMissingStub: _FakeUri_47(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  _i13.HttpHeaders get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHttpHeaders_48(
          this,
          Invocation.getter(#headers),
        ),
        returnValueForMissingStub: _FakeHttpHeaders_48(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i13.HttpHeaders);

  @override
  List<_i13.Cookie> get cookies => (super.noSuchMethod(
        Invocation.getter(#cookies),
        returnValue: <_i13.Cookie>[],
        returnValueForMissingStub: <_i13.Cookie>[],
      ) as List<_i13.Cookie>);

  @override
  _i8.Future<_i14.HttpClientResponse> get done => (super.noSuchMethod(
        Invocation.getter(#done),
        returnValue: _i8.Future<_i14.HttpClientResponse>.value(
            _FakeHttpClientResponse_49(
          this,
          Invocation.getter(#done),
        )),
        returnValueForMissingStub: _i8.Future<_i14.HttpClientResponse>.value(
            _FakeHttpClientResponse_49(
          this,
          Invocation.getter(#done),
        )),
      ) as _i8.Future<_i14.HttpClientResponse>);

  @override
  _i15.Encoding get encoding => (super.noSuchMethod(
        Invocation.getter(#encoding),
        returnValue: _FakeEncoding_50(
          this,
          Invocation.getter(#encoding),
        ),
        returnValueForMissingStub: _FakeEncoding_50(
          this,
          Invocation.getter(#encoding),
        ),
      ) as _i15.Encoding);

  @override
  set encoding(_i15.Encoding? _encoding) => super.noSuchMethod(
        Invocation.setter(
          #encoding,
          _encoding,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i14.HttpClientResponse> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<_i14.HttpClientResponse>.value(
            _FakeHttpClientResponse_49(
          this,
          Invocation.method(
            #close,
            [],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i14.HttpClientResponse>.value(
            _FakeHttpClientResponse_49(
          this,
          Invocation.method(
            #close,
            [],
          ),
        )),
      ) as _i8.Future<_i14.HttpClientResponse>);

  @override
  void abort([
    Object? exception,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #abort,
          [
            exception,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void add(List<int>? data) => super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void write(Object? object) => super.noSuchMethod(
        Invocation.method(
          #write,
          [object],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeAll(
    Iterable<dynamic>? objects, [
    String? separator = r'',
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAll,
          [
            objects,
            separator,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeln([Object? object = r'']) => super.noSuchMethod(
        Invocation.method(
          #writeln,
          [object],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeCharCode(int? charCode) => super.noSuchMethod(
        Invocation.method(
          #writeCharCode,
          [charCode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<dynamic> addStream(_i8.Stream<List<int>>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStream,
          [stream],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);

  @override
  _i8.Future<dynamic> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
}

/// A class which mocks [HttpClientResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientResponse extends _i1.Mock
    implements _i14.HttpClientResponse {
  @override
  int get statusCode => (super.noSuchMethod(
        Invocation.getter(#statusCode),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get reasonPhrase => (super.noSuchMethod(
        Invocation.getter(#reasonPhrase),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#reasonPhrase),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#reasonPhrase),
        ),
      ) as String);

  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i13.HttpClientResponseCompressionState get compressionState =>
      (super.noSuchMethod(
        Invocation.getter(#compressionState),
        returnValue: _i13.HttpClientResponseCompressionState.notCompressed,
        returnValueForMissingStub:
            _i13.HttpClientResponseCompressionState.notCompressed,
      ) as _i13.HttpClientResponseCompressionState);

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isRedirect => (super.noSuchMethod(
        Invocation.getter(#isRedirect),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<_i13.RedirectInfo> get redirects => (super.noSuchMethod(
        Invocation.getter(#redirects),
        returnValue: <_i13.RedirectInfo>[],
        returnValueForMissingStub: <_i13.RedirectInfo>[],
      ) as List<_i13.RedirectInfo>);

  @override
  _i13.HttpHeaders get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHttpHeaders_48(
          this,
          Invocation.getter(#headers),
        ),
        returnValueForMissingStub: _FakeHttpHeaders_48(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i13.HttpHeaders);

  @override
  List<_i13.Cookie> get cookies => (super.noSuchMethod(
        Invocation.getter(#cookies),
        returnValue: <_i13.Cookie>[],
        returnValueForMissingStub: <_i13.Cookie>[],
      ) as List<_i13.Cookie>);

  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<List<int>> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);

  @override
  _i8.Future<List<int>> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);

  @override
  _i8.Future<List<int>> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);

  @override
  _i8.Future<_i14.HttpClientResponse> redirect([
    String? method,
    Uri? url,
    bool? followLoops,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #redirect,
          [
            method,
            url,
            followLoops,
          ],
        ),
        returnValue: _i8.Future<_i14.HttpClientResponse>.value(
            _FakeHttpClientResponse_49(
          this,
          Invocation.method(
            #redirect,
            [
              method,
              url,
              followLoops,
            ],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i14.HttpClientResponse>.value(
            _FakeHttpClientResponse_49(
          this,
          Invocation.method(
            #redirect,
            [
              method,
              url,
              followLoops,
            ],
          ),
        )),
      ) as _i8.Future<_i14.HttpClientResponse>);

  @override
  _i8.Future<_i13.Socket> detachSocket() => (super.noSuchMethod(
        Invocation.method(
          #detachSocket,
          [],
        ),
        returnValue: _i8.Future<_i13.Socket>.value(_FakeSocket_51(
          this,
          Invocation.method(
            #detachSocket,
            [],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i13.Socket>.value(_FakeSocket_51(
          this,
          Invocation.method(
            #detachSocket,
            [],
          ),
        )),
      ) as _i8.Future<_i13.Socket>);

  @override
  _i8.Stream<List<int>> asBroadcastStream({
    void Function(_i8.StreamSubscription<List<int>>)? onListen,
    void Function(_i8.StreamSubscription<List<int>>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i8.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<int>>.empty(),
      ) as _i8.Stream<List<int>>);

  @override
  _i8.StreamSubscription<List<int>> listen(
    void Function(List<int>)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_52<List<int>>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
        returnValueForMissingStub: _FakeStreamSubscription_52<List<int>>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i8.StreamSubscription<List<int>>);

  @override
  _i8.Stream<List<int>> where(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i8.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<int>>.empty(),
      ) as _i8.Stream<List<int>>);

  @override
  _i8.Stream<S> map<S>(S Function(List<int>)? convert) => (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i8.Stream<S>.empty(),
        returnValueForMissingStub: _i8.Stream<S>.empty(),
      ) as _i8.Stream<S>);

  @override
  _i8.Stream<E> asyncMap<E>(_i8.FutureOr<E> Function(List<int>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i8.Stream<E>.empty(),
        returnValueForMissingStub: _i8.Stream<E>.empty(),
      ) as _i8.Stream<E>);

  @override
  _i8.Stream<E> asyncExpand<E>(_i8.Stream<E>? Function(List<int>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i8.Stream<E>.empty(),
        returnValueForMissingStub: _i8.Stream<E>.empty(),
      ) as _i8.Stream<E>);

  @override
  _i8.Stream<List<int>> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i8.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<int>>.empty(),
      ) as _i8.Stream<List<int>>);

  @override
  _i8.Stream<S> expand<S>(Iterable<S> Function(List<int>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i8.Stream<S>.empty(),
        returnValueForMissingStub: _i8.Stream<S>.empty(),
      ) as _i8.Stream<S>);

  @override
  _i8.Future<dynamic> pipe(_i8.StreamConsumer<List<int>>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);

  @override
  _i8.Stream<S> transform<S>(
          _i8.StreamTransformer<List<int>, S>? streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i8.Stream<S>.empty(),
        returnValueForMissingStub: _i8.Stream<S>.empty(),
      ) as _i8.Stream<S>);

  @override
  _i8.Future<List<int>> reduce(
          List<int> Function(
            List<int>,
            List<int>,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);

  @override
  _i8.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      List<int>,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i28.ifNotNull(
              _i28.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i8.Future<S>.value(v),
            ) ??
            _FakeFuture_20<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
        returnValueForMissingStub: _i28.ifNotNull(
              _i28.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i8.Future<S>.value(v),
            ) ??
            _FakeFuture_20<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
      ) as _i8.Future<S>);

  @override
  _i8.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i8.Future<String>.value(_i28.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i28.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> forEach(void Function(List<int>)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> every(bool Function(List<int>)? test) => (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<bool> any(bool Function(List<int>)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i8.Stream<R>.empty(),
        returnValueForMissingStub: _i8.Stream<R>.empty(),
      ) as _i8.Stream<R>);

  @override
  _i8.Future<List<List<int>>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue: _i8.Future<List<List<int>>>.value(<List<int>>[]),
        returnValueForMissingStub:
            _i8.Future<List<List<int>>>.value(<List<int>>[]),
      ) as _i8.Future<List<List<int>>>);

  @override
  _i8.Future<Set<List<int>>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: _i8.Future<Set<List<int>>>.value(<List<int>>{}),
        returnValueForMissingStub:
            _i8.Future<Set<List<int>>>.value(<List<int>>{}),
      ) as _i8.Future<Set<List<int>>>);

  @override
  _i8.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _i28.ifNotNull(
              _i28.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i8.Future<E>.value(v),
            ) ??
            _FakeFuture_20<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
        returnValueForMissingStub: _i28.ifNotNull(
              _i28.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i8.Future<E>.value(v),
            ) ??
            _FakeFuture_20<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
      ) as _i8.Future<E>);

  @override
  _i8.Stream<List<int>> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i8.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<int>>.empty(),
      ) as _i8.Stream<List<int>>);

  @override
  _i8.Stream<List<int>> takeWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i8.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<int>>.empty(),
      ) as _i8.Stream<List<int>>);

  @override
  _i8.Stream<List<int>> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i8.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<int>>.empty(),
      ) as _i8.Stream<List<int>>);

  @override
  _i8.Stream<List<int>> skipWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i8.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<int>>.empty(),
      ) as _i8.Stream<List<int>>);

  @override
  _i8.Stream<List<int>> distinct(
          [bool Function(
            List<int>,
            List<int>,
          )? equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i8.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<int>>.empty(),
      ) as _i8.Stream<List<int>>);

  @override
  _i8.Future<List<int>> firstWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);

  @override
  _i8.Future<List<int>> lastWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);

  @override
  _i8.Future<List<int>> singleWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);

  @override
  _i8.Future<List<int>> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i8.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i8.Future<List<int>>.value(<int>[]),
      ) as _i8.Future<List<int>>);

  @override
  _i8.Stream<List<int>> timeout(
    Duration? timeLimit, {
    void Function(_i8.EventSink<List<int>>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i8.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i8.Stream<List<int>>.empty(),
      ) as _i8.Stream<List<int>>);
}

/// A class which mocks [HttpHeaders].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpHeaders extends _i1.Mock implements _i13.HttpHeaders {
  @override
  set date(DateTime? _date) => super.noSuchMethod(
        Invocation.setter(
          #date,
          _date,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set expires(DateTime? _expires) => super.noSuchMethod(
        Invocation.setter(
          #expires,
          _expires,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set ifModifiedSince(DateTime? _ifModifiedSince) => super.noSuchMethod(
        Invocation.setter(
          #ifModifiedSince,
          _ifModifiedSince,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set host(String? _host) => super.noSuchMethod(
        Invocation.setter(
          #host,
          _host,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set port(int? _port) => super.noSuchMethod(
        Invocation.setter(
          #port,
          _port,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set contentType(_i13.ContentType? _contentType) => super.noSuchMethod(
        Invocation.setter(
          #contentType,
          _contentType,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set contentLength(int? _contentLength) => super.noSuchMethod(
        Invocation.setter(
          #contentLength,
          _contentLength,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
        Invocation.setter(
          #persistentConnection,
          _persistentConnection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get chunkedTransferEncoding => (super.noSuchMethod(
        Invocation.getter(#chunkedTransferEncoding),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set chunkedTransferEncoding(bool? _chunkedTransferEncoding) =>
      super.noSuchMethod(
        Invocation.setter(
          #chunkedTransferEncoding,
          _chunkedTransferEncoding,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String>? operator [](String? name) => (super.noSuchMethod(
        Invocation.method(
          #[],
          [name],
        ),
        returnValueForMissingStub: null,
      ) as List<String>?);

  @override
  String? value(String? name) => (super.noSuchMethod(
        Invocation.method(
          #value,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as String?);

  @override
  void add(
    String? name,
    Object? value, {
    bool? preserveHeaderCase = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #add,
          [
            name,
            value,
          ],
          {#preserveHeaderCase: preserveHeaderCase},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void set(
    String? name,
    Object? value, {
    bool? preserveHeaderCase = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #set,
          [
            name,
            value,
          ],
          {#preserveHeaderCase: preserveHeaderCase},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void remove(
    String? name,
    Object? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #remove,
          [
            name,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAll(String? name) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void forEach(
          void Function(
            String,
            List<String>,
          )? action) =>
      super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void noFolding(String? name) => super.noSuchMethod(
        Invocation.method(
          #noFolding,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IReportRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIReportRepository extends _i1.Mock implements _i3.IReportRepository {
  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> sendReport(
          _i3.ReportModel? report) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendReport,
          [report],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendReport,
            [report],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #sendReport,
            [report],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<
      _i2.Either<_i3.SomeFailure, List<_i3.ReportModel>>> getCardReportById({
    required _i3.CardEnum? cardEnum,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCardReportById,
          [],
          {
            #cardEnum: cardEnum,
            #userId: userId,
          },
        ),
        returnValue: _i8
            .Future<_i2.Either<_i3.SomeFailure, List<_i3.ReportModel>>>.value(
            _FakeEither_0<_i3.SomeFailure, List<_i3.ReportModel>>(
          this,
          Invocation.method(
            #getCardReportById,
            [],
            {
              #cardEnum: cardEnum,
              #userId: userId,
            },
          ),
        )),
        returnValueForMissingStub: _i8
            .Future<_i2.Either<_i3.SomeFailure, List<_i3.ReportModel>>>.value(
            _FakeEither_0<_i3.SomeFailure, List<_i3.ReportModel>>(
          this,
          Invocation.method(
            #getCardReportById,
            [],
            {
              #cardEnum: cardEnum,
              #userId: userId,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.ReportModel>>>);
}

/// A class which mocks [IUrlRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUrlRepository extends _i1.Mock implements _i3.IUrlRepository {
  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> share(
    String? url, {
    bool? useSiteUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #share,
          [url],
          {#useSiteUrl: useSiteUrl},
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #share,
            [url],
            {#useSiteUrl: useSiteUrl},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #share,
            [url],
            {#useSiteUrl: useSiteUrl},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> launchUrl({
    required String? url,
    String? scheme,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #launchUrl,
          [],
          {
            #url: url,
            #scheme: scheme,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #launchUrl,
            [],
            {
              #url: url,
              #scheme: scheme,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #launchUrl,
            [],
            {
              #url: url,
              #scheme: scheme,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> copy(String? text) =>
      (super.noSuchMethod(
        Invocation.method(
          #copy,
          [text],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #copy,
            [text],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #copy,
            [text],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);
}

/// A class which mocks [NetworkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkRepository extends _i1.Mock implements _i3.NetworkRepository {
  @override
  _i3.IAppNetworkRepository get appNetworkRepository => (super.noSuchMethod(
        Invocation.getter(#appNetworkRepository),
        returnValue: _FakeIAppNetworkRepository_53(
          this,
          Invocation.getter(#appNetworkRepository),
        ),
        returnValueForMissingStub: _FakeIAppNetworkRepository_53(
          this,
          Invocation.getter(#appNetworkRepository),
        ),
      ) as _i3.IAppNetworkRepository);

  @override
  _i8.Stream<_i3.NetworkStatus> get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i8.Stream<_i3.NetworkStatus>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.NetworkStatus>.empty(),
      ) as _i8.Stream<_i3.NetworkStatus>);

  @override
  _i3.NetworkStatus get currentNetwork => (super.noSuchMethod(
        Invocation.getter(#currentNetwork),
        returnValue: _i3.NetworkStatus.network,
        returnValueForMissingStub: _i3.NetworkStatus.network,
      ) as _i3.NetworkStatus);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IAppNetworkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAppNetworkRepository extends _i1.Mock
    implements _i3.IAppNetworkRepository {
  @override
  _i8.Stream<List<_i30.ConnectivityResult>> get connectivityResults =>
      (super.noSuchMethod(
        Invocation.getter(#connectivityResults),
        returnValue: _i8.Stream<List<_i30.ConnectivityResult>>.empty(),
        returnValueForMissingStub:
            _i8.Stream<List<_i30.ConnectivityResult>>.empty(),
      ) as _i8.Stream<List<_i30.ConnectivityResult>>);

  @override
  List<_i30.ConnectivityResult> get currentConnectivityResults =>
      (super.noSuchMethod(
        Invocation.getter(#currentConnectivityResults),
        returnValue: <_i30.ConnectivityResult>[],
        returnValueForMissingStub: <_i30.ConnectivityResult>[],
      ) as List<_i30.ConnectivityResult>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i30.Connectivity {
  @override
  _i8.Stream<List<_i30.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i8.Stream<List<_i30.ConnectivityResult>>.empty(),
        returnValueForMissingStub:
            _i8.Stream<List<_i30.ConnectivityResult>>.empty(),
      ) as _i8.Stream<List<_i30.ConnectivityResult>>);

  @override
  _i8.Future<List<_i30.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i8.Future<List<_i30.ConnectivityResult>>.value(
            <_i30.ConnectivityResult>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i30.ConnectivityResult>>.value(
                <_i30.ConnectivityResult>[]),
      ) as _i8.Future<List<_i30.ConnectivityResult>>);
}

/// A class which mocks [FirebaseAnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAnalyticsService extends _i1.Mock
    implements _i3.FirebaseAnalyticsService {
  @override
  void addEvent({
    required String? name,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addEvent,
          [],
          {
            #name: name,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FirebaseAnalytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAnalytics extends _i1.Mock implements _i31.FirebaseAnalytics {
  @override
  _i6.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_9(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_9(
          this,
          Invocation.getter(#app),
        ),
      ) as _i6.FirebaseApp);

  @override
  set app(_i6.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<String?> get appInstanceId => (super.noSuchMethod(
        Invocation.getter(#appInstanceId),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i8.Future<bool> isSupported() => (super.noSuchMethod(
        Invocation.method(
          #isSupported,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<int?> getSessionId() => (super.noSuchMethod(
        Invocation.method(
          #getSessionId,
          [],
        ),
        returnValue: _i8.Future<int?>.value(),
        returnValueForMissingStub: _i8.Future<int?>.value(),
      ) as _i8.Future<int?>);

  @override
  _i8.Future<void> logEvent({
    required String? name,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logEvent,
          [],
          {
            #name: name,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setConsent({
    bool? adStorageConsentGranted,
    bool? analyticsStorageConsentGranted,
    bool? adPersonalizationSignalsConsentGranted,
    bool? adUserDataConsentGranted,
    bool? functionalityStorageConsentGranted,
    bool? personalizationStorageConsentGranted,
    bool? securityStorageConsentGranted,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setConsent,
          [],
          {
            #adStorageConsentGranted: adStorageConsentGranted,
            #analyticsStorageConsentGranted: analyticsStorageConsentGranted,
            #adPersonalizationSignalsConsentGranted:
                adPersonalizationSignalsConsentGranted,
            #adUserDataConsentGranted: adUserDataConsentGranted,
            #functionalityStorageConsentGranted:
                functionalityStorageConsentGranted,
            #personalizationStorageConsentGranted:
                personalizationStorageConsentGranted,
            #securityStorageConsentGranted: securityStorageConsentGranted,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setDefaultEventParameters(
          Map<String, Object?>? defaultParameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDefaultEventParameters,
          [defaultParameters],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setAnalyticsCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAnalyticsCollectionEnabled,
          [enabled],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setUserId({
    String? id,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserId,
          [],
          {
            #id: id,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setCurrentScreen({
    required String? screenName,
    String? screenClassOverride = r'Flutter',
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCurrentScreen,
          [],
          {
            #screenName: screenName,
            #screenClassOverride: screenClassOverride,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setUserProperty({
    required String? name,
    required String? value,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserProperty,
          [],
          {
            #name: name,
            #value: value,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> resetAnalyticsData() => (super.noSuchMethod(
        Invocation.method(
          #resetAnalyticsData,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logAddPaymentInfo({
    String? coupon,
    String? currency,
    String? paymentType,
    double? value,
    List<_i31.AnalyticsEventItem>? items,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logAddPaymentInfo,
          [],
          {
            #coupon: coupon,
            #currency: currency,
            #paymentType: paymentType,
            #value: value,
            #items: items,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logAddShippingInfo({
    String? coupon,
    String? currency,
    double? value,
    String? shippingTier,
    List<_i31.AnalyticsEventItem>? items,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logAddShippingInfo,
          [],
          {
            #coupon: coupon,
            #currency: currency,
            #value: value,
            #shippingTier: shippingTier,
            #items: items,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logAddToCart({
    List<_i31.AnalyticsEventItem>? items,
    double? value,
    String? currency,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logAddToCart,
          [],
          {
            #items: items,
            #value: value,
            #currency: currency,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logAddToWishlist({
    List<_i31.AnalyticsEventItem>? items,
    double? value,
    String? currency,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logAddToWishlist,
          [],
          {
            #items: items,
            #value: value,
            #currency: currency,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logAdImpression({
    String? adPlatform,
    String? adSource,
    String? adFormat,
    String? adUnitName,
    double? value,
    String? currency,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logAdImpression,
          [],
          {
            #adPlatform: adPlatform,
            #adSource: adSource,
            #adFormat: adFormat,
            #adUnitName: adUnitName,
            #value: value,
            #currency: currency,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logAppOpen({
    _i31.AnalyticsCallOptions? callOptions,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logAppOpen,
          [],
          {
            #callOptions: callOptions,
            #parameters: parameters,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logBeginCheckout({
    double? value,
    String? currency,
    List<_i31.AnalyticsEventItem>? items,
    String? coupon,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logBeginCheckout,
          [],
          {
            #value: value,
            #currency: currency,
            #items: items,
            #coupon: coupon,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logCampaignDetails({
    required String? source,
    required String? medium,
    required String? campaign,
    String? term,
    String? content,
    String? aclid,
    String? cp1,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logCampaignDetails,
          [],
          {
            #source: source,
            #medium: medium,
            #campaign: campaign,
            #term: term,
            #content: content,
            #aclid: aclid,
            #cp1: cp1,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logEarnVirtualCurrency({
    required String? virtualCurrencyName,
    required num? value,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logEarnVirtualCurrency,
          [],
          {
            #virtualCurrencyName: virtualCurrencyName,
            #value: value,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logGenerateLead({
    String? currency,
    double? value,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logGenerateLead,
          [],
          {
            #currency: currency,
            #value: value,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logJoinGroup({
    required String? groupId,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logJoinGroup,
          [],
          {
            #groupId: groupId,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logLevelUp({
    required int? level,
    String? character,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logLevelUp,
          [],
          {
            #level: level,
            #character: character,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logLevelStart({
    required String? levelName,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logLevelStart,
          [],
          {
            #levelName: levelName,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logLevelEnd({
    required String? levelName,
    int? success,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logLevelEnd,
          [],
          {
            #levelName: levelName,
            #success: success,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logSetCheckoutOption({
    required int? checkoutStep,
    required String? checkoutOption,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSetCheckoutOption,
          [],
          {
            #checkoutStep: checkoutStep,
            #checkoutOption: checkoutOption,
            #parameters: parameters,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logLogin({
    String? loginMethod,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logLogin,
          [],
          {
            #loginMethod: loginMethod,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logPostScore({
    required int? score,
    int? level,
    String? character,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logPostScore,
          [],
          {
            #score: score,
            #level: level,
            #character: character,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logPurchase({
    String? currency,
    String? coupon,
    double? value,
    List<_i31.AnalyticsEventItem>? items,
    double? tax,
    double? shipping,
    String? transactionId,
    String? affiliation,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logPurchase,
          [],
          {
            #currency: currency,
            #coupon: coupon,
            #value: value,
            #items: items,
            #tax: tax,
            #shipping: shipping,
            #transactionId: transactionId,
            #affiliation: affiliation,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logRemoveFromCart({
    String? currency,
    double? value,
    List<_i31.AnalyticsEventItem>? items,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logRemoveFromCart,
          [],
          {
            #currency: currency,
            #value: value,
            #items: items,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logScreenView({
    String? screenClass,
    String? screenName,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logScreenView,
          [],
          {
            #screenClass: screenClass,
            #screenName: screenName,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logSelectItem({
    String? itemListId,
    String? itemListName,
    List<_i31.AnalyticsEventItem>? items,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSelectItem,
          [],
          {
            #itemListId: itemListId,
            #itemListName: itemListName,
            #items: items,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logSelectPromotion({
    String? creativeName,
    String? creativeSlot,
    List<_i31.AnalyticsEventItem>? items,
    String? locationId,
    String? promotionId,
    String? promotionName,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSelectPromotion,
          [],
          {
            #creativeName: creativeName,
            #creativeSlot: creativeSlot,
            #items: items,
            #locationId: locationId,
            #promotionId: promotionId,
            #promotionName: promotionName,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logViewCart({
    String? currency,
    double? value,
    List<_i31.AnalyticsEventItem>? items,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logViewCart,
          [],
          {
            #currency: currency,
            #value: value,
            #items: items,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logSearch({
    required String? searchTerm,
    int? numberOfNights,
    int? numberOfRooms,
    int? numberOfPassengers,
    String? origin,
    String? destination,
    String? startDate,
    String? endDate,
    String? travelClass,
    Map<String, Object>? parameters,
    _i31.AnalyticsCallOptions? callOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSearch,
          [],
          {
            #searchTerm: searchTerm,
            #numberOfNights: numberOfNights,
            #numberOfRooms: numberOfRooms,
            #numberOfPassengers: numberOfPassengers,
            #origin: origin,
            #destination: destination,
            #startDate: startDate,
            #endDate: endDate,
            #travelClass: travelClass,
            #parameters: parameters,
            #callOptions: callOptions,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logSelectContent({
    required String? contentType,
    required String? itemId,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSelectContent,
          [],
          {
            #contentType: contentType,
            #itemId: itemId,
            #parameters: parameters,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logShare({
    required String? contentType,
    required String? itemId,
    required String? method,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logShare,
          [],
          {
            #contentType: contentType,
            #itemId: itemId,
            #method: method,
            #parameters: parameters,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logSignUp({
    required String? signUpMethod,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSignUp,
          [],
          {
            #signUpMethod: signUpMethod,
            #parameters: parameters,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logSpendVirtualCurrency({
    required String? itemName,
    required String? virtualCurrencyName,
    required num? value,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSpendVirtualCurrency,
          [],
          {
            #itemName: itemName,
            #virtualCurrencyName: virtualCurrencyName,
            #value: value,
            #parameters: parameters,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logTutorialBegin({Map<String, Object>? parameters}) =>
      (super.noSuchMethod(
        Invocation.method(
          #logTutorialBegin,
          [],
          {#parameters: parameters},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logTutorialComplete({Map<String, Object>? parameters}) =>
      (super.noSuchMethod(
        Invocation.method(
          #logTutorialComplete,
          [],
          {#parameters: parameters},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logUnlockAchievement({
    required String? id,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logUnlockAchievement,
          [],
          {
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logViewItem({
    String? currency,
    double? value,
    List<_i31.AnalyticsEventItem>? items,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logViewItem,
          [],
          {
            #currency: currency,
            #value: value,
            #items: items,
            #parameters: parameters,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logViewItemList({
    List<_i31.AnalyticsEventItem>? items,
    String? itemListId,
    String? itemListName,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logViewItemList,
          [],
          {
            #items: items,
            #itemListId: itemListId,
            #itemListName: itemListName,
            #parameters: parameters,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logViewPromotion({
    String? creativeName,
    String? creativeSlot,
    List<_i31.AnalyticsEventItem>? items,
    String? locationId,
    String? promotionId,
    String? promotionName,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logViewPromotion,
          [],
          {
            #creativeName: creativeName,
            #creativeSlot: creativeSlot,
            #items: items,
            #locationId: locationId,
            #promotionId: promotionId,
            #promotionName: promotionName,
            #parameters: parameters,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logViewSearchResults({
    required String? searchTerm,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logViewSearchResults,
          [],
          {
            #searchTerm: searchTerm,
            #parameters: parameters,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> logRefund({
    String? currency,
    String? coupon,
    double? value,
    double? tax,
    double? shipping,
    String? transactionId,
    String? affiliation,
    List<_i31.AnalyticsEventItem>? items,
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logRefund,
          [],
          {
            #currency: currency,
            #coupon: coupon,
            #value: value,
            #tax: tax,
            #shipping: shipping,
            #transactionId: transactionId,
            #affiliation: affiliation,
            #items: items,
            #parameters: parameters,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setSessionTimeoutDuration(Duration? timeout) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSessionTimeoutDuration,
          [timeout],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> initiateOnDeviceConversionMeasurementWithEmailAddress(
          String? emailAddress) =>
      (super.noSuchMethod(
        Invocation.method(
          #initiateOnDeviceConversionMeasurementWithEmailAddress,
          [emailAddress],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> initiateOnDeviceConversionMeasurementWithPhoneNumber(
          String? phoneNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #initiateOnDeviceConversionMeasurementWithPhoneNumber,
          [phoneNumber],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> initiateOnDeviceConversionMeasurementWithHashedEmailAddress(
          String? hashedEmailAddress) =>
      (super.noSuchMethod(
        Invocation.method(
          #initiateOnDeviceConversionMeasurementWithHashedEmailAddress,
          [hashedEmailAddress],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> initiateOnDeviceConversionMeasurementWithHashedPhoneNumber(
          String? hashedPhoneNumber) =>
      (super.noSuchMethod(
        Invocation.method(
          #initiateOnDeviceConversionMeasurementWithHashedPhoneNumber,
          [hashedPhoneNumber],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [FirebaseRemoteConfigProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseRemoteConfigProvider extends _i1.Mock
    implements _i3.FirebaseRemoteConfigProvider {
  @override
  int getInt(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getInt,
          [key],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String getString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.method(
            #getString,
            [key],
          ),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.method(
            #getString,
            [key],
          ),
        ),
      ) as String);
}

/// A class which mocks [FirebaseRemoteConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseRemoteConfig extends _i1.Mock
    implements _i16.FirebaseRemoteConfig {
  @override
  _i6.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_9(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_9(
          this,
          Invocation.getter(#app),
        ),
      ) as _i6.FirebaseApp);

  @override
  DateTime get lastFetchTime => (super.noSuchMethod(
        Invocation.getter(#lastFetchTime),
        returnValue: _FakeDateTime_45(
          this,
          Invocation.getter(#lastFetchTime),
        ),
        returnValueForMissingStub: _FakeDateTime_45(
          this,
          Invocation.getter(#lastFetchTime),
        ),
      ) as DateTime);

  @override
  _i16.RemoteConfigFetchStatus get lastFetchStatus => (super.noSuchMethod(
        Invocation.getter(#lastFetchStatus),
        returnValue: _i16.RemoteConfigFetchStatus.noFetchYet,
        returnValueForMissingStub: _i16.RemoteConfigFetchStatus.noFetchYet,
      ) as _i16.RemoteConfigFetchStatus);

  @override
  _i16.RemoteConfigSettings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeRemoteConfigSettings_54(
          this,
          Invocation.getter(#settings),
        ),
        returnValueForMissingStub: _FakeRemoteConfigSettings_54(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i16.RemoteConfigSettings);

  @override
  _i8.Stream<_i16.RemoteConfigUpdate> get onConfigUpdated =>
      (super.noSuchMethod(
        Invocation.getter(#onConfigUpdated),
        returnValue: _i8.Stream<_i16.RemoteConfigUpdate>.empty(),
        returnValueForMissingStub: _i8.Stream<_i16.RemoteConfigUpdate>.empty(),
      ) as _i8.Stream<_i16.RemoteConfigUpdate>);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i8.Future<bool> activate() => (super.noSuchMethod(
        Invocation.method(
          #activate,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> ensureInitialized() => (super.noSuchMethod(
        Invocation.method(
          #ensureInitialized,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> fetch() => (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> fetchAndActivate() => (super.noSuchMethod(
        Invocation.method(
          #fetchAndActivate,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  Map<String, _i16.RemoteConfigValue> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <String, _i16.RemoteConfigValue>{},
        returnValueForMissingStub: <String, _i16.RemoteConfigValue>{},
      ) as Map<String, _i16.RemoteConfigValue>);

  @override
  bool getBool(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int getInt(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getInt,
          [key],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  double getDouble(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getDouble,
          [key],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  String getString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.method(
            #getString,
            [key],
          ),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.method(
            #getString,
            [key],
          ),
        ),
      ) as String);

  @override
  _i16.RemoteConfigValue getValue(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getValue,
          [key],
        ),
        returnValue: _FakeRemoteConfigValue_55(
          this,
          Invocation.method(
            #getValue,
            [key],
          ),
        ),
        returnValueForMissingStub: _FakeRemoteConfigValue_55(
          this,
          Invocation.method(
            #getValue,
            [key],
          ),
        ),
      ) as _i16.RemoteConfigValue);

  @override
  _i8.Future<void> setConfigSettings(
          _i16.RemoteConfigSettings? remoteConfigSettings) =>
      (super.noSuchMethod(
        Invocation.method(
          #setConfigSettings,
          [remoteConfigSettings],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setDefaults(Map<String, dynamic>? defaultParameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDefaults,
          [defaultParameters],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [FirebaseMessaging].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseMessaging extends _i1.Mock implements _i32.FirebaseMessaging {
  @override
  _i6.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_9(
          this,
          Invocation.getter(#app),
        ),
        returnValueForMissingStub: _FakeFirebaseApp_9(
          this,
          Invocation.getter(#app),
        ),
      ) as _i6.FirebaseApp);

  @override
  set app(_i6.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isAutoInitEnabled => (super.noSuchMethod(
        Invocation.getter(#isAutoInitEnabled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Stream<String> get onTokenRefresh => (super.noSuchMethod(
        Invocation.getter(#onTokenRefresh),
        returnValue: _i8.Stream<String>.empty(),
        returnValueForMissingStub: _i8.Stream<String>.empty(),
      ) as _i8.Stream<String>);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i8.Future<_i17.RemoteMessage?> getInitialMessage() => (super.noSuchMethod(
        Invocation.method(
          #getInitialMessage,
          [],
        ),
        returnValue: _i8.Future<_i17.RemoteMessage?>.value(),
        returnValueForMissingStub: _i8.Future<_i17.RemoteMessage?>.value(),
      ) as _i8.Future<_i17.RemoteMessage?>);

  @override
  _i8.Future<void> deleteToken() => (super.noSuchMethod(
        Invocation.method(
          #deleteToken,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String?> getAPNSToken() => (super.noSuchMethod(
        Invocation.method(
          #getAPNSToken,
          [],
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<String?> getToken({String? vapidKey}) => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
          {#vapidKey: vapidKey},
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<bool> isSupported() => (super.noSuchMethod(
        Invocation.method(
          #isSupported,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i17.NotificationSettings> getNotificationSettings() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotificationSettings,
          [],
        ),
        returnValue: _i8.Future<_i17.NotificationSettings>.value(
            _FakeNotificationSettings_56(
          this,
          Invocation.method(
            #getNotificationSettings,
            [],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i17.NotificationSettings>.value(
            _FakeNotificationSettings_56(
          this,
          Invocation.method(
            #getNotificationSettings,
            [],
          ),
        )),
      ) as _i8.Future<_i17.NotificationSettings>);

  @override
  _i8.Future<_i17.NotificationSettings> requestPermission({
    bool? alert = true,
    bool? announcement = false,
    bool? badge = true,
    bool? carPlay = false,
    bool? criticalAlert = false,
    bool? provisional = false,
    bool? sound = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
          {
            #alert: alert,
            #announcement: announcement,
            #badge: badge,
            #carPlay: carPlay,
            #criticalAlert: criticalAlert,
            #provisional: provisional,
            #sound: sound,
          },
        ),
        returnValue: _i8.Future<_i17.NotificationSettings>.value(
            _FakeNotificationSettings_56(
          this,
          Invocation.method(
            #requestPermission,
            [],
            {
              #alert: alert,
              #announcement: announcement,
              #badge: badge,
              #carPlay: carPlay,
              #criticalAlert: criticalAlert,
              #provisional: provisional,
              #sound: sound,
            },
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i17.NotificationSettings>.value(
            _FakeNotificationSettings_56(
          this,
          Invocation.method(
            #requestPermission,
            [],
            {
              #alert: alert,
              #announcement: announcement,
              #badge: badge,
              #carPlay: carPlay,
              #criticalAlert: criticalAlert,
              #provisional: provisional,
              #sound: sound,
            },
          ),
        )),
      ) as _i8.Future<_i17.NotificationSettings>);

  @override
  _i8.Future<void> sendMessage({
    String? to,
    Map<String, String>? data,
    String? collapseKey,
    String? messageId,
    String? messageType,
    int? ttl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #to: to,
            #data: data,
            #collapseKey: collapseKey,
            #messageId: messageId,
            #messageType: messageType,
            #ttl: ttl,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setAutoInitEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setAutoInitEnabled,
          [enabled],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setDeliveryMetricsExportToBigQuery(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDeliveryMetricsExportToBigQuery,
          [enabled],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setForegroundNotificationPresentationOptions({
    bool? alert = false,
    bool? badge = false,
    bool? sound = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setForegroundNotificationPresentationOptions,
          [],
          {
            #alert: alert,
            #badge: badge,
            #sound: sound,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> subscribeToTopic(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #subscribeToTopic,
          [topic],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> unsubscribeFromTopic(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromTopic,
          [topic],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [IDeviceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDeviceRepository extends _i1.Mock implements _i3.IDeviceRepository {
  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, _i3.DeviceInfoModel?>> getDevice(
          {List<_i3.DeviceInfoModel>? initialList}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevice,
          [],
          {#initialList: initialList},
        ),
        returnValue:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.DeviceInfoModel?>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.DeviceInfoModel?>(
          this,
          Invocation.method(
            #getDevice,
            [],
            {#initialList: initialList},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, _i3.DeviceInfoModel?>>.value(
                _FakeEither_0<_i3.SomeFailure, _i3.DeviceInfoModel?>(
          this,
          Invocation.method(
            #getDevice,
            [],
            {#initialList: initialList},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, _i3.DeviceInfoModel?>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, String>> getDeviceId(
          {_i3.PlatformEnum? platformValue}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDeviceId,
          [],
          {#platformValue: platformValue},
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, String>>.value(
            _FakeEither_0<_i3.SomeFailure, String>(
          this,
          Invocation.method(
            #getDeviceId,
            [],
            {#platformValue: platformValue},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, String>>.value(
                _FakeEither_0<_i3.SomeFailure, String>(
          this,
          Invocation.method(
            #getDeviceId,
            [],
            {#platformValue: platformValue},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, String>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, String?>> getFcm(
          {_i3.PlatformEnum? platformValue}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFcm,
          [],
          {#platformValue: platformValue},
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, String?>>.value(
            _FakeEither_0<_i3.SomeFailure, String?>(
          this,
          Invocation.method(
            #getFcm,
            [],
            {#platformValue: platformValue},
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, String?>>.value(
                _FakeEither_0<_i3.SomeFailure, String?>(
          this,
          Invocation.method(
            #getFcm,
            [],
            {#platformValue: platformValue},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, String?>>);
}

/// A class which mocks [AppInfoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppInfoRepository extends _i1.Mock implements _i3.AppInfoRepository {
  @override
  _i8.Future<_i18.PackageInfo> getBuildInfo() => (super.noSuchMethod(
        Invocation.method(
          #getBuildInfo,
          [],
        ),
        returnValue: _i8.Future<_i18.PackageInfo>.value(_FakePackageInfo_57(
          this,
          Invocation.method(
            #getBuildInfo,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i18.PackageInfo>.value(_FakePackageInfo_57(
          this,
          Invocation.method(
            #getBuildInfo,
            [],
          ),
        )),
      ) as _i8.Future<_i18.PackageInfo>);
}

/// A class which mocks [DeviceInfoPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoPlugin extends _i1.Mock implements _i33.DeviceInfoPlugin {
  @override
  _i8.Future<_i19.AndroidDeviceInfo> get androidInfo => (super.noSuchMethod(
        Invocation.getter(#androidInfo),
        returnValue:
            _i8.Future<_i19.AndroidDeviceInfo>.value(_FakeAndroidDeviceInfo_58(
          this,
          Invocation.getter(#androidInfo),
        )),
        returnValueForMissingStub:
            _i8.Future<_i19.AndroidDeviceInfo>.value(_FakeAndroidDeviceInfo_58(
          this,
          Invocation.getter(#androidInfo),
        )),
      ) as _i8.Future<_i19.AndroidDeviceInfo>);

  @override
  _i8.Future<_i20.IosDeviceInfo> get iosInfo => (super.noSuchMethod(
        Invocation.getter(#iosInfo),
        returnValue: _i8.Future<_i20.IosDeviceInfo>.value(_FakeIosDeviceInfo_59(
          this,
          Invocation.getter(#iosInfo),
        )),
        returnValueForMissingStub:
            _i8.Future<_i20.IosDeviceInfo>.value(_FakeIosDeviceInfo_59(
          this,
          Invocation.getter(#iosInfo),
        )),
      ) as _i8.Future<_i20.IosDeviceInfo>);

  @override
  _i8.Future<_i21.LinuxDeviceInfo> get linuxInfo => (super.noSuchMethod(
        Invocation.getter(#linuxInfo),
        returnValue:
            _i8.Future<_i21.LinuxDeviceInfo>.value(_FakeLinuxDeviceInfo_60(
          this,
          Invocation.getter(#linuxInfo),
        )),
        returnValueForMissingStub:
            _i8.Future<_i21.LinuxDeviceInfo>.value(_FakeLinuxDeviceInfo_60(
          this,
          Invocation.getter(#linuxInfo),
        )),
      ) as _i8.Future<_i21.LinuxDeviceInfo>);

  @override
  _i8.Future<_i22.WebBrowserInfo> get webBrowserInfo => (super.noSuchMethod(
        Invocation.getter(#webBrowserInfo),
        returnValue:
            _i8.Future<_i22.WebBrowserInfo>.value(_FakeWebBrowserInfo_61(
          this,
          Invocation.getter(#webBrowserInfo),
        )),
        returnValueForMissingStub:
            _i8.Future<_i22.WebBrowserInfo>.value(_FakeWebBrowserInfo_61(
          this,
          Invocation.getter(#webBrowserInfo),
        )),
      ) as _i8.Future<_i22.WebBrowserInfo>);

  @override
  _i8.Future<_i23.MacOsDeviceInfo> get macOsInfo => (super.noSuchMethod(
        Invocation.getter(#macOsInfo),
        returnValue:
            _i8.Future<_i23.MacOsDeviceInfo>.value(_FakeMacOsDeviceInfo_62(
          this,
          Invocation.getter(#macOsInfo),
        )),
        returnValueForMissingStub:
            _i8.Future<_i23.MacOsDeviceInfo>.value(_FakeMacOsDeviceInfo_62(
          this,
          Invocation.getter(#macOsInfo),
        )),
      ) as _i8.Future<_i23.MacOsDeviceInfo>);

  @override
  _i8.Future<_i24.WindowsDeviceInfo> get windowsInfo => (super.noSuchMethod(
        Invocation.getter(#windowsInfo),
        returnValue:
            _i8.Future<_i24.WindowsDeviceInfo>.value(_FakeWindowsDeviceInfo_63(
          this,
          Invocation.getter(#windowsInfo),
        )),
        returnValueForMissingStub:
            _i8.Future<_i24.WindowsDeviceInfo>.value(_FakeWindowsDeviceInfo_63(
          this,
          Invocation.getter(#windowsInfo),
        )),
      ) as _i8.Future<_i24.WindowsDeviceInfo>);

  @override
  _i8.Future<_i25.BaseDeviceInfo> get deviceInfo => (super.noSuchMethod(
        Invocation.getter(#deviceInfo),
        returnValue:
            _i8.Future<_i25.BaseDeviceInfo>.value(_FakeBaseDeviceInfo_64(
          this,
          Invocation.getter(#deviceInfo),
        )),
        returnValueForMissingStub:
            _i8.Future<_i25.BaseDeviceInfo>.value(_FakeBaseDeviceInfo_64(
          this,
          Invocation.getter(#deviceInfo),
        )),
      ) as _i8.Future<_i25.BaseDeviceInfo>);
}

/// A class which mocks [FailureRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFailureRepository extends _i1.Mock implements _i3.FailureRepository {
  @override
  void sendError(_i3.SomeFailure? failure) => super.noSuchMethod(
        Invocation.method(
          #sendError,
          [failure],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FacebookAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFacebookAuth extends _i1.Mock implements _i26.FacebookAuth {
  @override
  _i8.Future<_i26.AccessToken?> get accessToken => (super.noSuchMethod(
        Invocation.getter(#accessToken),
        returnValue: _i8.Future<_i26.AccessToken?>.value(),
        returnValueForMissingStub: _i8.Future<_i26.AccessToken?>.value(),
      ) as _i8.Future<_i26.AccessToken?>);

  @override
  bool get isWebSdkInitialized => (super.noSuchMethod(
        Invocation.getter(#isWebSdkInitialized),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i8.Future<bool> get isAutoLogAppEventsEnabled => (super.noSuchMethod(
        Invocation.getter(#isAutoLogAppEventsEnabled),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i26.LoginResult> expressLogin() => (super.noSuchMethod(
        Invocation.method(
          #expressLogin,
          [],
        ),
        returnValue: _i8.Future<_i26.LoginResult>.value(_FakeLoginResult_65(
          this,
          Invocation.method(
            #expressLogin,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i26.LoginResult>.value(_FakeLoginResult_65(
          this,
          Invocation.method(
            #expressLogin,
            [],
          ),
        )),
      ) as _i8.Future<_i26.LoginResult>);

  @override
  _i8.Future<Map<String, dynamic>> getUserData(
          {String? fields = r'name,email,picture.width(200)'}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserData,
          [],
          {#fields: fields},
        ),
        returnValue:
            _i8.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i8.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i8.Future<Map<String, dynamic>>);

  @override
  _i8.Future<void> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i26.LoginResult> login({
    List<String>? permissions = const [
      r'email',
      r'public_profile',
    ],
    _i26.LoginBehavior? loginBehavior = _i26.LoginBehavior.nativeWithFallback,
    _i26.LoginTracking? loginTracking = _i26.LoginTracking.limited,
    String? nonce,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #permissions: permissions,
            #loginBehavior: loginBehavior,
            #loginTracking: loginTracking,
            #nonce: nonce,
          },
        ),
        returnValue: _i8.Future<_i26.LoginResult>.value(_FakeLoginResult_65(
          this,
          Invocation.method(
            #login,
            [],
            {
              #permissions: permissions,
              #loginBehavior: loginBehavior,
              #loginTracking: loginTracking,
              #nonce: nonce,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i26.LoginResult>.value(_FakeLoginResult_65(
          this,
          Invocation.method(
            #login,
            [],
            {
              #permissions: permissions,
              #loginBehavior: loginBehavior,
              #loginTracking: loginTracking,
              #nonce: nonce,
            },
          ),
        )),
      ) as _i8.Future<_i26.LoginResult>);

  @override
  _i8.Future<void> webAndDesktopInitialize({
    required String? appId,
    required bool? cookie,
    required bool? xfbml,
    required String? version,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #webAndDesktopInitialize,
          [],
          {
            #appId: appId,
            #cookie: cookie,
            #xfbml: xfbml,
            #version: version,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> autoLogAppEventsEnabled(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #autoLogAppEventsEnabled,
          [enabled],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [LoginResult].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginResult extends _i1.Mock implements _i26.LoginResult {
  @override
  _i26.LoginStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i26.LoginStatus.success,
        returnValueForMissingStub: _i26.LoginStatus.success,
      ) as _i26.LoginStatus);
}

/// A class which mocks [FacebookAuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockFacebookAuthProvider extends _i1.Mock
    implements _i4.FacebookAuthProvider {
  @override
  List<String> get scopes => (super.noSuchMethod(
        Invocation.getter(#scopes),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  Map<dynamic, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <dynamic, dynamic>{},
        returnValueForMissingStub: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  String get providerId => (super.noSuchMethod(
        Invocation.getter(#providerId),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#providerId),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#providerId),
        ),
      ) as String);

  @override
  _i4.FacebookAuthProvider addScope(String? scope) => (super.noSuchMethod(
        Invocation.method(
          #addScope,
          [scope],
        ),
        returnValue: _FakeFacebookAuthProvider_6(
          this,
          Invocation.method(
            #addScope,
            [scope],
          ),
        ),
        returnValueForMissingStub: _FakeFacebookAuthProvider_6(
          this,
          Invocation.method(
            #addScope,
            [scope],
          ),
        ),
      ) as _i4.FacebookAuthProvider);

  @override
  _i4.FacebookAuthProvider setCustomParameters(
          Map<dynamic, dynamic>? customOAuthParameters) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCustomParameters,
          [customOAuthParameters],
        ),
        returnValue: _FakeFacebookAuthProvider_6(
          this,
          Invocation.method(
            #setCustomParameters,
            [customOAuthParameters],
          ),
        ),
        returnValueForMissingStub: _FakeFacebookAuthProvider_6(
          this,
          Invocation.method(
            #setCustomParameters,
            [customOAuthParameters],
          ),
        ),
      ) as _i4.FacebookAuthProvider);
}

/// A class which mocks [ICitiesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockICitiesRepository extends _i1.Mock implements _i3.ICitiesRepository {
  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.CityModel>>> getCities() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCities,
          [],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.CityModel>>>.value(
                _FakeEither_0<_i3.SomeFailure, List<_i3.CityModel>>(
          this,
          Invocation.method(
            #getCities,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.CityModel>>>.value(
                _FakeEither_0<_i3.SomeFailure, List<_i3.CityModel>>(
          this,
          Invocation.method(
            #getCities,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, List<_i3.CityModel>>>);
}

/// A class which mocks [ICompanyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockICompanyRepository extends _i1.Mock
    implements _i3.ICompanyRepository {
  @override
  _i8.Stream<_i3.CompanyModel> get company => (super.noSuchMethod(
        Invocation.getter(#company),
        returnValue: _i8.Stream<_i3.CompanyModel>.empty(),
        returnValueForMissingStub: _i8.Stream<_i3.CompanyModel>.empty(),
      ) as _i8.Stream<_i3.CompanyModel>);

  @override
  _i3.CompanyModel get currentUserCompany => (super.noSuchMethod(
        Invocation.getter(#currentUserCompany),
        returnValue: _FakeCompanyModel_66(
          this,
          Invocation.getter(#currentUserCompany),
        ),
        returnValueForMissingStub: _FakeCompanyModel_66(
          this,
          Invocation.getter(#currentUserCompany),
        ),
      ) as _i3.CompanyModel);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> updateCompany({
    required _i3.CompanyModel? company,
    required _i3.FilePickerItem? imageItem,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCompany,
          [],
          {
            #company: company,
            #imageItem: imageItem,
          },
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateCompany,
            [],
            {
              #company: company,
              #imageItem: imageItem,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #updateCompany,
            [],
            {
              #company: company,
              #imageItem: imageItem,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> deleteCompany() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCompany,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteCompany,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #deleteCompany,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IDataPickerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDataPickerRepository extends _i1.Mock
    implements _i3.IDataPickerRepository {
  @override
  _i8.Future<_i3.FilePickerItem?> get getImage => (super.noSuchMethod(
        Invocation.getter(#getImage),
        returnValue: _i8.Future<_i3.FilePickerItem?>.value(),
        returnValueForMissingStub: _i8.Future<_i3.FilePickerItem?>.value(),
      ) as _i8.Future<_i3.FilePickerItem?>);

  @override
  _i8.Future<_i3.FilePickerItem?> get getFile => (super.noSuchMethod(
        Invocation.getter(#getFile),
        returnValue: _i8.Future<_i3.FilePickerItem?>.value(),
        returnValueForMissingStub: _i8.Future<_i3.FilePickerItem?>.value(),
      ) as _i8.Future<_i3.FilePickerItem?>);
}

/// A class which mocks [FilePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilePicker extends _i1.Mock implements _i34.FilePicker {
  @override
  _i8.Future<_i35.FilePickerResult?> pickFiles({
    String? dialogTitle,
    String? initialDirectory,
    _i34.FileType? type = _i34.FileType.any,
    List<String>? allowedExtensions,
    dynamic Function(_i34.FilePickerStatus)? onFileLoading,
    bool? allowCompression = true,
    int? compressionQuality = 30,
    bool? allowMultiple = false,
    bool? withData = false,
    bool? withReadStream = false,
    bool? lockParentWindow = false,
    bool? readSequential = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickFiles,
          [],
          {
            #dialogTitle: dialogTitle,
            #initialDirectory: initialDirectory,
            #type: type,
            #allowedExtensions: allowedExtensions,
            #onFileLoading: onFileLoading,
            #allowCompression: allowCompression,
            #compressionQuality: compressionQuality,
            #allowMultiple: allowMultiple,
            #withData: withData,
            #withReadStream: withReadStream,
            #lockParentWindow: lockParentWindow,
            #readSequential: readSequential,
          },
        ),
        returnValue: _i8.Future<_i35.FilePickerResult?>.value(),
        returnValueForMissingStub: _i8.Future<_i35.FilePickerResult?>.value(),
      ) as _i8.Future<_i35.FilePickerResult?>);

  @override
  _i8.Future<bool?> clearTemporaryFiles() => (super.noSuchMethod(
        Invocation.method(
          #clearTemporaryFiles,
          [],
        ),
        returnValue: _i8.Future<bool?>.value(),
        returnValueForMissingStub: _i8.Future<bool?>.value(),
      ) as _i8.Future<bool?>);

  @override
  _i8.Future<String?> getDirectoryPath({
    String? dialogTitle,
    bool? lockParentWindow = false,
    String? initialDirectory,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDirectoryPath,
          [],
          {
            #dialogTitle: dialogTitle,
            #lockParentWindow: lockParentWindow,
            #initialDirectory: initialDirectory,
          },
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);

  @override
  _i8.Future<String?> saveFile({
    String? dialogTitle,
    String? fileName,
    String? initialDirectory,
    _i34.FileType? type = _i34.FileType.any,
    List<String>? allowedExtensions,
    _i27.Uint8List? bytes,
    bool? lockParentWindow = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveFile,
          [],
          {
            #dialogTitle: dialogTitle,
            #fileName: fileName,
            #initialDirectory: initialDirectory,
            #type: type,
            #allowedExtensions: allowedExtensions,
            #bytes: bytes,
            #lockParentWindow: lockParentWindow,
          },
        ),
        returnValue: _i8.Future<String?>.value(),
        returnValueForMissingStub: _i8.Future<String?>.value(),
      ) as _i8.Future<String?>);
}

/// A class which mocks [FilePickerResult].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilePickerResult extends _i1.Mock implements _i35.FilePickerResult {
  @override
  List<_i36.PlatformFile> get files => (super.noSuchMethod(
        Invocation.getter(#files),
        returnValue: <_i36.PlatformFile>[],
        returnValueForMissingStub: <_i36.PlatformFile>[],
      ) as List<_i36.PlatformFile>);

  @override
  bool get isSinglePick => (super.noSuchMethod(
        Invocation.getter(#isSinglePick),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int get count => (super.noSuchMethod(
        Invocation.getter(#count),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  List<String?> get paths => (super.noSuchMethod(
        Invocation.getter(#paths),
        returnValue: <String?>[],
        returnValueForMissingStub: <String?>[],
      ) as List<String?>);

  @override
  List<String?> get names => (super.noSuchMethod(
        Invocation.getter(#names),
        returnValue: <String?>[],
        returnValueForMissingStub: <String?>[],
      ) as List<String?>);

  @override
  List<_i11.XFile> get xFiles => (super.noSuchMethod(
        Invocation.getter(#xFiles),
        returnValue: <_i11.XFile>[],
        returnValueForMissingStub: <_i11.XFile>[],
      ) as List<_i11.XFile>);
}

/// A class which mocks [PlatformFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformFile extends _i1.Mock implements _i36.PlatformFile {
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i28.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
        returnValueForMissingStub: _i28.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  int get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i11.XFile get xFile => (super.noSuchMethod(
        Invocation.getter(#xFile),
        returnValue: _FakeXFile_67(
          this,
          Invocation.getter(#xFile),
        ),
        returnValueForMissingStub: _FakeXFile_67(
          this,
          Invocation.getter(#xFile),
        ),
      ) as _i11.XFile);
}

/// A class which mocks [MobileRatingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMobileRatingRepository extends _i1.Mock
    implements _i3.MobileRatingRepository {
  @override
  _i8.Future<_i2.Either<_i3.SomeFailure, bool>> showRatingDialog() =>
      (super.noSuchMethod(
        Invocation.method(
          #showRatingDialog,
          [],
        ),
        returnValue: _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
            _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #showRatingDialog,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i2.Either<_i3.SomeFailure, bool>>.value(
                _FakeEither_0<_i3.SomeFailure, bool>(
          this,
          Invocation.method(
            #showRatingDialog,
            [],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i3.SomeFailure, bool>>);
}

/// A class which mocks [InAppReview].
///
/// See the documentation for Mockito's code generation for more information.
class MockInAppReview extends _i1.Mock implements _i37.InAppReview {
  @override
  _i8.Future<bool> isAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isAvailable,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<void> requestReview() => (super.noSuchMethod(
        Invocation.method(
          #requestReview,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> openStoreListing({
    String? appStoreId,
    String? microsoftStoreId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openStoreListing,
          [],
          {
            #appStoreId: appStoreId,
            #microsoftStoreId: microsoftStoreId,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
